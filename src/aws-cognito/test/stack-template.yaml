namespace: cognito-test

# Basic Identity Pool for testing
test-identity-pool:
  defines: aws-cognito/identity-pool
  region: us-east-1
  identity_pool_name: monk-test-identity-pool
  allow_unauthenticated_identities: true
  allow_classic_flow: false
  identity_pool_tags:
    Environment: test
    Purpose: integration-testing
    CreatedBy: monk-entities

# Basic User Pool for testing
test-user-pool:
  defines: aws-cognito/user-pool
  region: us-east-1
  pool_name: monk-test-user-pool
  mfa_configuration: OFF
  
  # Simple configuration for testing
  password_policy:
    MinimumLength: 8
    RequireUppercase: true
    RequireLowercase: true
    RequireNumbers: true
    RequireSymbols: false
    TemporaryPasswordValidityDays: 7

  # Allow both admin and self-service registration
  admin_create_user_config:
    AllowAdminCreateUserOnly: false
    UnusedAccountValidityDays: 7
    InviteMessageAction: EMAIL

  # Auto-verification
  auto_verified_attributes:
    - email
  username_attributes:
    - email

  # Account recovery
  account_recovery_setting:
    RecoveryMechanisms:
      - Priority: 1
        Name: verified_email

  # Tags
  tags:
    Environment: test
    Purpose: integration-testing
    CreatedBy: monk-entities

# Advanced User Pool for comprehensive testing
test-advanced-user-pool:
  defines: aws-cognito/user-pool
  region: us-east-1
  pool_name: monk-test-advanced-user-pool
  mfa_configuration: ON
  
  # Custom attributes for testing
  schema:
    - Name: department
      AttributeDataType: String
      Required: false
      Mutable: true
      StringAttributeConstraints:
        MinLength: "1"
        MaxLength: "50"
    - Name: employee_id
      AttributeDataType: Number
      Required: false
      Mutable: false
      NumberAttributeConstraints:
        MinValue: "1"
        MaxValue: "999999"

  # Strong password policy
  password_policy:
    MinimumLength: 10
    RequireUppercase: true
    RequireLowercase: true
    RequireNumbers: true
    RequireSymbols: true
    TemporaryPasswordValidityDays: 3

  # Admin-only creation
  admin_create_user_config:
    AllowAdminCreateUserOnly: true
    UnusedAccountValidityDays: 14
    InviteMessageAction: EMAIL

  # Device security
  device_configuration:
    ChallengeRequiredOnNewDevice: true
    DeviceOnlyRememberedOnUserPrompt: false

  # Multiple verification and sign-in methods
  auto_verified_attributes:
    - email
  username_attributes:
    - email
  alias_attributes:
    - preferred_username

  # Account recovery
  account_recovery_setting:
    RecoveryMechanisms:
      - Priority: 1
        Name: verified_email

  # Username configuration
  username_configuration:
    CaseSensitive: false

  # Advanced security
  user_pool_add_ons:
    AdvancedSecurityMode: AUDIT

  # Tags
  tags:
    Environment: test
    Purpose: advanced-testing
    SecurityLevel: high
    CreatedBy: monk-entities

# Basic User Pool Client for testing
test-user-pool-client:
  defines: aws-cognito/user-pool-client
  connections:
    user-pool:
      runnable: cognito-test/test-user-pool
      service: default
  depends:
    wait-for:
      runnables:
        - cognito-test/test-user-pool
      timeout: 600
  region: us-east-1
  user_pool_id: <- connection-target("user-pool") entity-state get-member("user_pool_id")
  client_name: monk-test-client
  generate_secret: false
  
  # Standard auth flows for testing
  explicit_auth_flows:
    - ALLOW_USER_SRP_AUTH
    - ALLOW_USER_PASSWORD_AUTH
    - ALLOW_REFRESH_TOKEN_AUTH
  
  # Standard token validity
  token_validity_units:
    AccessToken: hours
    IdToken: hours
    RefreshToken: days
  access_token_validity: 1
  id_token_validity: 1
  refresh_token_validity: 30
  
  # Basic attribute permissions
  read_attributes:
    - email
    - email_verified
    - name
  write_attributes:
    - name
  
  # Security settings for testing
  prevent_user_existence_errors: ENABLED
  enable_token_revocation: true

# OAuth User Pool Client for testing OAuth flows
test-oauth-client:
  defines: aws-cognito/user-pool-client
  connections:
    user-pool:
      runnable: cognito-test/test-user-pool
      service: default
  depends:
    wait-for:
      runnables:
        - cognito-test/test-user-pool
      timeout: 600
  region: us-east-1
  user_pool_id: <- connection-target("user-pool") entity-state get-member("user_pool_id")
  client_name: monk-test-oauth-client
  generate_secret: true
  
  # Auth flows including OAuth
  explicit_auth_flows:
    - ALLOW_USER_SRP_AUTH
    - ALLOW_REFRESH_TOKEN_AUTH
  
  # OAuth configuration
  allowed_oauth_flows_user_pool_client: true
  allowed_oauth_flows:
    - code
    - implicit
  allowed_oauth_scopes:
    - openid
    - email
    - profile
  
  # Test callback URLs
  callback_urls:
    - https://example.com/callback
    - http://localhost:3000/callback
  logout_urls:
    - https://example.com/logout
    - http://localhost:3000/logout
  default_redirect_uri: https://example.com/callback
  
  # Short token validity for testing
  token_validity_units:
    AccessToken: minutes
    IdToken: minutes
    RefreshToken: hours
  access_token_validity: 30
  id_token_validity: 30
  refresh_token_validity: 2
  
  # Full attribute access for testing
  read_attributes:
    - email
    - email_verified
    - name
  write_attributes:
    - name
  
  # Enhanced security for OAuth testing
  prevent_user_existence_errors: ENABLED
  enable_token_revocation: true
  auth_session_validity: 5

# Test Identity Provider (Google for testing)
test-google-provider:
  defines: aws-cognito/identity-provider
  connections:
    user-pool:
      runnable: cognito-test/test-user-pool
      service: default
  depends:
    wait-for:
      runnables:
        - cognito-test/test-user-pool
      timeout: 600
  region: us-east-1
  user_pool_id: <- connection-target("user-pool") entity-state get-member("user_pool_id")
  provider_name: Google
  provider_type: Google
  provider_details:
    client_id: test-google-client-id.apps.googleusercontent.com
    client_secret: test-google-client-secret
    authorize_scopes: email openid profile
  attribute_mapping:
    email: email
    given_name: given_name
    family_name: family_name
    name: name

# Test OIDC Identity Provider
test-oidc-provider:
  defines: aws-cognito/identity-provider
  connections:
    user-pool:
      runnable: cognito-test/test-user-pool
      service: default
  depends:
    wait-for:
      runnables:
        - cognito-test/test-user-pool
      timeout: 600
  region: us-east-1
  user_pool_id: <- connection-target("user-pool") entity-state get-member("user_pool_id")
  provider_name: TestOIDC
  provider_type: OIDC
  provider_details:
    client_id: test-oidc-client-id
    client_secret: test-oidc-client-secret
    attributes_request_method: GET
    oidc_issuer: https://example.com
    authorize_scopes: openid email profile
  attribute_mapping:
    email: email
    given_name: given_name
    family_name: family_name
    name: name
  idp_identifiers:
    - example.com

# Test User Pool Domain (Cognito prefix domain)
test-user-pool-domain:
  defines: aws-cognito/user-pool-domain
  connections:
    user-pool:
      runnable: cognito-test/test-user-pool
      service: default
  depends:
    wait-for:
      runnables:
        - cognito-test/test-user-pool
      timeout: 600
  region: us-east-1
  user_pool_id: <- connection-target("user-pool") entity-state get-member("user_pool_id")
  domain: monk-cognito-domain-test-2025
