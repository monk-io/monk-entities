namespace: my-app

# Basic MySQL RDS instance
my-mysql-db:
  defines: aws-rds/rds-instance
  region: us-east-1
  db_instance_identifier: my-mysql-instance
  db_instance_class: db.t3.micro
  engine: mysql
  engine_version: "8.0"
  master_username: admin
  password_secret_ref: my-mysql-db-password
  allocated_storage: 20
  port: 3306
  storage_type: gp2
  auto_minor_version_upgrade: true
  backup_retention_period: 7
  publicly_accessible: false
  multi_az: false
  deletion_protection: false
  skip_final_snapshot: true
  tags:
    Environment: development
    Application: my-app
    ManagedBy: monk

# PostgreSQL RDS instance with more configuration
my-postgres-db:
  defines: aws-rds/rds-instance
  region: us-west-2
  db_instance_identifier: my-postgres-instance
  db_instance_class: db.t3.small
  engine: postgres
  engine_version: "15.4"
  master_username: postgres
  password_secret_ref: my-postgres-db-password
  allocated_storage: 50
  port: 5432
  storage_type: gp3
  auto_minor_version_upgrade: true
  backup_retention_period: 14
  preferred_backup_window: "07:00-08:00"
  preferred_maintenance_window: "sun:08:00-sun:09:00"
  publicly_accessible: false
  multi_az: true
  storage_encrypted: true
  deletion_protection: true
  skip_final_snapshot: false
  final_db_snapshot_identifier: my-postgres-final-snapshot
  tags:
    Environment: production
    Application: my-app
    ManagedBy: monk
    BackupRequired: "true"

# RDS instance with auto-created security group
my-secure-mysql:
  defines: aws-rds/rds-instance
  region: us-east-1
  db_instance_identifier: my-secure-mysql
  db_instance_class: db.t3.micro
  engine: mysql
  master_username: admin
  allocated_storage: 20
  # Auto-create security group since vpc_security_group_ids is not specified
  auto_create_security_group: true
  security_group_name: my-secure-mysql-sg
  security_group_description: "Auto-created security group for MySQL RDS instance"
  # vpc_id: vpc-0123456789abcdef0  # Optional: specify VPC (uses default VPC if omitted)
  # Security access control - at least one must be specified
  allowed_cidr_blocks:             # Allow access from specific IP ranges
    - "10.0.0.0/16"               # VPC CIDR
    - "192.168.1.0/24"            # Office network
  tags:
    Environment: development
    AutoCreatedSG: "true"

# RDS instance with auto-created security group in default VPC
my-default-vpc-mysql:
  defines: aws-rds/rds-instance
  region: us-east-1
  db_instance_identifier: my-default-vpc-mysql
  db_instance_class: db.t3.micro
  engine: mysql
  master_username: admin
  allocated_storage: 20
  # Auto-create security group in default VPC (no vpc_id specified)
  auto_create_security_group: true
  security_group_name: my-default-mysql-sg
  security_group_description: "Auto-created security group in default VPC"
  # Allow access from specific security groups by name
  allowed_security_group_names:
    - "app-servers-sg"            # Application servers security group
    - "web-servers-sg"            # Web servers security group
  tags:
    Environment: development
    DefaultVPC: "true"

# RDS instance with both CIDR blocks and security group access
my-hybrid-access-mysql:
  defines: aws-rds/rds-instance
  region: us-east-1
  db_instance_identifier: my-hybrid-access-mysql
  db_instance_class: db.t3.micro
  engine: mysql
  master_username: admin
  allocated_storage: 20
  auto_create_security_group: true
  security_group_name: my-hybrid-mysql-sg
  security_group_description: "Security group with mixed access types"
  # Allow access from both CIDR blocks and security groups
  allowed_cidr_blocks:
    - "10.0.0.0/16"             # VPC CIDR
  allowed_security_group_names:
    - "app-servers-sg"          # Application servers
  tags:
    Environment: production
    AccessType: "hybrid"

# RDS instance with explicit security groups (traditional approach)
my-custom-mysql:
  defines: aws-rds/rds-instance
  region: us-east-1
  db_instance_identifier: my-custom-mysql
  db_instance_class: db.t3.micro
  engine: mysql
  master_username: admin
  allocated_storage: 20
  vpc_security_group_ids:        # Explicitly specify security groups
    - sg-0123456789abcdef0
    - sg-0987654321fedcba0
  tags:
    Environment: production
    ExplicitSGs: "true"

# Example demonstrating security group rules updates
# To update access rules, modify the allowed_* lists and run: monk update my-app/updatable-mysql
updatable-mysql:
  defines: aws-rds/rds-instance
  region: us-east-1
  db_instance_identifier: updatable-mysql-instance
  db_instance_class: db.t3.micro
  engine: mysql
  engine_version: "8.0"
  master_username: admin
  password_secret_ref: updatable-mysql-password
  allocated_storage: 20
  
  # Auto-create security group that can be updated
  auto_create_security_group: true
  security_group_name: updatable-mysql-sg
  security_group_description: "MySQL Database with Updatable Access Rules"
  # Initial access: only from development networks
  allowed_cidr_blocks:
    - "10.0.0.0/16"    # Initial development network
  # To add more access, modify these lists and run 'monk update':
  # allowed_cidr_blocks:
  #   - "10.0.0.0/16"    # Keep existing
  #   - "172.16.0.0/12"  # Add staging network  
  # allowed_security_group_names:
  #   - "staging-servers-sg"  # Add staging servers access 