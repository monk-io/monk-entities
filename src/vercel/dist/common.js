// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/vercel/common.ts
var common_exports = {};
__export(common_exports, {
  FRAMEWORK_PRESETS: () => FRAMEWORK_PRESETS,
  GIT_PROVIDERS: () => GIT_PROVIDERS,
  VERCEL_API_ENDPOINTS: () => VERCEL_API_ENDPOINTS,
  VERCEL_DEPLOYMENT_STATUSES: () => VERCEL_DEPLOYMENT_STATUSES,
  VERCEL_PROJECT_STATUSES: () => VERCEL_PROJECT_STATUSES,
  buildTeamBody: () => buildTeamBody,
  buildTeamQuery: () => buildTeamQuery,
  formatDeploymentUrl: () => formatDeploymentUrl,
  getReadableStatus: () => getReadableStatus,
  getStatusEmoji: () => getStatusEmoji,
  validateDomainName: () => validateDomainName,
  validateProjectName: () => validateProjectName
});
module.exports = __toCommonJS(common_exports);
var VERCEL_API_ENDPOINTS = {
  PROJECTS: "/v9/projects",
  PROJECTS_V11: "/v11/projects",
  DEPLOYMENTS: "/v6/deployments",
  DEPLOYMENTS_V13: "/v13/deployments",
  DOMAINS: "/v9/projects",
  TEAMS: "/v2/teams",
  USER: "/v2/user"
};
var VERCEL_PROJECT_STATUSES = {
  READY: "ready",
  ACTIVE: "active",
  PENDING: "pending",
  ERROR: "error",
  CANCELED: "canceled"
};
var VERCEL_DEPLOYMENT_STATUSES = {
  READY: "ready",
  BUILDING: "building",
  ERROR: "error",
  CANCELED: "canceled",
  QUEUED: "queued"
};
var GIT_PROVIDERS = {
  GITHUB: "github",
  GITLAB: "gitlab",
  BITBUCKET: "bitbucket"
};
var FRAMEWORK_PRESETS = {
  NEXTJS: "nextjs",
  REACT: "react",
  VUE: "vue",
  ANGULAR: "angular",
  NUXT: "nuxt",
  SVELTE: "svelte",
  SVELTEKIT: "sveltekit",
  REMIX: "remix",
  ASTRO: "astro",
  VITE: "vite",
  STATIC: "static"
};
function validateProjectName(name) {
  const validNameRegex = /^[a-z0-9-]+$/;
  return validNameRegex.test(name) && name.length >= 1 && name.length <= 100;
}
function validateDomainName(domain) {
  const validDomainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  return validDomainRegex.test(domain);
}
function buildTeamQuery(teamId) {
  return teamId ? `?teamId=${teamId}` : "";
}
function buildTeamBody(teamId) {
  return teamId ? { teamId } : {};
}
function formatDeploymentUrl(deployment) {
  if (deployment.url) {
    return deployment.url;
  }
  if (deployment.alias && deployment.alias.length > 0) {
    return deployment.alias[0];
  }
  return `https://${deployment.id}.vercel.app`;
}
function getReadableStatus(status) {
  switch (status) {
    case VERCEL_PROJECT_STATUSES.READY:
      return "Ready";
    case VERCEL_PROJECT_STATUSES.ACTIVE:
      return "Active";
    case VERCEL_PROJECT_STATUSES.PENDING:
      return "Pending";
    case VERCEL_PROJECT_STATUSES.ERROR:
      return "Error";
    case VERCEL_PROJECT_STATUSES.CANCELED:
      return "Canceled";
    default:
      return status;
  }
}
function getStatusEmoji(status) {
  switch (status) {
    case VERCEL_DEPLOYMENT_STATUSES.READY:
      return "\u2705";
    case VERCEL_DEPLOYMENT_STATUSES.BUILDING:
      return "\u{1F528}";
    case VERCEL_DEPLOYMENT_STATUSES.ERROR:
      return "\u274C";
    case VERCEL_DEPLOYMENT_STATUSES.CANCELED:
      return "\u{1F6AB}";
    case VERCEL_DEPLOYMENT_STATUSES.QUEUED:
      return "\u23F3";
    default:
      return "\u2753";
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FRAMEWORK_PRESETS,
  GIT_PROVIDERS,
  VERCEL_API_ENDPOINTS,
  VERCEL_DEPLOYMENT_STATUSES,
  VERCEL_PROJECT_STATUSES,
  buildTeamBody,
  buildTeamQuery,
  formatDeploymentUrl,
  getReadableStatus,
  getStatusEmoji,
  validateDomainName,
  validateProjectName
});
