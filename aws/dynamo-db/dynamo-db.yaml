namespace: aws

dynamodb:
  defines: entity
  metadata:
    name: Amazon DynamoDB
    description: |
      Amazon DynamoDB is a fully managed, serverless, key-value NoSQL database designed to run high-performance applications at any scale.
    website: https://aws.amazon.com/dynamodb/
    icon: https://www.svgrepo.com/show/353450/aws-dynamodb.svg
    publisher: monk.io
    tags: AWS, Database Management, NoSQL, DynamoDB, Amazon
  schema:
    required: [ "region", "dbschema" ]
    region:
      type: string
    dbschema:
      type: string
  requires:
    - cloud/aws
  lifecycle:
    create: |
      let cli = require("cli");
      createDynamo = function(region, dbschema) {
        return aws.post("https://dynamodb." + region + ".amazonaws.com",
          { "service": "dynamodb",
            "region": region,
            "headers": {"X-Amz-Target": "DynamoDB_20120810.CreateTable",
                        "Content-Type": "application/x-amz-json-1.0"},
            "body": dbschema,
            "timeout": 10
          }
        )
      }

      function main(def, state, ctx) {
        res = createDynamo(def.region, def.dbschema)

        if (res.error) {
          console.log(JSON.stringify(res))
          throw new Error("err: " + res.error + ", body: " + res.body, "headers: ", res.headers)
        }

        return {"statusCode": res.statusCode}
      }

    purge: |
      deleteDynamo = function(region, tablename) {
        return aws.post("https://dynamodb." + region + ".amazonaws.com",
          {"service": "dynamodb",
          "region": region,
          "headers": {"X-Amz-Target": "DynamoDB_20120810.DeleteTable",
                      "Content-Type": "application/x-amz-json-1.0"},
          "body": '{"TableName": "' + tablename + '"}',
          "timeout": 10}
        )
      }

      function main(def, state, ctx) {
        data = JSON.parse(def.dbschema)
        res = deleteDynamo(def.region, data.TableName)

        if (res.error) {
          console.log(JSON.stringify(res))
          throw new Error(res.error)
        }

        return {"statusCode": res.statusCode}
      }
