namespace: lambda-dynamo-example

# DynamoDB Table for user data
users-table:
  defines: aws-dynamo-db/dynamo-db-table
  region: us-east-1
  table_name: lambda-users-table
  
  # Primary key: simple hash key on 'id'
  attribute_definitions:
    - AttributeName: id
      AttributeType: S
  
  key_schema:
    - AttributeName: id
      KeyType: HASH
  
  # Use pay-per-request billing for variable Lambda workloads
  billing_mode: PAY_PER_REQUEST
  
  # Enable point-in-time recovery for production workloads
  point_in_time_recovery_enabled: true
  
  # Add tags for management
  tags:
    Environment: example
    Application: lambda-dynamo-example
    Owner: monk-framework
    Purpose: demonstration
    Service: dynamodb

  services:
    table:
      protocol: custom

# IAM Policy for Lambda DynamoDB access
lambda-dynamodb-policy:
  defines: aws-iam/iam-policy
  region: us-east-1
  policy_name: lambda-dynamodb-access-policy
  policy_description: "IAM policy granting Lambda full access to DynamoDB table"
  policy_document:
    Version: "2012-10-17"
    Statement:
      - Sid: "DynamoDBTableAccess"
        Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:BatchGetItem
          - dynamodb:BatchWriteItem
          - dynamodb:DescribeTable
        Resource:
          - <- connection-target("table") entity-state get-member("table_arn")
          - <- connection-target("table") entity-state get-member("table_arn") "/index/*" concat
      - Sid: "CloudWatchLogsAccess"
        Effect: Allow
        Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
        Resource:
          - "*"
  tags:
    Owner: lambda-dynamo-example
    Purpose: lambda-execution
  services:
    policy:
      protocol: custom
  connections:
    table:
      runnable: lambda-dynamo-example/users-table
      service: table
  depends:
    wait-for:
      runnables:
        - lambda-dynamo-example/users-table
      timeout: 300

# IAM Role for Lambda execution
lambda-execution-role:
  defines: aws-iam/iam-role
  region: us-east-1
  role_name: lambda-dynamo-execution-role
  role_description: "Lambda execution role with DynamoDB access"
  # Trust policy allowing Lambda to assume this role
  assume_role_policy_document:
    Version: "2012-10-17"
    Statement:
      - Effect: "Allow"
        Principal:
          Service: "lambda.amazonaws.com"
        Action: "sts:AssumeRole"
  # Attach the DynamoDB access policy
  attached_policies:
    - <- connection-target("policy") entity-state get-member("policy_arn")
  tags:
    Owner: lambda-dynamo-example
    Purpose: lambda-execution
  services:
    role:
      protocol: custom
  connections:
    policy:
      runnable: lambda-dynamo-example/lambda-dynamodb-policy
      service: policy
  depends:
    wait-for:
      runnables:
        - lambda-dynamo-example/lambda-dynamodb-policy
      timeout: 60

# Lambda Function with DynamoDB integration
lambda-dynamo-function:
  defines: aws-lambda/lambda-function
  region: us-east-1
  blob_name: lambda-dynamo-db-example
  function_name: lambda-dynamo-function
  runtime: nodejs20.x
  role: <- connection-target("role") entity-state get-member("role_arn")
  handler: src/index.handler
  summary: "Lambda function demonstrating DynamoDB CRUD operations"
  timeout: 30
  memory_size: 256
  
  # Environment variables for DynamoDB integration
  environment:
    variables:
      DYNAMODB_TABLE_NAME: <- connection-target("table") entity-state get-member("table_name")
      NODE_ENV: "production"
      LOG_LEVEL: "info"
  
  tags:
    Owner: lambda-dynamo-example
    Service: lambda
    Integration: dynamodb
    
  services:
    function:
      protocol: custom
      
  connections:
    role:
      runnable: lambda-dynamo-example/lambda-execution-role
      service: role
    table:
      runnable: lambda-dynamo-example/users-table
      service: table
      
  depends:
    wait-for:
      runnables:
        - lambda-dynamo-example/lambda-execution-role
        - lambda-dynamo-example/users-table
      timeout: 300

lambda-dynamo-container-function:
  defines: aws-lambda/lambda-function
  region: us-east-1
  image_uri: 065217599764.dkr.ecr.us-east-1.amazonaws.com/monk/lambda-dynamo-db:latest
  function_name: lambda-dynamo-container-function
  package_type: Image
  role: <- connection-target("role") entity-state get-member("role_arn")
  summary: "Lambda function demonstrating DynamoDB CRUD operations"
  timeout: 30
  memory_size: 256
  
  # Environment variables for DynamoDB integration
  environment:
    variables:
      DYNAMODB_TABLE_NAME: <- connection-target("table") entity-state get-member("table_name")
      NODE_ENV: "production"
      LOG_LEVEL: "info"
  
  tags:
    Owner: lambda-dynamo-example
    Service: lambda
    Integration: dynamodb
    
  services:
    function:
      protocol: custom
      
  connections:
    role:
      runnable: lambda-dynamo-example/lambda-execution-role
      service: role
    table:
      runnable: lambda-dynamo-example/users-table
      service: table
      
  depends:
    wait-for:
      runnables:
        - lambda-dynamo-example/lambda-execution-role
        - lambda-dynamo-example/users-table
      timeout: 300

# Complete example stack
example-stack:
  defines: process-group
  runnable-list:
    - lambda-dynamo-example/users-table
    - lambda-dynamo-example/lambda-dynamodb-policy
    - lambda-dynamo-example/lambda-execution-role
    # - lambda-dynamo-example/lambda-dynamo-function
    - lambda-dynamo-example/lambda-dynamo-container-function
    - lambda-dynamo-example/api-gateway

api-gateway:
  defines: aws-api-gateway/api-gateway
  region: us-east-1
  name: lambda-dynamo-api
  protocol_type: HTTP
  routes:
    - path: /users
      method: ANY
      integration:
        type: lambda
        function: <- connection-target("lambda") entity-state get-member("function_arn")
  services:
    api:
      protocol: custom
  connections:
    lambda:
      runnable: lambda-dynamo-example/lambda-dynamo-container-function
      service: function
  depends:
    wait-for:
      runnables:
        - lambda-dynamo-example/lambda-dynamo-container-function
      timeout: 60