namespace: neon-example

project:
  defines: neon/project
  name: myproject3
  secret_ref: neon-token
  #  allowed_ips:
  #    - 1.1.1.1
  #    - 8.8.8.8
  pg_version: 17
  region_id: aws-us-east-2
  permitted-secrets:
    neon-token: true
  services:
    data:
      protocol: custom

branch:
  defines: neon/branch
  name: test
  project_id: <- connection-target("project") entity-state get-member("id")
  secret_ref: neon-token
  endpoints:
    - read_write
  permitted-secrets:
    neon-token: true
  services:
    data:
      protocol: custom
  connections:
    project:
      runnable: neon-example/project
      service: data
  depends:
    wait-for:
      runnables:
        - neon-example/project
      timeout: 60

role:
  defines: neon/role
  name: test
  project_id: <- connection-target("project") entity-state get-member("id")
  branch_id: <- connection-target("branch") entity-state get-member("id")
  secret_ref: neon-token
  password_secret_ref: database-password
  permitted-secrets:
    neon-token: true
    database-password: true
  services:
    data:
      protocol: custom
  connections:
    project:
      runnable: neon-example/project
      service: data
    branch:
      runnable: neon-example/branch
      service: data
  depends:
    wait-for:
      runnables:
        - neon-example/project
        - neon-example/branch
      timeout: 60

database:
  defines: neon/database
  name: test
  owner_name: neondb_owner
  project_id: <- connection-target("project") entity-state get-member("id")
  branch_id: <- connection-target("branch") entity-state get-member("id")
  role_name: <- connection-target("role") entity get-member("name")
  secret_ref: neon-token
  permitted-secrets:
    neon-token: true
  services:
    data:
      protocol: custom
  connections:
    project:
      runnable: neon-example/project
      service: data
    branch:
      runnable: neon-example/branch
      service: data
    role:
      runnable: neon-example/role
      service: data
  depends:
    wait-for:
      runnables:
        - neon-example/project
        - neon-example/branch
        - neon-example/role
      timeout: 60

backend:
  defines: runnable
  services:
    api:
      container: backend
      port: 8080
      protocol: tcp
      host-port: 8080
  containers:
    backend:
      image: monkimages.azurecr.io/example-backend:latest
      restart: always
      bash: /app/main -docker -db-conn $DB_CONN
  connections:
    database:
      runnable: neon-example/database
      service: data
  permitted-secrets:
    database-password: true
  variables:
    database-host:
      env: DATABASE_HOST
      type: string
      value: <- connection-target("database") entity-state get-member("endpoint")
    database-user:
      env: DATABASE_USER
      type: string
      value: <- connection-target("database") entity get-member("role_name")
    database-password:
      env: DATABASE_PASSWORD
      type: string
      value: <- secret("database-password")
    database-name:
      env: DATABASE_NAME
      type: string
      value: <- connection-target("database") entity get-member("name")
    db-conn:
      env: DB_CONN
      type: string
      value: <- `postgresql://${database-user}:${database-password}@${database-host}/${database-name}?sslmode=require`
  depends:
    wait-for:
      runnables:
        - neon-example/database
      timeout: 60

stack:
  defines: process-group
  runnable-list:
    - neon-example/project
    - neon-example/branch
    - neon-example/role
    - neon-example/database
    - neon-example/backend