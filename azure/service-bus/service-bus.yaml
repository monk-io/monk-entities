namespace: service-bus

bus-namespace:
  defines: entity
  metadata:
    name: Azure Service Bus Namespace
    description: |
      A Service Bus namespace is your own capacity slice of a large cluster made up of dozens of all-active virtual machines. It may optionally span three Azure availability zones. So, you get all the availability and robustness benefits of running the message broker at enormous scale.
    website: https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-overview
    icon: https://symbols.getvecta.com/stencil_27/76_service-bus.97bf6436f8.svg
    publisher: monk.io
    tags: Azure, Service Bus, Namespace
  schema:
    required: [ "subscriptionId", "resourceGroupName" , "namespaceName", "namespaceObject" ]
    subscriptionId:
      type: string
    resourceGroupName:
      type: string
    namespaceName:
      type: string    
    namespaceObject:
      type: string                                  
  requires:
    - cloud/azure
  checks:
    readiness:
      initialDelay: 30
      attempts: 5
      period: 15
      code: |
        var readinessFunc = function(subscriptionId, resourceGroupName, namespaceName) {
          return azure.get("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}});
        }
                
        function main(definition, state, context) {
          var res = readinessFunc(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName );
          if (res.error) {
            throw new Error(res.error + ", body: " + res.body);
          }
          if (provisioningState != "Succeeded" ) {
            throw new Error("Service Bus namespace is not active yet. Provisioning state is " + provisioningState);
          }          
          provisioningState = JSON.parse(res.body).properties.provisioningState;
          console.log(JSON.stringify(res));          
          state["provisioningState"] = provisioningState; 
          return state;
        }    
  lifecycle:
    create: |
      let cli = require("cli");
      var createNamespace = function(subscriptionId, resourceGroupName, namespaceName, namespaceObject) {
         const requestBody = namespaceObject;
         cli.output("requestbody", JSON.stringify(requestBody));         
         return azure.put("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}, "body": requestBody});
      } 
      function main(definition, state, context) {
           let res = createNamespace(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.namespaceObject );
           console.log(JSON.stringify(res));
           if (res.error) {
             throw new Error(res.error + ", body: " + res.body);
           }
           return {"statusCode": res.statusCode, "body": JSON.stringify(res.body)};
         }
    purge: |
      var deleteNamespace = function(subscriptionId, resourceGroupName, namespaceName) {
        return azure.delete("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}});
      }
      function main(definition, state, context) {
           let res = deleteNamespace(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName);
           console.log(JSON.stringify(res));
           if (res.error) {
             throw new Error(res.error + ", body: " + res.body);
           }
           return {"statusCode": res.statusCode};
         } 

bus-queue:
  defines: entity
  schema:
    required: [ "subscriptionId", "resourceGroupName" , "namespaceName", "queueName", "queueObject" ]
    subscriptionId:
      type: string
    resourceGroupName:
      type: string
    namespaceName:
      type: string    
    queueName:
       type: string          
    queueObject:
       type: string                                  
  requires:
    - cloud/azure
  checks:
    readiness:
      initialDelay: 5
      attempts: 5
      period: 15
      code: |
        var readinessFunc = function(subscriptionId, resourceGroupName, namespaceName, queueName) {
          return azure.get("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/queues/"+queueName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}});
        }
                
        function main(definition, state, context) {
          var res = readinessFunc(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.queueName);
          if (res.error) {
            throw new Error(res.error + ", body: " + res.body);
          }
          if (status != "Active" ) {
            throw new Error("Service Bus queue is not active yet. status state is " + status);
          }           
          status = JSON.parse(res.body).properties.status;
          console.log(JSON.stringify(res));                  
          state["status"] = status; 
          return state;
        }     
  lifecycle:
    create: |
      var createQueue = function(subscriptionId, resourceGroupName, namespaceName, queueName, queueObject) {
         const requestBody = queueObject;
        return azure.put("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/queues/"+queueName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}, "body": requestBody});
      }
      function main(definition, state, context) {
           let res = createQueue(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.queueName,  definition.queueObject );
           console.log(JSON.stringify(res));
           if (res.error) {
             throw new Error(res.error + ", body: " + res.body);
           }
           return {"statusCode": res.statusCode};
         } 
    purge: |
      var deleteQueue = function(subscriptionId, resourceGroupName, namespaceName, queueName) {
        return azure.delete("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/queues/"+queueName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}});
      }
      function main(definition, state, context) {
           let res = deleteQueue(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.queueName);
           console.log(JSON.stringify(res));
           if (res.error) {
             throw new Error(res.error + ", body: " + res.body);
           }
           return {"statusCode": res.statusCode};
         }

bus-topic:
  defines: entity
  schema:
    required: [ "subscriptionId", "resourceGroupName" , "namespaceName", "topicName", "topicObject" ]
    subscriptionId:
      type: string
    resourceGroupName:
      type: string
    namespaceName:
      type: string    
    topicName:
       type: string          
    topicObject:
       type: string                                  
  requires:
    - cloud/azure
  checks:
    readiness:
      initialDelay: 5
      attempts: 5
      period: 15
      code: |
        var readinessFunc = function(subscriptionId, resourceGroupName, namespaceName, topicName) {
          return azure.get("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/topics/"+topicName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}});
        }
                
        function main(definition, state, context) {
          var res = readinessFunc(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.topicName);
          if (res.error) {
            throw new Error(res.error + ", body: " + res.body);
          }
          if (status != "Active" ) {
            throw new Error("Service Bus queue is not active yet. status state is " + status);
          }           
          status = JSON.parse(res.body).properties.status;
          console.log(JSON.stringify(res));                  
          state["status"] = status; 
          return state;
        }     
  lifecycle:
    create: |
      let cli = require("cli");
      var createTopic = function(subscriptionId, resourceGroupName, namespaceName, topicName, topicObject) {
        const requestBody = topicObject;
        cli.output("requestbody", JSON.stringify(requestBody));
        return azure.put("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/topics/"+topicName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}, "body": requestBody});
      }
      function main(definition, state, context) {
           let res = createTopic(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.topicName, definition.topicObject);
           console.log(JSON.stringify(res));
           if (res.error) {
             throw new Error(res.error + ", body: " + res.body);
           }
           return {"statusCode": res.statusCode};
         } 
    purge: |
      var createTopic = function(subscriptionId, resourceGroupName, namespaceName, topicName) {
        return azure.delete("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/topics/"+topicName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"} });
      }
      function main(definition, state, context) {
           let res = createTopic(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.topicName );
           console.log(JSON.stringify(res));
           if (res.error) {
             throw new Error(res.error + ", body: " + res.body);
           }
           return {"statusCode": res.statusCode};
         }     


bus-namespace-auth-role:
  defines: entity
  schema:
    required: [ "subscriptionId", "resourceGroupName" , "namespaceName", "authorizationRuleName", "authorizationRuleObject", "primaryConnectionString", "secondaryConnectionString" ]
    subscriptionId:
      type: string
    resourceGroupName:
      type: string
    namespaceName:
      type: string    
    authorizationRuleName:
       type: string          
    authorizationRuleObject:
       type: string  
    primaryConnectionString:
       type: string          
    secondaryConnectionString:
       type: string                                       
  requires:
    - cloud/azure
    - secret
  checks:
    readiness:
      initialDelay: 10
      attempts: 5
      period: 5
      code: |
        let secret = require("secret");
        var getAccessKey = function(subscriptionId, resourceGroupName, namespaceName, authorizationRuleName)  {
           return azure.post("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/AuthorizationRules/"+authorizationRuleName+"/listKeys"+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}});
        } 
        function main(definition, state, context) {
             let res = getAccessKey(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.authorizationRuleName);
             if (res.error) {
               throw new Error(res.error + ", body: " + res.body);
             }
             console.log(JSON.stringify(res));
             parsedBody = JSON.parse(res.body);
             secret.set(definition.primaryConnectionString, parsedBody.primaryConnectionString);
             secret.set(definition.secondaryConnectionString, parsedBody.secondaryConnectionString);
             return state;
           }
  lifecycle:
    create: |
      var createNamespaceAuthRole = function(subscriptionId, resourceGroupName, namespaceName, authorizationRuleName, authorizationRuleObject) {
         const requestBody = authorizationRuleObject;
         return azure.put("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/AuthorizationRules/"+authorizationRuleName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}, "body": requestBody});
      } 
      function main(definition, state, context) {
           let res = createNamespaceAuthRole(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.authorizationRuleName, definition.authorizationRuleObject );
           console.log(JSON.stringify(res));
           if (res.error) {
             throw new Error(res.error + ", body: " + res.body);
           }
           return {"statusCode": res.statusCode, "body": JSON.stringify(res.body)};
         }
    purge: |
      var deleteNamespaceAuthRole = function(subscriptionId, resourceGroupName, namespaceName, authorizationRuleName) {
         return azure.delete("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/AuthorizationRules/"+authorizationRuleName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}});
      } 
      function main(definition, state, context) {
           let res = deleteNamespaceAuthRole(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.authorizationRuleName);
           console.log(JSON.stringify(res));
           if (res.error) {
             throw new Error(res.error + ", body: " + res.body);
           }
           parsedBody = JSON.parse(res.body);
           secret.remove(definition.primaryConnectionString, parsedBody.primaryConnectionString);
           secret.remove(definition.secondaryConnectionString, parsedBody.secondaryConnectionString);           
           return {"statusCode": res.statusCode};
         }

bus-queue-auth-role:
  defines: entity
  schema:
    required: [ "subscriptionId", "resourceGroupName" , "namespaceName", "queueName", "authorizationRuleName", "authorizationRuleObject", "primaryConnectionString", "secondaryConnectionString"]
    subscriptionId:
      type: string
    resourceGroupName:
      type: string
    namespaceName:
      type: string 
    queueName:
      type: string           
    authorizationRuleName:
       type: string          
    authorizationRuleObject:
       type: string
    primaryConnectionString:
       type: string          
    secondaryConnectionString:
       type: string
  requires:
    - cloud/azure
    - secret
  checks:
    readiness:
      initialDelay: 10
      attempts: 5
      period: 5
      code: |
        let secret = require("secret");
        var getAccessKey = function(subscriptionId, resourceGroupName, namespaceName, queueName, authorizationRuleName)  {
           return azure.post("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/queues/"+queueName+"/AuthorizationRules/"+authorizationRuleName+"/ListKeys"+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}});
        } 
        function main(definition, state, context) {
             let res = getAccessKey(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.queueName, definition.authorizationRuleName);
             console.log(JSON.stringify(res));
             if (res.error) {
               throw new Error(res.error + ", body: " + res.body);
             }
             parsedBody = JSON.parse(res.body);
             secret.set(definition.primaryConnectionString, parsedBody.primaryConnectionString);
             secret.set(definition.secondaryConnectionString, parsedBody.secondaryConnectionString);        
             return state;
           }    
  lifecycle:
    create: |
      var createQueueAuthRole = function(subscriptionId, resourceGroupName, namespaceName, queueName, authorizationRuleName, authorizationRuleObject) {
         const requestBody = authorizationRuleObject;
         return azure.put("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/queues/"+queueName+"/AuthorizationRules/"+authorizationRuleName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}, "body": requestBody});
      } 
      function main(definition, state, context) {
           let res = createQueueAuthRole(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.queueName, definition.authorizationRuleName, definition.authorizationRuleObject );
           console.log(JSON.stringify(res));
           if (res.error) {
             throw new Error(res.error + ", body: " + res.body);
           }
           return {"statusCode": res.statusCode, "body": JSON.stringify(res.body)};
         }
    purge: |
      var deleteQueueAuthRole = function(subscriptionId, resourceGroupName, namespaceName, queueName, authorizationRuleName) {
         return azure.delete("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/queues/"+queueName+"/AuthorizationRules/"+authorizationRuleName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}});
      } 
      function main(definition, state, context) {
           let res = deleteQueueAuthRole(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.queueName,  definition.authorizationRuleName);
           console.log(JSON.stringify(res));
           if (res.error) {
             throw new Error(res.error + ", body: " + res.body);
           }
           parsedBody = JSON.parse(res.body);
           secret.remove(definition.primaryConnectionString, parsedBody.primaryConnectionString);
           secret.remove(definition.secondaryConnectionString, parsedBody.secondaryConnectionString);           
           return {"statusCode": res.statusCode, "body": JSON.stringify(res.body)};
         }

bus-topic-auth-role:
  defines: entity
  schema:
    required: [ "subscriptionId", "resourceGroupName" , "namespaceName", "topicName", "authorizationRuleName", "authorizationRuleObject", "primaryConnectionString", "secondaryConnectionString"]
    subscriptionId:
      type: string
    resourceGroupName:
      type: string
    namespaceName:
      type: string 
    topicName:
      type: string           
    authorizationRuleName:
       type: string          
    authorizationRuleObject:
       type: string 
    primaryConnectionString:
       type: string          
    secondaryConnectionString:
       type: string                                        
  requires:
    - cloud/azure
    - secret
  checks:
    readiness:
      initialDelay: 10
      attempts: 5
      period: 5
      code: |
        let secret = require("secret");
        var getAccessKey = function(subscriptionId, resourceGroupName, namespaceName, topicName, authorizationRuleName)  {
           return azure.post("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/topics/"+topicName+"/AuthorizationRules/"+authorizationRuleName+"/ListKeys"+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}});
        } 
        function main(definition, state, context) {
             let res = getAccessKey(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.topicName, definition.authorizationRuleName);
             console.log(JSON.stringify(res));
             if (res.error) {
               throw new Error(res.error + ", body: " + res.body);
             }
             parsedBody = JSON.parse(res.body);
             secret.set(definition.primaryConnectionString, parsedBody.primaryConnectionString);
             secret.set(definition.secondaryConnectionString, parsedBody.secondaryConnectionString);           
             return state;
           }    
  lifecycle:
    create: |
      var createQueueAuthRole = function(subscriptionId, resourceGroupName, namespaceName, topicName, authorizationRuleName, authorizationRuleObject) {
         const requestBody = authorizationRuleObject;
         return azure.put("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/topics/"+topicName+"/AuthorizationRules/"+authorizationRuleName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}, "body": requestBody});
      } 
      function main(definition, state, context) {
           let res = createQueueAuthRole(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.topicName, definition.authorizationRuleName, definition.authorizationRuleObject );
           console.log(JSON.stringify(res));
           if (res.error) {
             throw new Error(res.error + ", body: " + res.body);
           }
           return {"statusCode": res.statusCode, "body": JSON.stringify(res.body)};
         }
    purge: |
      var deleteQueueAuthRole = function(subscriptionId, resourceGroupName, namespaceName, topicName, authorizationRuleName) {
         return azure.delete("https://management.azure.com/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroupName+"/providers/Microsoft.ServiceBus/namespaces/"+namespaceName+"/topics/"+topicName+"/AuthorizationRules/"+authorizationRuleName+"?api-version=2021-11-01", { "headers": {"Content-Type": "application/json"}});
      } 
      function main(definition, state, context) {
           let res = deleteQueueAuthRole(definition.subscriptionId, definition.resourceGroupName, definition.namespaceName, definition.topicName,  definition.authorizationRuleName);
           console.log(JSON.stringify(res));
           if (res.error) {
             throw new Error(res.error + ", body: " + res.body);
           }
           parsedBody = JSON.parse(res.body);
           secret.remove(definition.primaryConnectionString, parsedBody.primaryConnectionString);
           secret.remove(definition.secondaryConnectionString, parsedBody.secondaryConnectionString);            
           return {"statusCode": res.statusCode, "body": JSON.stringify(res.body)};
         }         
