// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/digitalocean-container-registry/common.ts
var common_exports = {};
__export(common_exports, {
  validateGarbageCollectionType: () => validateGarbageCollectionType,
  validateRegistryRegion: () => validateRegistryRegion,
  validateRepositoryVisibility: () => validateRepositoryVisibility,
  validateSubscriptionTier: () => validateSubscriptionTier
});
module.exports = __toCommonJS(common_exports);
function validateRegistryRegion(region) {
  const validRegions = [
    "ams3",
    "blr1",
    "fra1",
    "lon1",
    "nyc1",
    "nyc3",
    "sfo3",
    "sgp1",
    "tor1",
    "syd1"
  ];
  if (!validRegions.includes(region)) {
    throw new Error(`Invalid registry region: ${region}. Valid regions: ${validRegions.join(", ")}`);
  }
  return region;
}
function validateSubscriptionTier(tier) {
  const validTiers = ["basic", "professional"];
  if (!validTiers.includes(tier)) {
    throw new Error(`Invalid subscription tier: ${tier}. Valid tiers: ${validTiers.join(", ")}. Note: 'starter' tier is only available through DigitalOcean web interface, not API.`);
  }
  return tier;
}
function validateRepositoryVisibility(visibility) {
  const validVisibilities = ["private", "public"];
  if (!validVisibilities.includes(visibility)) {
    throw new Error(`Invalid repository visibility: ${visibility}. Valid options: ${validVisibilities.join(", ")}`);
  }
  return visibility;
}
function validateGarbageCollectionType(type) {
  const validTypes = [
    "untagged_manifests_only",
    "unreferenced_blobs_only",
    "unreferenced_blobs_and_manifests"
  ];
  if (!validTypes.includes(type)) {
    throw new Error(`Invalid garbage collection type: ${type}. Valid types: ${validTypes.join(", ")}`);
  }
  return type;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  validateGarbageCollectionType,
  validateRegistryRegion,
  validateRepositoryVisibility,
  validateSubscriptionTier
});
