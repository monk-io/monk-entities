
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/aws-mq/broker.ts
const base = require("aws-mq/base");
const AWSMQEntity = base.AWSMQEntity;
const MonkecBase = require("monkec/base");
const cli = require("cli");
const common = require("aws-mq/common");
const validateBrokerName = common.validateBrokerName;
const validateEngineType = common.validateEngineType;
const validateInstanceType = common.validateInstanceType;
const validateMaintenanceWindow = common.validateMaintenanceWindow;
const buildCreateBrokerParams = common.buildCreateBrokerParams;
const buildUpdateBrokerParams = common.buildUpdateBrokerParams;
const formatBrokerState = common.formatBrokerState;
var action2 = MonkecBase.action;
var _rebootBrokerAction_dec, _getConnectionInfo_dec, _getBrokerInfo_dec, _a, _init;
var _MQBroker = class _MQBroker extends (_a = AWSMQEntity, _getBrokerInfo_dec = [action2("get-broker-info")], _getConnectionInfo_dec = [action2("get-connection-info")], _rebootBrokerAction_dec = [action2("reboot-broker")], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  extractArrayFromIndexedFields(obj, fieldName) {
    if (obj[fieldName] && Array.isArray(obj[fieldName])) {
      return obj[fieldName];
    }
    const result = [];
    let index = 0;
    while (obj[`${fieldName}!${index}`] !== void 0) {
      let item = obj[`${fieldName}!${index}`];
      item = this.processNestedIndexedFields(item);
      result.push(item);
      index++;
    }
    return result.filter((item) => item !== null && item !== void 0);
  }
  processNestedIndexedFields(obj) {
    if (!obj || typeof obj !== "object") {
      return obj;
    }
    const processedObj = { ...obj };
    const indexedFields = /* @__PURE__ */ new Set();
    for (const key in processedObj) {
      const match = key.match(/^(.+)!(\d+)$/);
      if (match) {
        const [, fieldName] = match;
        indexedFields.add(fieldName);
      }
    }
    for (const fieldName of indexedFields) {
      const extractedArray = this.extractArrayFromIndexedFields(processedObj, fieldName);
      let index = 0;
      while (processedObj[`${fieldName}!${index}`] !== void 0) {
        delete processedObj[`${fieldName}!${index}`];
        index++;
      }
      if (extractedArray.length > 0) {
        processedObj[fieldName] = extractedArray;
      }
    }
    return processedObj;
  }
  getBrokerName() {
    return this.definition.broker_name;
  }
  create() {
    const processedDefinition = this.processNestedIndexedFields(this.definition);
    const brokerName = this.getBrokerName();
    console.log(`[MQ Create] Starting broker creation: ${brokerName}`);
    if (!validateBrokerName(brokerName)) {
      throw new Error(`Invalid broker name: ${brokerName}. Must be 1-50 alphanumeric characters or hyphens, cannot start/end with hyphen.`);
    }
    if (!validateEngineType(this.definition.engine_type)) {
      throw new Error(`Invalid engine type: ${this.definition.engine_type}. Must be ACTIVEMQ or RABBITMQ.`);
    }
    if (!validateInstanceType(this.definition.engine_type, this.definition.host_instance_type)) {
      throw new Error(`Invalid instance type: ${this.definition.host_instance_type} for engine ${this.definition.engine_type}.`);
    }
    if (this.definition.maintenance_window_start_time && !validateMaintenanceWindow(this.definition.maintenance_window_start_time)) {
      throw new Error(`Invalid maintenance window format: ${this.definition.maintenance_window_start_time}. Use format: ddd:hh24:mi`);
    }
    try {
      const params = buildCreateBrokerParams(processedDefinition);
      const response = this.createBroker(params);
      const brokerId = response.brokerId || response.BrokerId;
      const brokerArn = response.brokerArn || response.BrokerArn;
      if (brokerId) {
        this.state.existing = false;
        this.state.broker_id = brokerId;
        this.state.broker_arn = brokerArn;
      } else {
        throw new Error("AWS API returned success but no BrokerId");
      }
    } catch (error) {
      if (error instanceof Error && (error.message.includes("ConflictException") || error.message.includes("409 Conflict") || error.message.includes("already exists"))) {
        const existingBroker = this.findBrokerByName(brokerName);
        if (existingBroker) {
          const brokerState = formatBrokerState(existingBroker, true);
          Object.assign(this.state, brokerState);
          cli.output(`\u2705 Found and managing existing broker ${brokerName} (ID: ${existingBroker.brokerId || existingBroker.BrokerId})`);
        } else {
          this.state.existing = true;
          cli.output(`\u26A0\uFE0F Broker ${brokerName} already exists but cannot be managed without additional permissions`);
          cli.output(`Entity will track existence to prevent accidental deletion`);
        }
        return;
      }
      throw new Error(`Failed to create MQ broker ${brokerName}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  start() {
    this.updateStateFromAWS();
  }
  stop() {
    this.updateStateFromAWS();
  }
  update() {
    const processedDefinition = this.processNestedIndexedFields(this.definition);
    if (!this.state.broker_id) {
      throw new Error(`Cannot update MQ broker: broker not found in state`);
    }
    try {
      const updateParams = buildUpdateBrokerParams(processedDefinition);
      if (Object.keys(updateParams).length > 0) {
        const response = this.updateBroker(this.state.broker_id, updateParams);
        if (response) {
          const updatedState = formatBrokerState(response, this.state.existing);
          Object.assign(this.state, updatedState);
        }
      } else {
        this.updateStateFromAWS();
      }
    } catch (error) {
      throw new Error(`Failed to update MQ broker ${this.state.broker_id}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  delete() {
    if (this.state.broker_id && !this.state.existing) {
      try {
        this.deleteBroker(this.state.broker_id);
        cli.output(`Waiting for MQ broker ${this.state.broker_id} deletion to complete...`);
        const deletionComplete = this.waitForBrokerDeletion(this.state.broker_id, 40);
        if (!deletionComplete) {
          cli.output(`Warning: MQ broker ${this.state.broker_id} deletion did not complete within timeout.`);
        }
        this.state.existing = false;
        this.state.broker_state = void 0;
        this.state.broker_id = void 0;
      } catch (error) {
        throw new Error(`Failed to delete MQ broker ${this.state.broker_id}: ${error instanceof Error ? error.message : "Unknown error"}`);
      }
    } else if (this.state.existing) {
      this.state.broker_id = void 0;
      this.state.broker_state = void 0;
    }
  }
  checkReadiness() {
    try {
      if (!this.state.broker_id) {
        return false;
      }
      const response = this.checkBrokerExists(this.state.broker_id);
      if (!response) {
        return false;
      }
      const state = response.brokerState || response.BrokerState;
      const brokerState = formatBrokerState(response, this.state.existing);
      Object.assign(this.state, brokerState);
      if (state === "RUNNING") {
        return true;
      }
      if (state === "CREATION_FAILED") {
        throw new Error(`MQ broker ${this.state.broker_id} creation failed`);
      }
      return false;
    } catch (_error) {
      return false;
    }
  }
  getBrokerInfo(_args) {
    try {
      if (!this.state.broker_id) {
        cli.output(`MQ broker not found in entity state`);
        throw new Error(`MQ broker not found`);
      }
      const response = this.checkBrokerExists(this.state.broker_id);
      if (!response) {
        cli.output(`MQ broker ${this.state.broker_id} not found in AWS`);
        throw new Error(`MQ broker ${this.state.broker_id} not found`);
      }
      const brokerState = formatBrokerState(response, this.state.existing);
      Object.assign(this.state, brokerState);
      cli.output("=== MQ Broker Information ===");
      cli.output(`Broker ID: ${response.brokerId || response.BrokerId || "N/A"}`);
      cli.output(`Broker Name: ${response.brokerName || response.BrokerName || "N/A"}`);
      cli.output(`State: ${response.brokerState || response.BrokerState || "unknown"}`);
      cli.output(`Engine: ${response.engineType || response.EngineType || "unknown"} ${response.engineVersion || response.EngineVersion || ""}`);
      cli.output(`Instance Type: ${response.hostInstanceType || response.HostInstanceType || "N/A"}`);
      cli.output(`Deployment Mode: ${response.deploymentMode || response.DeploymentMode || "N/A"}`);
      cli.output(`Publicly Accessible: ${response.publiclyAccessible !== void 0 ? response.publiclyAccessible ? "Yes" : "No" : response.PubliclyAccessible ? "Yes" : "No"}`);
      cli.output(`Auto Minor Version Upgrade: ${response.autoMinorVersionUpgrade !== void 0 ? response.autoMinorVersionUpgrade ? "Yes" : "No" : response.AutoMinorVersionUpgrade ? "Yes" : "No"}`);
      const subnetIds = response.subnetIds || response.SubnetIds;
      if (subnetIds && subnetIds.length > 0) {
        cli.output(`Subnets: ${subnetIds.join(", ")}`);
      }
      const securityGroups = response.securityGroups || response.SecurityGroups;
      if (securityGroups && securityGroups.length > 0) {
        cli.output(`Security Groups: ${securityGroups.join(", ")}`);
      }
      const brokerInstances = response.brokerInstances || response.BrokerInstances;
      if (brokerInstances && Array.isArray(brokerInstances) && brokerInstances.length > 0) {
        cli.output("Broker Instances:");
        brokerInstances.forEach((instance, index) => {
          cli.output(`  Instance ${index + 1}:`);
          const consoleURL = instance.consoleURL || instance.ConsoleURL;
          if (consoleURL) {
            cli.output(`    Console URL: ${consoleURL}`);
          }
          const endpoints = instance.endpoints || instance.Endpoints;
          if (endpoints && endpoints.length > 0) {
            cli.output(`    Endpoints:`);
            endpoints.forEach((endpoint) => {
              cli.output(`      - ${endpoint}`);
            });
          }
          const ipAddress = instance.ipAddress || instance.IpAddress;
          if (ipAddress) {
            cli.output(`    IP Address: ${ipAddress}`);
          }
        });
      }
      const logs = response.logs || response.Logs;
      if (logs) {
        cli.output("Logging:");
        const general = logs.general !== void 0 ? logs.general : logs.General;
        const audit = logs.audit !== void 0 ? logs.audit : logs.Audit;
        cli.output(`  General: ${general ? "Enabled" : "Disabled"}`);
        cli.output(`  Audit: ${audit ? "Enabled" : "Disabled"}`);
      }
      const state = formatBrokerState(response, this.state.existing);
      Object.assign(this.state, state);
      cli.output("=== End MQ Broker Information ===");
    } catch (error) {
      const errorMsg = `Failed to get broker info: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
  getConnectionInfo(_args) {
    try {
      if (!this.state.broker_id) {
        cli.output(`MQ broker not found in entity state`);
        throw new Error(`MQ broker not found`);
      }
      const response = this.checkBrokerExists(this.state.broker_id);
      if (!response) {
        cli.output(`MQ broker ${this.state.broker_id} not found in AWS`);
        throw new Error(`MQ broker ${this.state.broker_id} not found`);
      }
      const brokerState = formatBrokerState(response, this.state.existing);
      Object.assign(this.state, brokerState);
      cli.output("=== MQ Connection Information ===");
      cli.output(`Broker Name: ${response.brokerName || response.BrokerName}`);
      cli.output(`Engine Type: ${response.engineType || response.EngineType}`);
      const brokerInstances = response.brokerInstances || response.BrokerInstances;
      if (brokerInstances && Array.isArray(brokerInstances) && brokerInstances.length > 0) {
        brokerInstances.forEach((instance, index) => {
          cli.output(`Instance ${index + 1}:`);
          const consoleURL = instance.consoleURL || instance.ConsoleURL;
          if (consoleURL) {
            cli.output(`  Web Console: ${consoleURL}`);
          }
          const endpoints = instance.endpoints || instance.Endpoints;
          if (endpoints && endpoints.length > 0) {
            cli.output(`  Connection Endpoints:`);
            endpoints.forEach((endpoint) => {
              cli.output(`    ${endpoint}`);
              const endpointMatch = /^([^:]+):\/\/([^:]+):(\d+)$/.exec(endpoint);
              if (endpointMatch) {
                const protocol = endpointMatch[1];
                const host = endpointMatch[2];
                const port = endpointMatch[3];
                const engineType = response.engineType || response.EngineType;
                if (engineType === "ACTIVEMQ") {
                  if (protocol === "ssl") {
                    cli.output(`    ActiveMQ SSL: ssl://${host}:${port}`);
                  } else if (protocol === "tcp") {
                    cli.output(`    ActiveMQ TCP: tcp://${host}:${port}`);
                  } else if (protocol === "stomp+ssl") {
                    cli.output(`    STOMP+SSL: stomp+ssl://${host}:${port}`);
                  }
                } else if (response.EngineType === "RABBITMQ") {
                  if (protocol === "amqps") {
                    cli.output(`    AMQP+SSL: amqps://${host}:${port}`);
                  } else if (protocol === "amqp") {
                    cli.output(`    AMQP: amqp://${host}:${port}`);
                  }
                }
              }
            });
          }
        });
      } else {
        cli.output(`MQ broker endpoints not available yet`);
      }
      cli.output("=== End MQ Connection Information ===");
    } catch (error) {
      const errorMsg = `Failed to get connection info: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
  rebootBrokerAction(_args) {
    try {
      if (!this.state.broker_id) {
        cli.output(`MQ broker not found in entity state`);
        throw new Error(`MQ broker not found`);
      }
      cli.output("=== Rebooting MQ Broker ===");
      cli.output(`Broker ID: ${this.state.broker_id}`);
      super.rebootBroker(this.state.broker_id);
      const currentResponse = this.checkBrokerExists(this.state.broker_id);
      if (currentResponse) {
        const brokerState = formatBrokerState(currentResponse, this.state.existing);
        Object.assign(this.state, brokerState);
      }
      cli.output("Broker reboot initiated successfully");
      cli.output("Note: Reboot may take a few minutes to complete");
      cli.output("=== Reboot Completed ===");
    } catch (error) {
      const errorMsg = `Failed to reboot broker: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
  updateStateFromAWS() {
    if (!this.state.broker_id) {
      return;
    }
    try {
      const response = this.checkBrokerExists(this.state.broker_id);
      if (response) {
        const state = formatBrokerState(response, this.state.existing);
        Object.assign(this.state, state);
      } else {
        this.state.existing = false;
      }
    } catch (_error) {
    }
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "getBrokerInfo", _getBrokerInfo_dec, _MQBroker);
__decorateElement(_init, 1, "getConnectionInfo", _getConnectionInfo_dec, _MQBroker);
__decorateElement(_init, 1, "rebootBrokerAction", _rebootBrokerAction_dec, _MQBroker);
__decoratorMetadata(_init, _MQBroker);
__name(_MQBroker, "MQBroker");
__publicField(_MQBroker, "readiness", { period: 15, initialDelay: 15, attempts: 80 });
var MQBroker = _MQBroker;



function main(def, state, ctx) {
  const entity = new MQBroker(def, state, ctx);
  return entity.main(ctx);
}
