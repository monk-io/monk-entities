// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/aws-api-gateway/base.ts
var base_exports = {};
__export(base_exports, {
  AWSAPIGatewayEntity: () => AWSAPIGatewayEntity
});
module.exports = __toCommonJS(base_exports);
var import_base = require("monkec/base");
var import_aws = __toESM(require("cloud/aws"));
var import_cli = __toESM(require("cli"));
var AWSAPIGatewayEntity = class extends import_base.MonkEntity {
  constructor() {
    super(...arguments);
    __publicField(this, "region");
  }
  before() {
    this.region = this.definition.region;
  }
  makeV2Request(method, path, body) {
    const url = `https://apigateway.${this.region}.amazonaws.com${path}`;
    const options = {
      service: "apigateway",
      region: this.region,
      headers: {},
      timeout: 3e4
    };
    if (body !== void 0) {
      options.headers["Content-Type"] = "application/json";
      options.body = JSON.stringify(body);
    }
    try {
      const printableBody = options.body ? options.body.toString() : "";
      import_cli.default.output(`[aws-api-gateway] request ${method} ${path}`);
      if (printableBody && printableBody.length > 0) {
        import_cli.default.output(`[aws-api-gateway] body: ${printableBody}`);
      }
    } catch (_e) {
    }
    let response;
    if (method === "GET") {
      response = import_aws.default.get(url, options);
    } else if (method === "POST") {
      response = import_aws.default.post(url, options);
    } else if (method === "PUT") {
      response = import_aws.default.put(url, options);
    } else if (method === "DELETE") {
      response = import_aws.default.delete(url, options);
    } else if (method === "PATCH") {
      response = import_aws.default.do(url, { ...options, method: "PATCH" });
    } else {
      throw new Error(`Unsupported HTTP method: ${method}`);
    }
    if (response.statusCode >= 400) {
      let errorMessage = `AWS API Gateway V2 API error: ${response.statusCode} ${response.status}`;
      try {
        const parsed = JSON.parse(response.body);
        if (parsed.message) errorMessage += ` - ${parsed.message}`;
        if (parsed.__type) errorMessage += ` (${parsed.__type})`;
      } catch (_e) {
        errorMessage += ` - Raw response: ${response.body}`;
      }
      throw new Error(errorMessage);
    }
    if (!response.body) {
      return response;
    }
    try {
      return JSON.parse(response.body);
    } catch (e) {
      throw new Error(`Failed to parse API Gateway response: ${e instanceof Error ? e.message : "Unknown error"}`);
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AWSAPIGatewayEntity
});
