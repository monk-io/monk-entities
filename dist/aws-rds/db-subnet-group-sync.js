
// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// input/aws-rds/dbSubnetGroup.ts
const liteBase = require("aws-rds/lite-base");
const AWSRDSLiteEntity = liteBase.AWSRDSLiteEntity;
var _DBSubnetGroup = class _DBSubnetGroup extends AWSRDSLiteEntity {
  create() {
    const params = {
      DBSubnetGroupName: this.definition.db_subnet_group_name,
      DBSubnetGroupDescription: this.definition.db_subnet_group_description || this.definition.db_subnet_group_name
    };
    this.definition.subnet_ids.forEach((id, idx) => {
      params[`SubnetIds.member.${idx + 1}`] = id;
    });
    if (this.definition.tags) {
      let i = 1;
      for (const [k, v] of Object.entries(this.definition.tags)) {
        params[`Tags.member.${i}.Key`] = k;
        params[`Tags.member.${i}.Value`] = v;
        i++;
      }
    }
    this.makeRDSRequest("CreateDBSubnetGroup", params);
    this.state.db_subnet_group_name = this.definition.db_subnet_group_name;
    this.state.existing = false;
  }
  delete() {
    if (!this.state.db_subnet_group_name) return;
    if (this.state.existing) return;
    this.makeRDSRequest("DeleteDBSubnetGroup", {
      DBSubnetGroupName: this.state.db_subnet_group_name
    });
    this.state.db_subnet_group_name = void 0;
  }
  checkReadiness() {
    if (!this.state.db_subnet_group_name) return false;
    try {
      this.makeRDSRequest("DescribeDBSubnetGroups", {
        DBSubnetGroupName: this.state.db_subnet_group_name
      });
      return true;
    } catch (_e) {
      return false;
    }
  }
};
__name(_DBSubnetGroup, "DBSubnetGroup");
var DBSubnetGroup = _DBSubnetGroup;



function main(def, state, ctx) {
  const entity = new DBSubnetGroup(def, state, ctx);
  return entity.main(ctx);
}
