// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/aws-rds/liteBase.ts
var lite_base_exports = {};
__export(lite_base_exports, {
  AWSRDSLiteEntity: () => AWSRDSLiteEntity
});
module.exports = __toCommonJS(lite_base_exports);
var import_base = require("monkec/base");
var import_aws = __toESM(require("cloud/aws"));
var AWSRDSLiteEntity = class extends import_base.MonkEntity {
  constructor() {
    super(...arguments);
    __publicField(this, "region");
  }
  before() {
    this.region = this.definition.region;
  }
  makeRDSRequest(action, params = {}) {
    const url = `https://rds.${this.region}.amazonaws.com/`;
    const formParams = {
      "Action": action,
      "Version": "2014-10-31"
    };
    for (const [key, value] of Object.entries(params)) {
      if (value === null || value === void 0) continue;
      formParams[key] = String(value);
    }
    const formBody = Object.entries(formParams).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join("&");
    const response = import_aws.default.post(url, {
      service: "rds",
      region: this.region,
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: formBody
    });
    if (response.statusCode >= 400) {
      let errorMessage = `AWS RDS API error: ${response.statusCode} ${response.status}`;
      try {
        const msg = /<Message>(.*?)<\/Message>/.exec(response.body);
        if (msg) errorMessage += ` - ${msg[1]}`;
        const code = /<Code>(.*?)<\/Code>/.exec(response.body);
        if (code) errorMessage += ` (${code[1]})`;
      } catch (_e) {
        errorMessage += ` - Raw: ${response.body}`;
      }
      throw new Error(errorMessage);
    }
    return response;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AWSRDSLiteEntity
});
