// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/aws-rds/base.ts
var base_exports = {};
__export(base_exports, {
  AWSRDSEntity: () => AWSRDSEntity
});
module.exports = __toCommonJS(base_exports);
var import_base = require("monkec/base");
var import_aws = __toESM(require("cloud/aws"));
var AWSRDSEntity = class extends import_base.MonkEntity {
  constructor() {
    super(...arguments);
    __publicField(this, "region");
  }
  before() {
    this.region = this.definition.region;
  }
  makeRDSRequest(action, params = {}) {
    const url = `https://rds.${this.region}.amazonaws.com/`;
    const formParams = {
      "Action": action,
      "Version": "2014-10-31"
    };
    this.addParamsToFormData(formParams, params);
    const formBody = Object.entries(formParams).map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join("&");
    const response = import_aws.default.post(url, {
      service: "rds",
      region: this.region,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      body: formBody
    });
    if (response.statusCode >= 400) {
      let errorMessage = `AWS RDS API error: ${response.statusCode} ${response.status}`;
      try {
        const errorMatch = /<Message>(.*?)<\/Message>/.exec(response.body);
        if (errorMatch) {
          errorMessage += ` - ${errorMatch[1]}`;
        }
        const codeMatch = /<Code>(.*?)<\/Code>/.exec(response.body);
        if (codeMatch) {
          errorMessage += ` (${codeMatch[1]})`;
        }
      } catch (parseError) {
        errorMessage += ` - Raw: ${response.body}`;
      }
      throw new Error(errorMessage);
    }
    return this.parseRDSResponse(response.body);
  }
  addParamsToFormData(formParams, params, prefix = "") {
    for (const [key, value] of Object.entries(params)) {
      const paramKey = prefix ? `${prefix}.${key}` : key;
      if (value === null || value === void 0) {
        continue;
      }
      if (Array.isArray(value)) {
        value.forEach((item, index) => {
          if (typeof item === "object") {
            this.addParamsToFormData(formParams, item, `${paramKey}.member.${index + 1}`);
          } else {
            formParams[`${paramKey}.member.${index + 1}`] = String(item);
          }
        });
      } else if (typeof value === "object") {
        this.addParamsToFormData(formParams, value, paramKey);
      } else {
        formParams[paramKey] = String(value);
      }
    }
  }
  parseRDSResponse(xmlBody) {
    const dbInstance = {};
    const identifierMatch = /<DBInstanceIdentifier>(.*?)<\/DBInstanceIdentifier>/.exec(xmlBody);
    if (identifierMatch) dbInstance.DBInstanceIdentifier = identifierMatch[1];
    const classMatch = /<DBInstanceClass>(.*?)<\/DBInstanceClass>/.exec(xmlBody);
    if (classMatch) dbInstance.DBInstanceClass = classMatch[1];
    const engineMatch = /<Engine>(.*?)<\/Engine>/.exec(xmlBody);
    if (engineMatch) dbInstance.Engine = engineMatch[1];
    const statusMatch = /<DBInstanceStatus>(.*?)<\/DBInstanceStatus>/.exec(xmlBody);
    if (statusMatch) {
      dbInstance.DBInstanceStatus = statusMatch[1];
    }
    const usernameMatch = /<MasterUsername>(.*?)<\/MasterUsername>/.exec(xmlBody);
    if (usernameMatch) dbInstance.MasterUsername = usernameMatch[1];
    const storageMatch = /<AllocatedStorage>(.*?)<\/AllocatedStorage>/.exec(xmlBody);
    if (storageMatch) dbInstance.AllocatedStorage = parseInt(storageMatch[1]);
    const engineVersionMatch = /<EngineVersion>(.*?)<\/EngineVersion>/.exec(xmlBody);
    if (engineVersionMatch) dbInstance.EngineVersion = engineVersionMatch[1];
    const createTimeMatch = /<InstanceCreateTime>(.*?)<\/InstanceCreateTime>/.exec(xmlBody);
    if (createTimeMatch) dbInstance.InstanceCreateTime = createTimeMatch[1];
    const arnMatch = /<DBInstanceArn>(.*?)<\/DBInstanceArn>/.exec(xmlBody);
    if (arnMatch) dbInstance.DBInstanceArn = arnMatch[1];
    const endpointAddressMatch = /<Address>(.*?)<\/Address>/.exec(xmlBody);
    const endpointPortMatch = /<Port>(.*?)<\/Port>/.exec(xmlBody);
    if (endpointAddressMatch || endpointPortMatch) {
      dbInstance.Endpoint = {};
      if (endpointAddressMatch) dbInstance.Endpoint.Address = endpointAddressMatch[1];
      if (endpointPortMatch) dbInstance.Endpoint.Port = parseInt(endpointPortMatch[1]);
    }
    return { DBInstance: dbInstance };
  }
  checkDBInstanceExists(dbInstanceIdentifier) {
    try {
      return this.makeRDSRequest("DescribeDBInstances", {
        DBInstanceIdentifier: dbInstanceIdentifier
      });
    } catch (error) {
      if (error instanceof Error && error.message.includes("DBInstanceNotFound")) {
        return null;
      }
      throw error;
    }
  }
  createDBInstance(params) {
    return this.makeRDSRequest("CreateDBInstance", params);
  }
  modifyDBInstance(dbInstanceIdentifier, params) {
    return this.makeRDSRequest("ModifyDBInstance", {
      DBInstanceIdentifier: dbInstanceIdentifier,
      ...params
    });
  }
  deleteDBInstance(dbInstanceIdentifier, skipFinalSnapshot = true, finalSnapshotId) {
    const params = {
      DBInstanceIdentifier: dbInstanceIdentifier,
      SkipFinalSnapshot: skipFinalSnapshot
    };
    if (!skipFinalSnapshot && finalSnapshotId) {
      params.FinalDBSnapshotIdentifier = finalSnapshotId;
    }
    this.makeRDSRequest("DeleteDBInstance", params);
  }
  waitForDBInstanceState(dbInstanceIdentifier, targetState, maxAttempts = 60) {
    for (let attempt = 0; attempt < maxAttempts; attempt++) {
      try {
        const response = this.checkDBInstanceExists(dbInstanceIdentifier);
        if (response?.DBInstance?.DBInstanceStatus === targetState) {
          return true;
        }
        if (response?.DBInstance?.DBInstanceStatus === "failed") {
          throw new Error(`DB instance ${dbInstanceIdentifier} is in failed state`);
        }
        const start = Date.now();
        while (Date.now() - start < 3e4) {
        }
      } catch (error) {
        if (attempt === maxAttempts - 1) {
          throw error;
        }
      }
    }
    return false;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AWSRDSEntity
});
