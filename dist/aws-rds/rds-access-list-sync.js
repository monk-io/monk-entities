
// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/aws-rds/accessList.ts
const base = require("monkec/base");
const MonkEntity = base.MonkEntity;
const securityGroup = require("aws-rds/security-group");
const checkSecurityGroupExists = securityGroup.checkSecurityGroupExists;
const getCurrentSecurityGroupRules = securityGroup.getCurrentSecurityGroupRules;
const revokeSecurityGroupIngress = securityGroup.revokeSecurityGroupIngress;
const updateSecurityGroupRules = securityGroup.updateSecurityGroupRules;
const cli = require("cli");
var _RDSAccessList = class _RDSAccessList extends MonkEntity {
  create() {
    if (!checkSecurityGroupExists(this.definition.region, this.definition.security_group_id)) {
      throw new Error(`Security group ${this.definition.security_group_id} not found`);
    }
    this.updateSecurityGroupRules();
  }
  start() {
  }
  stop() {
  }
  update() {
    this.updateSecurityGroupRules();
  }
  delete() {
    try {
      const currentAwsRules = getCurrentSecurityGroupRules(this.definition.region, this.definition.security_group_id, this.definition.port);
      if (currentAwsRules.cidrs.length > 0 || currentAwsRules.sgIds.length > 0) {
        revokeSecurityGroupIngress(
          this.definition.region,
          this.definition.security_group_id,
          "tcp",
          this.definition.port,
          this.definition.port,
          currentAwsRules.cidrs,
          currentAwsRules.sgIds
        );
      }
    } catch (error) {
      cli.output(`Warning: Failed to clean up security group rules: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  updateSecurityGroupRules() {
    const groupId = this.definition.security_group_id;
    const port = this.definition.port;
    const region = this.definition.region;
    const vpcId = this.definition.vpc_id;
    const allowedCidrs = this.definition.allowed_cidr_blocks || [];
    const allowedSgNames = this.definition.allowed_security_group_names || [];
    updateSecurityGroupRules(region, groupId, port, [...allowedCidrs], [...allowedSgNames], vpcId);
  }
};
__name(_RDSAccessList, "RDSAccessList");
__publicField(_RDSAccessList, "readiness", { period: 5, initialDelay: 2, attempts: 20 });
var RDSAccessList = _RDSAccessList;



function main(def, state, ctx) {
  const entity = new RDSAccessList(def, state, ctx);
  return entity.main(ctx);
}
