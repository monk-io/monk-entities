// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/aws-rds/common.ts
var common_exports = {};
__export(common_exports, {
  buildCreateInstanceParams: () => buildCreateInstanceParams,
  buildModifyInstanceParams: () => buildModifyInstanceParams,
  formatInstanceState: () => formatInstanceState,
  getDefaultPort: () => getDefaultPort,
  normalizeEngine: () => normalizeEngine,
  parseRDSError: () => parseRDSError,
  validateDBInstanceIdentifier: () => validateDBInstanceIdentifier,
  validateStorageSize: () => validateStorageSize
});
module.exports = __toCommonJS(common_exports);
function validateDBInstanceIdentifier(identifier) {
  if (!identifier || identifier.length < 1 || identifier.length > 63) {
    return false;
  }
  if (!/^[a-zA-Z]/.test(identifier)) {
    return false;
  }
  if (identifier.endsWith("-") || identifier.includes("--")) {
    return false;
  }
  return /^[a-zA-Z][a-zA-Z0-9-]*$/.test(identifier);
}
function validateStorageSize(engine, storageSize) {
  const minStorage = {
    "mysql": 20,
    "postgres": 20,
    "mariadb": 20,
    "oracle-ee": 20,
    "oracle-se2": 20,
    "sqlserver-ex": 20,
    "sqlserver-web": 20,
    "sqlserver-se": 20,
    "sqlserver-ee": 20
  };
  const minimum = minStorage[engine] || 20;
  return storageSize >= minimum;
}
function normalizeEngine(engine) {
  const engineMap = {
    "mysql": "mysql",
    "postgres": "postgres",
    "postgresql": "postgres",
    "mariadb": "mariadb",
    "oracle": "oracle-ee",
    "oracle-ee": "oracle-ee",
    "oracle-se2": "oracle-se2",
    "sqlserver": "sqlserver-se",
    "sqlserver-ex": "sqlserver-ex",
    "sqlserver-web": "sqlserver-web",
    "sqlserver-se": "sqlserver-se",
    "sqlserver-ee": "sqlserver-ee"
  };
  return engineMap[engine.toLowerCase()] || engine;
}
function getDefaultPort(engine) {
  const portMap = {
    "mysql": 3306,
    "postgres": 5432,
    "mariadb": 3306,
    "oracle-ee": 1521,
    "oracle-se2": 1521,
    "sqlserver-ex": 1433,
    "sqlserver-web": 1433,
    "sqlserver-se": 1433,
    "sqlserver-ee": 1433
  };
  return portMap[engine] || 3306;
}
function buildCreateInstanceParams(definition, password) {
  const params = {
    DBInstanceIdentifier: definition.db_instance_identifier,
    DBInstanceClass: definition.db_instance_class,
    Engine: normalizeEngine(definition.engine),
    MasterUsername: definition.master_username,
    MasterUserPassword: password,
    AllocatedStorage: definition.allocated_storage
  };
  if (definition.engine_version) {
    params.EngineVersion = definition.engine_version;
  }
  if (definition.port) {
    params.Port = definition.port;
  } else {
    params.Port = getDefaultPort(normalizeEngine(definition.engine));
  }
  if (definition.vpc_security_group_ids?.length) {
    params.VpcSecurityGroupIds = definition.vpc_security_group_ids;
  }
  if (definition.db_subnet_group_name) {
    params.DBSubnetGroupName = definition.db_subnet_group_name;
  }
  if (definition.backup_retention_period !== void 0) {
    params.BackupRetentionPeriod = definition.backup_retention_period;
  }
  if (definition.preferred_backup_window) {
    params.PreferredBackupWindow = definition.preferred_backup_window;
  }
  if (definition.preferred_maintenance_window) {
    params.PreferredMaintenanceWindow = definition.preferred_maintenance_window;
  }
  if (definition.auto_minor_version_upgrade !== void 0) {
    params.AutoMinorVersionUpgrade = String(definition.auto_minor_version_upgrade);
  }
  if (definition.multi_az !== void 0) {
    params.MultiAZ = String(definition.multi_az);
  }
  if (definition.publicly_accessible !== void 0) {
    params.PubliclyAccessible = String(definition.publicly_accessible);
  }
  if (definition.storage_type) {
    params.StorageType = definition.storage_type;
  }
  if (definition.storage_encrypted !== void 0) {
    params.StorageEncrypted = String(definition.storage_encrypted);
  }
  if (definition.kms_key_id) {
    params.KmsKeyId = definition.kms_key_id;
  }
  if (definition.deletion_protection !== void 0) {
    params.DeletionProtection = String(definition.deletion_protection);
  }
  if (definition.skip_final_snapshot !== void 0) {
    params.SkipFinalSnapshot = String(definition.skip_final_snapshot);
  }
  if (definition.tags && Object.keys(definition.tags).length > 0) {
    const tags = [];
    Object.entries(definition.tags).forEach(([key, value]) => {
      if (key && value !== null && value !== void 0) {
        tags.push({
          Key: String(key),
          Value: String(value)
        });
      }
    });
    if (tags.length > 0) {
      params.Tags = tags;
    }
  }
  return params;
}
function formatInstanceState(dbInstance, wasPreExisting = false) {
  return {
    existing: wasPreExisting,
    // true = don't delete (pre-existing), false = we created it (can delete)
    db_instance_identifier: dbInstance.DBInstanceIdentifier,
    db_instance_arn: dbInstance.DBInstanceArn,
    db_instance_status: dbInstance.DBInstanceStatus,
    endpoint_address: dbInstance.Endpoint?.Address,
    endpoint_port: dbInstance.Endpoint?.Port,
    allocated_storage: dbInstance.AllocatedStorage,
    creation_time: dbInstance.InstanceCreateTime,
    last_modified: dbInstance.LastModifiedTime
  };
}
function buildModifyInstanceParams(definition) {
  const params = {};
  if (definition.allocated_storage !== void 0) {
    params.AllocatedStorage = definition.allocated_storage;
  }
  if (definition.max_allocated_storage !== void 0) {
    params.MaxAllocatedStorage = definition.max_allocated_storage;
  }
  if (definition.db_instance_class !== void 0) {
    params.DBInstanceClass = definition.db_instance_class;
  }
  if (definition.engine_version !== void 0) {
    params.EngineVersion = definition.engine_version;
  }
  if (definition.auto_minor_version_upgrade !== void 0) {
    params.AutoMinorVersionUpgrade = definition.auto_minor_version_upgrade ? "true" : "false";
  }
  if (definition.backup_retention_period !== void 0) {
    params.BackupRetentionPeriod = definition.backup_retention_period;
  }
  if (definition.backup_window !== void 0) {
    params.PreferredBackupWindow = definition.backup_window;
  }
  if (definition.maintenance_window !== void 0) {
    params.PreferredMaintenanceWindow = definition.maintenance_window;
  }
  if (definition.multi_az !== void 0) {
    params.MultiAZ = definition.multi_az ? "true" : "false";
  }
  if (definition.performance_insights_enabled !== void 0) {
    params.EnablePerformanceInsights = definition.performance_insights_enabled ? "true" : "false";
  }
  if (definition.monitoring_interval !== void 0) {
    params.MonitoringInterval = definition.monitoring_interval;
  }
  if (definition.enabled_cloudwatch_logs_exports && Array.isArray(definition.enabled_cloudwatch_logs_exports)) {
    params.CloudwatchLogsExportConfiguration = {
      LogTypesToEnable: definition.enabled_cloudwatch_logs_exports
    };
  }
  if (definition.deletion_protection !== void 0) {
    params.DeletionProtection = definition.deletion_protection ? "true" : "false";
  }
  if (definition.vpc_security_group_ids && Array.isArray(definition.vpc_security_group_ids)) {
    params.VpcSecurityGroupIds = definition.vpc_security_group_ids;
  }
  params.ApplyImmediately = "true";
  return params;
}
function parseRDSError(xmlBody) {
  try {
    const errorMatch = /<Message>(.*?)<\/Message>/.exec(xmlBody);
    const codeMatch = /<Code>(.*?)<\/Code>/.exec(xmlBody);
    if (errorMatch && codeMatch) {
      return `${codeMatch[1]}: ${errorMatch[1]}`;
    } else if (errorMatch) {
      return errorMatch[1];
    }
  } catch (error) {
  }
  return xmlBody;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildCreateInstanceParams,
  buildModifyInstanceParams,
  formatInstanceState,
  getDefaultPort,
  normalizeEngine,
  parseRDSError,
  validateDBInstanceIdentifier,
  validateStorageSize
});
