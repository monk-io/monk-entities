
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/aws-cloudfront/distribution.ts
const base = require("aws-cloudfront/base");
const AWSCloudFrontEntity = base.AWSCloudFrontEntity;
const MonkecBase = require("monkec/base");
const cli = require("cli");
const aws = require("cloud/aws");
const common = require("aws-cloudfront/common");
const validateDistributionConfig = common.validateDistributionConfig;
const buildDistributionConfig = common.buildDistributionConfig;
const formatDistributionState = common.formatDistributionState;
const generateCallerReference = common.generateCallerReference;
var action2 = MonkecBase.action;
var _listInvalidations_dec, _createInvalidation_dec, _getDistributionConfig_dec, _getDistributionInfo_dec, _a, _init;
var _CloudFrontDistribution = class _CloudFrontDistribution extends (_a = AWSCloudFrontEntity, _getDistributionInfo_dec = [action2("get-distribution-info")], _getDistributionConfig_dec = [action2("get-distribution-config")], _createInvalidation_dec = [action2("create-invalidation")], _listInvalidations_dec = [action2("list-invalidations")], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  getDistributionId() {
    return this.state.distribution_id || "";
  }
  extractArrayFromIndexedFields(obj, fieldName) {
    if (obj[fieldName] && Array.isArray(obj[fieldName])) {
      return obj[fieldName];
    }
    const result = [];
    let index = 0;
    while (obj[`${fieldName}!${index}`] !== void 0) {
      let item = obj[`${fieldName}!${index}`];
      item = this.processNestedIndexedFields(item);
      result.push(item);
      index++;
    }
    return result.filter((item) => item != null);
  }
  processNestedIndexedFields(obj) {
    if (!obj || typeof obj !== "object") {
      return obj;
    }
    const processedObj = { ...obj };
    const indexedFields = /* @__PURE__ */ new Set();
    for (const key in processedObj) {
      const match = key.match(/^(.+)!(\d+)$/);
      if (match) {
        const [, fieldName] = match;
        indexedFields.add(fieldName);
      }
    }
    for (const fieldName of indexedFields) {
      const extractedArray = this.extractArrayFromIndexedFields(processedObj, fieldName);
      let index = 0;
      while (processedObj[`${fieldName}!${index}`] !== void 0) {
        delete processedObj[`${fieldName}!${index}`];
        index++;
      }
      if (extractedArray.length > 0) {
        processedObj[fieldName] = extractedArray;
      }
    }
    return processedObj;
  }
  create() {
    const processedDefinition = this.processNestedIndexedFields(this.definition);
    const validationErrors = validateDistributionConfig(processedDefinition);
    if (validationErrors.length > 0) {
      throw new Error(`Invalid distribution configuration: ${validationErrors.join(", ")}`);
    }
    const callerReference = processedDefinition.caller_reference || generateCallerReference("monk-cf-dist");
    try {
      const distributionConfig = buildDistributionConfig({
        ...processedDefinition,
        caller_reference: callerReference
      });
      const response = this.createDistribution({ DistributionConfig: distributionConfig });
      if (!response || !response.Distribution) {
        throw new Error("Invalid response: No Distribution object returned");
      }
      if (!response || !response.Distribution) {
        throw new Error(`Invalid CloudFront API response - no Distribution object found. Response: ${JSON.stringify(response, null, 2)}`);
      }
      const state = formatDistributionState(response.Distribution, response.ETag, false);
      Object.assign(this.state, state);
      this.checkReadiness();
    } catch (error) {
      throw new Error(`Failed to create CloudFront distribution: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  start() {
  }
  stop() {
  }
  update() {
    if (!this.state.distribution_id) {
      throw new Error("Distribution ID not available for update");
    }
    if (!this.state.etag) {
      throw new Error("ETag not available for update - cannot update without current ETag");
    }
    try {
      const processedDefinition = this.processNestedIndexedFields(this.definition);
      const distributionConfig = buildDistributionConfig(processedDefinition);
      const response = this.updateDistribution(
        this.state.distribution_id,
        { DistributionConfig: distributionConfig },
        this.state.etag
      );
      const updatedState = formatDistributionState(response.Distribution, response.ETag, this.state.existing);
      Object.assign(this.state, updatedState);
    } catch (error) {
      throw new Error(`Failed to update CloudFront distribution: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  delete() {
    if (!this.state.distribution_id) {
      return;
    }
    if (this.state.existing) {
      this.state.distribution_id = void 0;
      this.state.etag = void 0;
      return;
    }
    try {
      const currentDistribution = this.checkDistributionExists(this.state.distribution_id);
      if (!currentDistribution) {
        this.clearState();
        return;
      }
      const formattedState = formatDistributionState(currentDistribution.Distribution, currentDistribution.ETag, this.state.existing);
      Object.assign(this.state, formattedState);
      const isEnabled = this.state.distribution_config_enabled;
      const currentStatus = currentDistribution.Distribution?.Status;
      if (isEnabled) {
        this.performDisable(currentDistribution);
        this.waitForDeployment();
      } else {
        if (currentStatus !== "Deployed") {
          this.waitForDeployment();
        }
      }
      const finalDistribution = this.checkDistributionExists(this.state.distribution_id);
      if (!finalDistribution) {
        this.clearState();
        return;
      }
      this.deleteDistribution(this.state.distribution_id, finalDistribution.ETag);
      cli.output(`\u2705 CloudFront distribution deleted successfully`);
      this.clearState();
    } catch (error) {
      throw new Error(`Failed to delete CloudFront distribution: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  performDisable(_currentDistribution) {
    try {
      if (!this.state.distribution_id) {
        throw new Error("No distribution ID available for disable operation");
      }
      const configResponse = this.getDistributionConfigForUpdate(this.state.distribution_id);
      if (!configResponse.ETag) {
        throw new Error("No ETag returned from GetDistributionConfig");
      }
      if (!configResponse.RawDistributionConfigXML) {
        throw new Error("No raw DistributionConfig XML available for passthrough approach");
      }
      const modifiedXml = configResponse.RawDistributionConfigXML.replace(
        /<PriceClass>[^<]*<\/PriceClass>\s*<Enabled>true<\/Enabled>/,
        (match) => match.replace("<Enabled>true</Enabled>", "<Enabled>false</Enabled>")
      );
      const disableResponse = this.updateDistributionWithRawXML(
        this.state.distribution_id,
        // Already checked above
        modifiedXml,
        configResponse.ETag
      );
      this.state.etag = disableResponse.ETag;
      this.state.distribution_config_enabled = false;
      cli.output(`\u2705 Distribution disable initiated successfully`);
    } catch (error) {
      const errorMsg = `Failed to disable distribution: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(`\u274C ${errorMsg}`);
      cli.output(`\u{1F4CB} Manual workflow recommended:`);
      cli.output(`   1. Go to AWS Console: https://console.aws.amazon.com/cloudfront/v3/home#/distributions/${this.state.distribution_id}`);
      cli.output(`   2. Click "Disable" button`);
      cli.output(`   3. Wait for deployment to complete`);
      cli.output(`   4. Run: monk delete --force your-distribution`);
      throw new Error(errorMsg);
    }
  }
  waitForDeployment() {
    const maxAttempts = 60;
    const intervalSeconds = 30;
    let attempts = 0;
    while (attempts < maxAttempts) {
      attempts++;
      try {
        if (!this.state.distribution_id) {
          throw new Error("No distribution ID available during deployment wait");
        }
        const currentDistribution = this.checkDistributionExists(this.state.distribution_id);
        if (!currentDistribution) {
          throw new Error("Distribution not found during deployment wait");
        }
        const status = currentDistribution.Distribution?.Status;
        if (status === "Deployed") {
          cli.output(`\u2705 Distribution has reached 'Deployed' status`);
          const formattedState = formatDistributionState(currentDistribution.Distribution, currentDistribution.ETag, this.state.existing);
          Object.assign(this.state, formattedState);
          return;
        }
        if (attempts < maxAttempts) {
          const start = Date.now();
          while (Date.now() - start < intervalSeconds * 1e3) {
          }
        }
      } catch (error) {
        if (attempts < maxAttempts) {
          const start = Date.now();
          while (Date.now() - start < intervalSeconds * 1e3) {
          }
        } else {
          throw error;
        }
      }
    }
    throw new Error(`Distribution did not reach 'Deployed' status within ${maxAttempts * intervalSeconds / 60} minutes. Please wait longer and try deletion again.`);
  }
  checkReadiness() {
    if (!this.state.distribution_id) {
      return false;
    }
    try {
      const response = this.checkDistributionExists(this.state.distribution_id);
      if (!response) {
        return false;
      }
      const updatedState = formatDistributionState(response.Distribution, response.ETag, this.state.existing);
      Object.assign(this.state, updatedState);
      const isReady = this.state.distribution_status === "Deployed";
      return isReady;
    } catch (error) {
      return false;
    }
  }
  getDistributionInfo(_args) {
    if (!this.state.distribution_id) {
      cli.output("Distribution not created yet");
      throw new Error("Distribution not created yet");
    }
    try {
      const response = this.checkDistributionExists(this.state.distribution_id);
      if (!response) {
        cli.output(`Distribution ${this.state.distribution_id} not found`);
        throw new Error(`Distribution ${this.state.distribution_id} not found`);
      }
      const distributionInfo = {
        distribution_id: this.state.distribution_id,
        domain_name: this.state.domain_name,
        status: this.state.distribution_status,
        arn: this.state.distribution_arn,
        last_modified: this.state.last_modified_time,
        in_progress_invalidations: this.state.in_progress_invalidation_batches,
        etag: this.state.etag
      };
      cli.output("=== CloudFront Distribution Information ===");
      cli.output(JSON.stringify(distributionInfo, null, 2));
    } catch (error) {
      const errorMsg = `Failed to get distribution info: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
  getDistributionConfig(_args) {
    if (!this.state.distribution_id) {
      cli.output("Distribution not created yet");
      throw new Error("Distribution not created yet");
    }
    try {
      const response = this.checkDistributionExists(this.state.distribution_id);
      if (!response) {
        cli.output(`Distribution ${this.state.distribution_id} not found`);
        throw new Error(`Distribution ${this.state.distribution_id} not found`);
      }
      cli.output("=== CloudFront Distribution Configuration ===");
      cli.output(JSON.stringify(response.Distribution?.DistributionConfig, null, 2));
    } catch (error) {
      const errorMsg = `Failed to get distribution config: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
  createInvalidation(args) {
    if (!this.state.distribution_id) {
      cli.output("Distribution not created yet");
      throw new Error("Distribution not created yet");
    }
    const pathsArg = args?.paths;
    const paths = Array.isArray(pathsArg) ? pathsArg : typeof pathsArg === "string" ? [pathsArg] : ["/*"];
    const callerReference = args?.caller_reference || `invalidation-${Date.now()}`;
    if (!Array.isArray(paths) || paths.length === 0) {
      cli.output("At least one path is required for invalidation");
      throw new Error("At least one path is required for invalidation");
    }
    try {
      cli.output(`Creating invalidation for distribution ${this.state.distribution_id}`);
      cli.output(`Paths: ${paths.join(", ")}`);
      const invalidationResponse = this.createDistributionInvalidation(
        this.state.distribution_id,
        paths,
        callerReference
      );
      cli.output("=== Invalidation Created ===");
      cli.output(JSON.stringify(invalidationResponse, null, 2));
    } catch (error) {
      const errorMsg = `Failed to create invalidation: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
  listInvalidations(_args) {
    if (!this.state.distribution_id) {
      cli.output("Distribution not created yet");
      throw new Error("Distribution not created yet");
    }
    try {
      const invalidations = this.listDistributionInvalidations(this.state.distribution_id);
      cli.output("=== Distribution Invalidations ===");
      cli.output(JSON.stringify(invalidations, null, 2));
    } catch (error) {
      const errorMsg = `Failed to list invalidations: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
  // Implementation of abstract methods from base class
  checkDistributionExists(distributionId) {
    return this.makeCloudFrontRequest("GetDistribution", { Id: distributionId });
  }
  createDistribution(params) {
    return this.makeCloudFrontRequest("CreateDistribution", params);
  }
  updateDistribution(distributionId, params, etag) {
    return this.makeCloudFrontRequest("UpdateDistribution", {
      Id: distributionId,
      IfMatch: etag,
      ...params
    });
  }
  updateDistributionWithRawXML(distributionId, rawXml, etag) {
    const url = `https://cloudfront.amazonaws.com/2020-05-31/distribution/${distributionId}/config`;
    const response = aws.put(url, {
      service: "cloudfront",
      region: "us-east-1",
      headers: {
        "Content-Type": "application/xml",
        "If-Match": etag
      },
      body: rawXml
    });
    if (response.statusCode >= 400) {
      const error = this.parseCloudFrontResponse(response.body);
      throw new Error(`AWS CloudFront API error: ${response.statusCode} - ${error.Error?.Message} (${error.Error?.Code})`);
    }
    return this.parseCloudFrontResponse(response.body, response.headers);
  }
  deleteDistribution(distributionId, etag) {
    return this.makeCloudFrontRequest("DeleteDistribution", {
      Id: distributionId,
      IfMatch: etag
    });
  }
  // Additional helper methods for custom actions
  createDistributionInvalidation(distributionId, paths, callerReference) {
    const url = `https://cloudfront.amazonaws.com/2020-05-31/distribution/${distributionId}/invalidation`;
    const invalidationXml = this.buildInvalidationXml(paths, callerReference);
    const response = aws.post(url, {
      service: "cloudfront",
      region: "us-east-1",
      headers: {
        "Content-Type": "application/xml"
      },
      body: invalidationXml
    });
    if (response.statusCode >= 400) {
      this.handleCloudFrontError(response, "CreateInvalidation");
    }
    return this.parseInvalidationResponse(response.body);
  }
  listDistributionInvalidations(distributionId) {
    const url = `https://cloudfront.amazonaws.com/2020-05-31/distribution/${distributionId}/invalidation`;
    const response = aws.get(url, {
      service: "cloudfront",
      region: "us-east-1"
    });
    if (response.statusCode >= 400) {
      this.handleCloudFrontError(response, "ListInvalidations");
    }
    return this.parseInvalidationListResponse(response.body);
  }
  buildInvalidationXml(paths, callerReference) {
    const pathsXml = paths.map((path) => `      <member>${this.escapeXml(path)}</member>`).join("\n");
    return `<?xml version="1.0" encoding="UTF-8"?>
<InvalidationBatch xmlns="http://cloudfront.amazonaws.com/doc/2020-05-31/">
  <Paths>
    <Quantity>${paths.length}</Quantity>
    <Items>
${pathsXml}
    </Items>
  </Paths>
  <CallerReference>${this.escapeXml(callerReference)}</CallerReference>
</InvalidationBatch>`;
  }
  parseInvalidationResponse(xmlBody) {
    const result = {};
    const invalidationMatch = /<Invalidation>([\s\S]*?)<\/Invalidation>/.exec(xmlBody);
    if (invalidationMatch) {
      const invalidationXml = invalidationMatch[1];
      const idMatch = /<Id>(.*?)<\/Id>/.exec(invalidationXml);
      if (idMatch) {
        result.id = idMatch[1];
      }
      const statusMatch = /<Status>(.*?)<\/Status>/.exec(invalidationXml);
      if (statusMatch) {
        result.status = statusMatch[1];
      }
      const createTimeMatch = /<CreateTime>(.*?)<\/CreateTime>/.exec(invalidationXml);
      if (createTimeMatch) {
        result.create_time = createTimeMatch[1];
      }
    }
    return result;
  }
  parseInvalidationListResponse(xmlBody) {
    const result = { invalidations: [] };
    const invalidationListMatch = /<InvalidationList>([\s\S]*?)<\/InvalidationList>/.exec(xmlBody);
    if (invalidationListMatch) {
      const listXml = invalidationListMatch[1];
      const invalidationMatches = listXml.match(/<InvalidationSummary>[\s\S]*?<\/InvalidationSummary>/g);
      if (invalidationMatches) {
        result.invalidations = invalidationMatches.map((invalidationXml) => {
          const invalidation = {};
          const idMatch = /<Id>(.*?)<\/Id>/.exec(invalidationXml);
          if (idMatch) {
            invalidation.id = idMatch[1];
          }
          const statusMatch = /<Status>(.*?)<\/Status>/.exec(invalidationXml);
          if (statusMatch) {
            invalidation.status = statusMatch[1];
          }
          const createTimeMatch = /<CreateTime>(.*?)<\/CreateTime>/.exec(invalidationXml);
          if (createTimeMatch) {
            invalidation.create_time = createTimeMatch[1];
          }
          return invalidation;
        });
      }
    }
    return result;
  }
  clearState() {
    this.state.distribution_id = void 0;
    this.state.distribution_arn = void 0;
    this.state.distribution_status = void 0;
    this.state.domain_name = void 0;
    this.state.etag = void 0;
    this.state.last_modified_time = void 0;
    this.state.creation_time = void 0;
    this.state.in_progress_invalidation_batches = void 0;
    this.state.existing = false;
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "getDistributionInfo", _getDistributionInfo_dec, _CloudFrontDistribution);
__decorateElement(_init, 1, "getDistributionConfig", _getDistributionConfig_dec, _CloudFrontDistribution);
__decorateElement(_init, 1, "createInvalidation", _createInvalidation_dec, _CloudFrontDistribution);
__decorateElement(_init, 1, "listInvalidations", _listInvalidations_dec, _CloudFrontDistribution);
__decoratorMetadata(_init, _CloudFrontDistribution);
__name(_CloudFrontDistribution, "CloudFrontDistribution");
// CloudFront distributions take 15-20 minutes to deploy, so we need longer polling
__publicField(_CloudFrontDistribution, "readiness", {
  period: 30,
  // Check every 30 seconds
  initialDelay: 30,
  // Wait 30 seconds before first check
  attempts: 40
  // Up to 20 minutes of checking (40 * 30 seconds)
});
var CloudFrontDistribution = _CloudFrontDistribution;



function main(def, state, ctx) {
  const entity = new CloudFrontDistribution(def, state, ctx);
  return entity.main(ctx);
}
