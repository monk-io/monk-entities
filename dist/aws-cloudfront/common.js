// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/aws-cloudfront/common.ts
var common_exports = {};
__export(common_exports, {
  DEFAULT_CLOUDFRONT_CONFIG: () => DEFAULT_CLOUDFRONT_CONFIG,
  addParamsToFormData: () => addParamsToFormData,
  buildDistributionConfig: () => buildDistributionConfig,
  formatDistributionState: () => formatDistributionState,
  generateCallerReference: () => generateCallerReference,
  parseCloudFrontError: () => parseCloudFrontError,
  validateAlias: () => validateAlias,
  validateCallerReference: () => validateCallerReference,
  validateDistributionConfig: () => validateDistributionConfig,
  validateOriginDomainName: () => validateOriginDomainName,
  validateOriginId: () => validateOriginId
});
module.exports = __toCommonJS(common_exports);
function validateCallerReference(callerReference) {
  if (!callerReference || callerReference.length < 1 || callerReference.length > 128) {
    return false;
  }
  return /^[a-zA-Z0-9_-]+$/.test(callerReference);
}
function validateAlias(alias) {
  if (!alias || alias.length > 253) {
    return false;
  }
  const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  return domainRegex.test(alias);
}
function validateOriginDomainName(domainName) {
  if (!domainName || domainName.length > 253) {
    return false;
  }
  const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
  const s3Regex = /^[a-zA-Z0-9][a-zA-Z0-9-]*\.s3(\.[a-zA-Z0-9-]+)?\.amazonaws\.com$/;
  return domainRegex.test(domainName) || s3Regex.test(domainName);
}
function validateOriginId(originId) {
  if (!originId || originId.length < 1 || originId.length > 128) {
    return false;
  }
  return /^[a-zA-Z0-9._-]+$/.test(originId);
}
function generateCallerReference(distributionName) {
  const timestamp = Date.now();
  const randomSuffix = Math.random().toString(36).substring(2, 8);
  const baseName = distributionName ? distributionName.replace(/[^a-zA-Z0-9-]/g, "-") : "cf-dist";
  return `${baseName}-${timestamp}-${randomSuffix}`.substring(0, 128);
}
function buildDistributionConfig(definition) {
  const config = {
    CallerReference: definition.caller_reference || generateCallerReference(),
    Comment: definition.comment || "",
    Enabled: definition.enabled !== false,
    // Default to true
    Origins: []
  };
  if (definition.origins && Array.isArray(definition.origins)) {
    config.Origins = definition.origins.map((origin) => {
      const originConfig = {
        Id: origin.id,
        DomainName: origin.domain_name
      };
      if (origin.origin_path) {
        originConfig.OriginPath = origin.origin_path;
      }
      originConfig.ConnectionAttempts = origin.connection_attempts !== void 0 ? origin.connection_attempts : 3;
      originConfig.ConnectionTimeout = origin.connection_timeout !== void 0 ? origin.connection_timeout : 10;
      originConfig.OriginShield = { Enabled: false };
      originConfig.OriginAccessControlId = "";
      if (origin.custom_origin_config) {
        originConfig.CustomOriginConfig = {
          HTTPPort: origin.custom_origin_config.http_port || 80,
          HTTPSPort: origin.custom_origin_config.https_port || 443,
          OriginProtocolPolicy: origin.custom_origin_config.origin_protocol_policy,
          // AWS default SSL protocols
          OriginSslProtocols: origin.custom_origin_config.origin_ssl_protocols || ["TLSv1", "TLSv1.1", "TLSv1.2"],
          // AWS default timeouts
          OriginReadTimeout: origin.custom_origin_config.origin_read_timeout !== void 0 ? origin.custom_origin_config.origin_read_timeout : 30,
          OriginKeepaliveTimeout: origin.custom_origin_config.origin_keep_alive_timeout !== void 0 ? origin.custom_origin_config.origin_keep_alive_timeout : 5
        };
      }
      if (origin.s3_origin_config) {
        originConfig.S3OriginConfig = {
          OriginAccessIdentity: origin.s3_origin_config.origin_access_identity || ""
        };
      }
      return originConfig;
    });
  }
  if (definition.default_cache_behavior) {
    const behavior = definition.default_cache_behavior;
    config.DefaultCacheBehavior = {
      TargetOriginId: behavior.target_origin_id,
      ViewerProtocolPolicy: behavior.viewer_protocol_policy || "allow-all"
    };
    if (behavior.allowed_methods) {
      config.DefaultCacheBehavior.AllowedMethods = behavior.allowed_methods;
      if (behavior.cached_methods) {
        config.DefaultCacheBehavior.CachedMethods = behavior.cached_methods;
      }
    }
    config.DefaultCacheBehavior.QueryString = behavior.forward_query_string || false;
    config.DefaultCacheBehavior.CookiesForward = behavior.forward_cookies || "none";
    if (behavior.cookies_whitelist && Array.isArray(behavior.cookies_whitelist)) {
      config.DefaultCacheBehavior.CookiesWhitelistedNames = behavior.cookies_whitelist;
    }
    if (behavior.forward_headers && Array.isArray(behavior.forward_headers)) {
      config.DefaultCacheBehavior.Headers = behavior.forward_headers;
    }
    if (behavior.min_ttl !== void 0) {
      config.DefaultCacheBehavior.MinTTL = behavior.min_ttl;
    }
    if (behavior.default_ttl !== void 0) {
      config.DefaultCacheBehavior.DefaultTTL = behavior.default_ttl;
    }
    if (behavior.max_ttl !== void 0) {
      config.DefaultCacheBehavior.MaxTTL = behavior.max_ttl;
    }
    if (behavior.compress !== void 0) {
      config.DefaultCacheBehavior.Compress = behavior.compress;
    }
    if (behavior.trusted_signers && Array.isArray(behavior.trusted_signers)) {
      config.DefaultCacheBehavior.TrustedSigners = behavior.trusted_signers;
    }
    config.DefaultCacheBehavior.SmoothStreaming = false;
    config.DefaultCacheBehavior.FieldLevelEncryptionId = "";
    config.DefaultCacheBehavior.GrpcConfig = { Enabled: false };
  }
  if (definition.cache_behaviors && Array.isArray(definition.cache_behaviors)) {
    config.CacheBehaviors = definition.cache_behaviors.map((behavior) => {
      const cacheBehavior = {
        PathPattern: behavior.path_pattern,
        TargetOriginId: behavior.target_origin_id,
        ViewerProtocolPolicy: behavior.viewer_protocol_policy || "allow-all"
      };
      if (behavior.allowed_methods) {
        cacheBehavior.AllowedMethods = behavior.allowed_methods;
        if (behavior.cached_methods) {
          cacheBehavior.CachedMethods = behavior.cached_methods;
        }
      }
      cacheBehavior.QueryString = behavior.forward_query_string || false;
      cacheBehavior.CookiesForward = behavior.forward_cookies || "none";
      if (behavior.cookies_whitelist && Array.isArray(behavior.cookies_whitelist)) {
        cacheBehavior.CookiesWhitelistedNames = behavior.cookies_whitelist;
      }
      if (behavior.forward_headers && Array.isArray(behavior.forward_headers)) {
        cacheBehavior.Headers = behavior.forward_headers;
      }
      if (behavior.min_ttl !== void 0) {
        cacheBehavior.MinTTL = behavior.min_ttl;
      }
      if (behavior.default_ttl !== void 0) {
        cacheBehavior.DefaultTTL = behavior.default_ttl;
      }
      if (behavior.max_ttl !== void 0) {
        cacheBehavior.MaxTTL = behavior.max_ttl;
      }
      if (behavior.compress !== void 0) {
        cacheBehavior.Compress = behavior.compress;
      }
      if (behavior.trusted_signers && Array.isArray(behavior.trusted_signers)) {
        cacheBehavior.TrustedSigners = behavior.trusted_signers;
      }
      return cacheBehavior;
    });
  }
  if (definition.custom_error_responses && Array.isArray(definition.custom_error_responses)) {
    config.CustomErrorResponses = definition.custom_error_responses.map((errorResponse) => {
      const customError = {
        ErrorCode: errorResponse.error_code
      };
      if (errorResponse.response_page_path) {
        customError.ResponsePagePath = errorResponse.response_page_path;
      }
      if (errorResponse.response_code) {
        customError.ResponseCode = errorResponse.response_code;
      }
      if (errorResponse.error_caching_min_ttl !== void 0) {
        customError.ErrorCachingMinTTL = errorResponse.error_caching_min_ttl;
      }
      return customError;
    });
  }
  if (definition.price_class) {
    config.PriceClass = definition.price_class;
  }
  if (definition.aliases && Array.isArray(definition.aliases)) {
    config.Aliases = definition.aliases;
  }
  if (definition.default_root_object) {
    config.DefaultRootObject = definition.default_root_object;
  }
  if (definition.viewer_certificate) {
    config.ViewerCertificate = {};
    const cert = definition.viewer_certificate;
    if (cert.cloudfront_default_certificate) {
      config.ViewerCertificate.CloudFrontDefaultCertificate = true;
    } else {
      config.ViewerCertificate.CloudFrontDefaultCertificate = false;
      if (cert.acm_certificate_arn) {
        config.ViewerCertificate.ACMCertificateArn = cert.acm_certificate_arn;
        config.ViewerCertificate.CertificateSource = "acm";
      } else if (cert.iam_certificate_id) {
        config.ViewerCertificate.IAMCertificateId = cert.iam_certificate_id;
        config.ViewerCertificate.CertificateSource = "iam";
      }
      if (cert.ssl_support_method) {
        config.ViewerCertificate.SSLSupportMethod = cert.ssl_support_method;
      }
      if (cert.minimum_protocol_version) {
        config.ViewerCertificate.MinimumProtocolVersion = cert.minimum_protocol_version;
      }
    }
  } else {
    config.ViewerCertificate = {
      CloudFrontDefaultCertificate: true,
      SSLSupportMethod: "vip",
      MinimumProtocolVersion: "TLSv1",
      CertificateSource: "cloudfront"
    };
  }
  if (definition.web_acl_id) {
    config.WebACLId = definition.web_acl_id;
  }
  if (definition.http_version) {
    config.HttpVersion = definition.http_version;
  }
  if (definition.is_ipv6_enabled !== void 0) {
    config.IsIPV6Enabled = definition.is_ipv6_enabled;
  }
  if (definition.logging) {
    config.Logging = {
      Enabled: definition.logging.enabled || false
    };
    if (definition.logging.enabled && definition.logging.bucket) {
      config.Logging.Bucket = definition.logging.bucket;
      config.Logging.Prefix = definition.logging.prefix || "";
      config.Logging.IncludeCookies = definition.logging.include_cookies || false;
    }
  }
  config.Restrictions = {
    GeoRestriction: {
      RestrictionType: "none",
      Quantity: 0
    }
  };
  config.ContinuousDeploymentPolicyId = "";
  config.Staging = false;
  return config;
}
function formatDistributionState(distribution, etag, wasPreExisting = false) {
  const state = {
    existing: wasPreExisting,
    // true = don't delete (pre-existing), false = we created it (can delete)
    distribution_id: distribution.Id,
    distribution_arn: distribution.ARN,
    distribution_status: distribution.Status,
    domain_name: distribution.DomainName,
    etag,
    last_modified_time: distribution.LastModifiedTime,
    creation_time: distribution.LastModifiedTime,
    // CloudFront doesn't have separate creation time
    in_progress_invalidation_batches: distribution.InProgressInvalidationBatches || 0
  };
  if (distribution.DistributionConfig && typeof distribution.DistributionConfig.Enabled !== "undefined") {
    state.distribution_config_enabled = distribution.DistributionConfig.Enabled;
  } else {
  }
  return state;
}
function parseCloudFrontError(xmlBody) {
  try {
    const errorMatch = /<Message>(.*?)<\/Message>/.exec(xmlBody);
    const codeMatch = /<Code>(.*?)<\/Code>/.exec(xmlBody);
    if (errorMatch && codeMatch) {
      return `${codeMatch[1]}: ${errorMatch[1]}`;
    } else if (errorMatch) {
      return errorMatch[1];
    }
  } catch (_error) {
  }
  return xmlBody;
}
function addParamsToFormData(formParams, params, prefix = "") {
  for (const [key, value] of Object.entries(params)) {
    const paramKey = prefix ? `${prefix}.${key}` : key;
    if (value === null || value === void 0) {
      continue;
    }
    if (Array.isArray(value)) {
      value.forEach((item, index) => {
        if (typeof item === "object") {
          addParamsToFormData(formParams, item, `${paramKey}.member.${index + 1}`);
        } else {
          formParams[`${paramKey}.member.${index + 1}`] = String(item);
        }
      });
    } else if (typeof value === "object") {
      addParamsToFormData(formParams, value, paramKey);
    } else {
      formParams[paramKey] = String(value);
    }
  }
}
var DEFAULT_CLOUDFRONT_CONFIG = {
  enabled: true,
  price_class: "PriceClass_All",
  http_version: "http2",
  is_ipv6_enabled: true,
  default_cache_behavior: {
    viewer_protocol_policy: "redirect-to-https",
    allowed_methods: ["GET", "HEAD", "OPTIONS"],
    cached_methods: ["GET", "HEAD"],
    forward_cookies: "none",
    forward_query_string: false,
    compress: true,
    min_ttl: 0,
    default_ttl: 86400,
    max_ttl: 31536e3
  }
};
function validateDistributionConfig(definition) {
  const errors = [];
  if (!definition.origins || !Array.isArray(definition.origins) || definition.origins.length === 0) {
    errors.push("At least one origin is required");
  } else {
    definition.origins.forEach((origin, index) => {
      if (!origin.id || !validateOriginId(origin.id)) {
        errors.push(`Origin ${index + 1}: Invalid origin ID`);
      }
      if (!origin.domain_name || !validateOriginDomainName(origin.domain_name)) {
        errors.push(`Origin ${index + 1}: Invalid domain name`);
      }
    });
  }
  if (!definition.default_cache_behavior) {
    errors.push("Default cache behavior is required");
  } else if (!definition.default_cache_behavior.target_origin_id) {
    errors.push("Default cache behavior must specify target_origin_id");
  }
  if (definition.aliases && Array.isArray(definition.aliases)) {
    definition.aliases.forEach((alias, index) => {
      if (!validateAlias(alias)) {
        errors.push(`Alias ${index + 1}: Invalid alias format`);
      }
    });
  }
  if (definition.caller_reference && !validateCallerReference(definition.caller_reference)) {
    errors.push("Invalid caller reference format");
  }
  return errors;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DEFAULT_CLOUDFRONT_CONFIG,
  addParamsToFormData,
  buildDistributionConfig,
  formatDistributionState,
  generateCallerReference,
  parseCloudFrontError,
  validateAlias,
  validateCallerReference,
  validateDistributionConfig,
  validateOriginDomainName,
  validateOriginId
});
