// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/aws-cloudfront/base.ts
var base_exports = {};
__export(base_exports, {
  AWSCloudFrontEntity: () => AWSCloudFrontEntity
});
module.exports = __toCommonJS(base_exports);
var import_base = require("monkec/base");
var import_aws = __toESM(require("cloud/aws"));
var AWSCloudFrontEntity = class extends import_base.MonkEntity {
  constructor() {
    super(...arguments);
    __publicField(this, "region");
  }
  before() {
    this.region = this.definition.region;
  }
  makeCloudFrontRequest(action, params = {}) {
    const url = `https://cloudfront.amazonaws.com/2020-05-31/distribution`;
    let response;
    let requestUrl = url;
    if (action === "CreateDistribution") {
      const body = this.buildDistributionConfigXml(params.DistributionConfig);
      response = import_aws.default.post(requestUrl, {
        service: "cloudfront",
        region: "us-east-1",
        // CloudFront is a global service but uses us-east-1
        headers: {
          "Content-Type": "application/xml"
        },
        body
      });
    } else if (action === "GetDistribution") {
      requestUrl = `${url}/${params.Id}`;
      response = import_aws.default.get(requestUrl, {
        service: "cloudfront",
        region: "us-east-1"
      });
    } else if (action === "UpdateDistribution") {
      requestUrl = `${url}/${params.Id}`;
      const body = this.buildDistributionConfigXml(params.DistributionConfig);
      response = import_aws.default.put(requestUrl, {
        service: "cloudfront",
        region: "us-east-1",
        headers: {
          "Content-Type": "application/xml",
          "If-Match": params.IfMatch || ""
        },
        body
      });
    } else if (action === "DeleteDistribution") {
      requestUrl = `${url}/${params.Id}`;
      response = import_aws.default.delete(requestUrl, {
        service: "cloudfront",
        region: "us-east-1",
        headers: {
          "If-Match": params.IfMatch || ""
        }
      });
    } else {
      throw new Error(`Unknown CloudFront action: ${action}`);
    }
    if (response.statusCode >= 400) {
      this.handleCloudFrontError(response, action);
    }
    return this.parseCloudFrontResponse(response.body, response.headers);
  }
  buildDistributionConfigXml(distributionConfig) {
    const xmlParts = [
      '<?xml version="1.0" encoding="UTF-8"?>',
      '<DistributionConfig xmlns="http://cloudfront.amazonaws.com/doc/2020-05-31/">'
    ];
    if (distributionConfig.CallerReference) {
      xmlParts.push(`  <CallerReference>${this.escapeXml(distributionConfig.CallerReference)}</CallerReference>`);
    }
    if (distributionConfig.Comment !== void 0) {
      xmlParts.push(`  <Comment>${this.escapeXml(distributionConfig.Comment || "")}</Comment>`);
    }
    if (distributionConfig.DefaultRootObject) {
      xmlParts.push(`  <DefaultRootObject>${this.escapeXml(distributionConfig.DefaultRootObject)}</DefaultRootObject>`);
    }
    xmlParts.push(`  <Enabled>${distributionConfig.Enabled ? "true" : "false"}</Enabled>`);
    if (distributionConfig.Origins) {
      xmlParts.push("  <Origins>");
      xmlParts.push(`    <Quantity>${distributionConfig.Origins.length}</Quantity>`);
      xmlParts.push("    <Items>");
      distributionConfig.Origins.forEach((origin) => {
        xmlParts.push("      <member>");
        xmlParts.push(`        <Id>${this.escapeXml(origin.Id)}</Id>`);
        xmlParts.push(`        <DomainName>${this.escapeXml(origin.DomainName)}</DomainName>`);
        xmlParts.push(`        <OriginPath>${this.escapeXml(origin.OriginPath || "")}</OriginPath>`);
        xmlParts.push("        <CustomHeaders>");
        xmlParts.push("          <Quantity>0</Quantity>");
        xmlParts.push("        </CustomHeaders>");
        if (origin.CustomOriginConfig) {
          xmlParts.push("        <CustomOriginConfig>");
          const config = origin.CustomOriginConfig;
          xmlParts.push(`          <HTTPPort>${config.HTTPPort || 80}</HTTPPort>`);
          xmlParts.push(`          <HTTPSPort>${config.HTTPSPort || 443}</HTTPSPort>`);
          xmlParts.push(`          <OriginProtocolPolicy>${config.OriginProtocolPolicy}</OriginProtocolPolicy>`);
          if (config.OriginSslProtocols) {
            xmlParts.push("          <OriginSslProtocols>");
            xmlParts.push(`            <Quantity>${config.OriginSslProtocols.length}</Quantity>`);
            xmlParts.push("            <Items>");
            config.OriginSslProtocols.forEach((protocol) => {
              xmlParts.push(`              <member>${protocol}</member>`);
            });
            xmlParts.push("            </Items>");
            xmlParts.push("          </OriginSslProtocols>");
          }
          if (config.OriginReadTimeout !== void 0) {
            xmlParts.push(`          <OriginReadTimeout>${config.OriginReadTimeout}</OriginReadTimeout>`);
          }
          if (config.OriginKeepaliveTimeout !== void 0) {
            xmlParts.push(`          <OriginKeepaliveTimeout>${config.OriginKeepaliveTimeout}</OriginKeepaliveTimeout>`);
          }
          xmlParts.push("        </CustomOriginConfig>");
        } else if (origin.S3OriginConfig) {
          xmlParts.push("        <S3OriginConfig>");
          if (origin.S3OriginConfig.OriginAccessIdentity) {
            xmlParts.push(`          <OriginAccessIdentity>${this.escapeXml(origin.S3OriginConfig.OriginAccessIdentity)}</OriginAccessIdentity>`);
          } else {
            xmlParts.push("          <OriginAccessIdentity></OriginAccessIdentity>");
          }
          xmlParts.push("        </S3OriginConfig>");
        }
        if (origin.ConnectionAttempts !== void 0) {
          xmlParts.push(`        <ConnectionAttempts>${origin.ConnectionAttempts}</ConnectionAttempts>`);
        }
        if (origin.ConnectionTimeout !== void 0) {
          xmlParts.push(`        <ConnectionTimeout>${origin.ConnectionTimeout}</ConnectionTimeout>`);
        }
        if (origin.OriginShield) {
          xmlParts.push("        <OriginShield>");
          xmlParts.push(`          <Enabled>${origin.OriginShield.Enabled ? "true" : "false"}</Enabled>`);
          xmlParts.push("        </OriginShield>");
        } else {
          xmlParts.push("        <OriginShield>");
          xmlParts.push("          <Enabled>false</Enabled>");
          xmlParts.push("        </OriginShield>");
        }
        xmlParts.push(`        <OriginAccessControlId>${origin.OriginAccessControlId || ""}</OriginAccessControlId>`);
        xmlParts.push("      </member>");
      });
      xmlParts.push("    </Items>");
      xmlParts.push("  </Origins>");
    }
    if (distributionConfig.DefaultCacheBehavior) {
      xmlParts.push("  <DefaultCacheBehavior>");
      const behavior = distributionConfig.DefaultCacheBehavior;
      xmlParts.push(`    <TargetOriginId>${this.escapeXml(behavior.TargetOriginId)}</TargetOriginId>`);
      xmlParts.push(`    <ViewerProtocolPolicy>${behavior.ViewerProtocolPolicy}</ViewerProtocolPolicy>`);
      if (behavior.AllowedMethods) {
        xmlParts.push("    <AllowedMethods>");
        xmlParts.push(`      <Quantity>${behavior.AllowedMethods.length}</Quantity>`);
        xmlParts.push("      <Items>");
        behavior.AllowedMethods.forEach((method) => {
          xmlParts.push(`        <member>${method}</member>`);
        });
        xmlParts.push("      </Items>");
        if (behavior.CachedMethods) {
          xmlParts.push("      <CachedMethods>");
          xmlParts.push(`        <Quantity>${behavior.CachedMethods.length}</Quantity>`);
          xmlParts.push("        <Items>");
          behavior.CachedMethods.forEach((method) => {
            xmlParts.push(`          <member>${method}</member>`);
          });
          xmlParts.push("        </Items>");
          xmlParts.push("      </CachedMethods>");
        }
        xmlParts.push("    </AllowedMethods>");
      }
      xmlParts.push("    <ForwardedValues>");
      xmlParts.push(`      <QueryString>${behavior.QueryString ? "true" : "false"}</QueryString>`);
      xmlParts.push("      <Cookies>");
      xmlParts.push(`        <Forward>${behavior.CookiesForward || "none"}</Forward>`);
      if (behavior.CookiesWhitelistedNames && behavior.CookiesWhitelistedNames.length > 0) {
        xmlParts.push("        <WhitelistedNames>");
        xmlParts.push(`          <Quantity>${behavior.CookiesWhitelistedNames.length}</Quantity>`);
        xmlParts.push("          <Items>");
        behavior.CookiesWhitelistedNames.forEach((name) => {
          xmlParts.push(`            <member>${this.escapeXml(name)}</member>`);
        });
        xmlParts.push("          </Items>");
        xmlParts.push("        </WhitelistedNames>");
      }
      xmlParts.push("      </Cookies>");
      if (behavior.Headers && behavior.Headers.length > 0) {
        xmlParts.push("      <Headers>");
        xmlParts.push(`        <Quantity>${behavior.Headers.length}</Quantity>`);
        xmlParts.push("        <Items>");
        behavior.Headers.forEach((header) => {
          xmlParts.push(`          <member>${this.escapeXml(header)}</member>`);
        });
        xmlParts.push("        </Items>");
        xmlParts.push("      </Headers>");
      }
      xmlParts.push("    </ForwardedValues>");
      if (behavior.MinTTL !== void 0) {
        xmlParts.push(`    <MinTTL>${behavior.MinTTL}</MinTTL>`);
      }
      if (behavior.DefaultTTL !== void 0) {
        xmlParts.push(`    <DefaultTTL>${behavior.DefaultTTL}</DefaultTTL>`);
      }
      if (behavior.MaxTTL !== void 0) {
        xmlParts.push(`    <MaxTTL>${behavior.MaxTTL}</MaxTTL>`);
      }
      if (behavior.Compress !== void 0) {
        xmlParts.push(`    <Compress>${behavior.Compress ? "true" : "false"}</Compress>`);
      }
      xmlParts.push(`    <SmoothStreaming>${behavior.SmoothStreaming ? "true" : "false"}</SmoothStreaming>`);
      xmlParts.push("    <LambdaFunctionAssociations>");
      xmlParts.push("      <Quantity>0</Quantity>");
      xmlParts.push("    </LambdaFunctionAssociations>");
      xmlParts.push("    <FunctionAssociations>");
      xmlParts.push("      <Quantity>0</Quantity>");
      xmlParts.push("    </FunctionAssociations>");
      xmlParts.push(`    <FieldLevelEncryptionId>${behavior.FieldLevelEncryptionId || ""}</FieldLevelEncryptionId>`);
      if (behavior.GrpcConfig) {
        xmlParts.push("    <GrpcConfig>");
        xmlParts.push(`      <Enabled>${behavior.GrpcConfig.Enabled ? "true" : "false"}</Enabled>`);
        xmlParts.push("    </GrpcConfig>");
      } else {
        xmlParts.push("    <GrpcConfig>");
        xmlParts.push("      <Enabled>false</Enabled>");
        xmlParts.push("    </GrpcConfig>");
      }
      xmlParts.push("    <TrustedSigners>");
      xmlParts.push("      <Enabled>false</Enabled>");
      xmlParts.push("      <Quantity>0</Quantity>");
      xmlParts.push("    </TrustedSigners>");
      xmlParts.push("    <TrustedKeyGroups>");
      xmlParts.push("      <Enabled>false</Enabled>");
      xmlParts.push("      <Quantity>0</Quantity>");
      xmlParts.push("    </TrustedKeyGroups>");
      xmlParts.push("  </DefaultCacheBehavior>");
    }
    if (distributionConfig.PriceClass) {
      xmlParts.push(`  <PriceClass>${distributionConfig.PriceClass}</PriceClass>`);
    }
    xmlParts.push("  <Aliases>");
    if (distributionConfig.Aliases && distributionConfig.Aliases.length > 0) {
      xmlParts.push(`    <Quantity>${distributionConfig.Aliases.length}</Quantity>`);
      xmlParts.push("    <Items>");
      distributionConfig.Aliases.forEach((alias) => {
        xmlParts.push(`      <member>${this.escapeXml(alias)}</member>`);
      });
      xmlParts.push("    </Items>");
    } else {
      xmlParts.push("    <Quantity>0</Quantity>");
    }
    xmlParts.push("  </Aliases>");
    xmlParts.push("  <CacheBehaviors>");
    xmlParts.push("    <Quantity>0</Quantity>");
    xmlParts.push("  </CacheBehaviors>");
    xmlParts.push("  <CustomErrorResponses>");
    xmlParts.push("    <Quantity>0</Quantity>");
    xmlParts.push("  </CustomErrorResponses>");
    xmlParts.push("  <Logging>");
    if (distributionConfig.Logging && distributionConfig.Logging.Enabled) {
      xmlParts.push("    <Enabled>true</Enabled>");
      xmlParts.push("    <IncludeCookies>" + (distributionConfig.Logging.IncludeCookies ? "true" : "false") + "</IncludeCookies>");
      xmlParts.push("    <Bucket>" + (distributionConfig.Logging.Bucket || "") + "</Bucket>");
      xmlParts.push("    <Prefix>" + (distributionConfig.Logging.Prefix || "") + "</Prefix>");
    } else {
      xmlParts.push("    <Enabled>false</Enabled>");
      xmlParts.push("    <IncludeCookies>false</IncludeCookies>");
      xmlParts.push("    <Bucket></Bucket>");
      xmlParts.push("    <Prefix></Prefix>");
    }
    xmlParts.push("  </Logging>");
    if (distributionConfig.ViewerCertificate) {
      xmlParts.push("  <ViewerCertificate>");
      if (distributionConfig.ViewerCertificate.CloudFrontDefaultCertificate) {
        xmlParts.push(`    <CloudFrontDefaultCertificate>${distributionConfig.ViewerCertificate.CloudFrontDefaultCertificate ? "true" : "false"}</CloudFrontDefaultCertificate>`);
      }
      if (distributionConfig.ViewerCertificate.SSLSupportMethod) {
        xmlParts.push(`    <SSLSupportMethod>${distributionConfig.ViewerCertificate.SSLSupportMethod}</SSLSupportMethod>`);
      }
      if (distributionConfig.ViewerCertificate.MinimumProtocolVersion) {
        xmlParts.push(`    <MinimumProtocolVersion>${distributionConfig.ViewerCertificate.MinimumProtocolVersion}</MinimumProtocolVersion>`);
      }
      if (distributionConfig.ViewerCertificate.CertificateSource) {
        xmlParts.push(`    <CertificateSource>${distributionConfig.ViewerCertificate.CertificateSource}</CertificateSource>`);
      }
      xmlParts.push("  </ViewerCertificate>");
    }
    if (distributionConfig.Restrictions) {
      xmlParts.push("  <Restrictions>");
      xmlParts.push("    <GeoRestriction>");
      xmlParts.push(`      <RestrictionType>${distributionConfig.Restrictions.GeoRestriction.RestrictionType}</RestrictionType>`);
      xmlParts.push(`      <Quantity>${distributionConfig.Restrictions.GeoRestriction.Quantity}</Quantity>`);
      xmlParts.push("    </GeoRestriction>");
      xmlParts.push("  </Restrictions>");
    }
    xmlParts.push(`  <WebACLId>${distributionConfig.WebACLId || ""}</WebACLId>`);
    if (distributionConfig.HttpVersion) {
      xmlParts.push(`  <HttpVersion>${distributionConfig.HttpVersion}</HttpVersion>`);
    }
    if (distributionConfig.IsIPV6Enabled !== void 0) {
      xmlParts.push(`  <IsIPV6Enabled>${distributionConfig.IsIPV6Enabled ? "true" : "false"}</IsIPV6Enabled>`);
    }
    xmlParts.push("  <OriginGroups>");
    xmlParts.push("    <Quantity>0</Quantity>");
    xmlParts.push("  </OriginGroups>");
    xmlParts.push("  <Staging>false</Staging>");
    xmlParts.push("  <ContinuousDeploymentPolicyId></ContinuousDeploymentPolicyId>");
    xmlParts.push("</DistributionConfig>");
    return xmlParts.join("\n");
  }
  parseCloudFrontResponse(xmlBody, headers) {
    const result = {};
    if (headers && (headers.etag || headers.Etag)) {
      const etag = headers.etag || headers.Etag;
      result.ETag = etag.replace(/"/g, "");
    }
    if (headers && headers.location) {
      result.Location = headers.location;
    }
    const distributionMatch = /<Distribution[^>]*>([\s\S]*?)<\/Distribution>/.exec(xmlBody);
    if (distributionMatch) {
      const distributionXml = distributionMatch[1];
      result.Distribution = {};
      const idMatch = /<Id>(.*?)<\/Id>/.exec(distributionXml);
      if (idMatch) {
        result.Distribution.Id = idMatch[1];
      }
      const arnMatch = /<ARN>(.*?)<\/ARN>/.exec(distributionXml);
      if (arnMatch) {
        result.Distribution.ARN = arnMatch[1];
      }
      const statusMatch = /<Status>(.*?)<\/Status>/.exec(distributionXml);
      if (statusMatch) {
        result.Distribution.Status = statusMatch[1];
      }
      const domainMatch = /<DomainName>(.*?)<\/DomainName>/.exec(distributionXml);
      if (domainMatch) {
        result.Distribution.DomainName = domainMatch[1];
      }
      const lastModifiedMatch = /<LastModifiedTime>(.*?)<\/LastModifiedTime>/.exec(distributionXml);
      if (lastModifiedMatch) {
        result.Distribution.LastModifiedTime = lastModifiedMatch[1];
      }
      const distributionEnabledMatch = /<PriceClass>[^<]*<\/PriceClass>\s*<Enabled>(.*?)<\/Enabled>/.exec(distributionXml);
      if (distributionEnabledMatch) {
        const enabledValue = distributionEnabledMatch[1].trim();
        const isEnabled = enabledValue === "true";
        if (!result.Distribution.DistributionConfig) {
          result.Distribution.DistributionConfig = {};
        }
        result.Distribution.DistributionConfig.Enabled = isEnabled;
      } else {
        if (!result.Distribution.DistributionConfig) {
          result.Distribution.DistributionConfig = {};
        }
        result.Distribution.DistributionConfig.Enabled = false;
      }
    }
    return result;
  }
  handleCloudFrontError(response, _action) {
    let errorMessage = `AWS CloudFront API error: ${response.statusCode} ${response.status}`;
    try {
      const errorMatch = /<Message>(.*?)<\/Message>/.exec(response.body);
      if (errorMatch) {
        errorMessage += ` - ${errorMatch[1]}`;
      }
      const codeMatch = /<Code>(.*?)<\/Code>/.exec(response.body);
      if (codeMatch) {
        errorMessage += ` (${codeMatch[1]})`;
      }
    } catch (_parseError) {
      errorMessage += ` - Raw: ${response.body}`;
    }
    throw new Error(errorMessage);
  }
  escapeXml(unsafe) {
    return unsafe.replace(/[<>&'"]/g, function(c) {
      switch (c) {
        case "<":
          return "&lt;";
        case ">":
          return "&gt;";
        case "&":
          return "&amp;";
        case "'":
          return "&apos;";
        case '"':
          return "&quot;";
        default:
          return c;
      }
    });
  }
  getDistributionConfigForUpdate(distributionId) {
    const url = `https://cloudfront.amazonaws.com/2020-05-31/distribution/${distributionId}/config`;
    const response = import_aws.default.get(url, {
      service: "cloudfront",
      region: "us-east-1"
      // CloudFront is global but uses us-east-1
    });
    if (response.statusCode !== 200) {
      const error = this.parseCloudFrontResponse(response.body);
      throw new Error(`Failed to get distribution config: ${error.Error?.Code} - ${error.Error?.Message}`);
    }
    const result = this.parseDistributionConfigResponse(response.body, response.headers);
    return result;
  }
  parseDistributionConfigResponse(xmlBody, headers) {
    const result = {};
    if (headers && (headers.etag || headers.Etag)) {
      const etag = headers.etag || headers.Etag;
      result.ETag = etag.replace(/"/g, "");
    }
    const distributionConfigMatch = /<DistributionConfig[^>]*>([\s\S]*?)<\/DistributionConfig>/.exec(xmlBody);
    if (distributionConfigMatch) {
      const configXml = distributionConfigMatch[0];
      result.RawDistributionConfigXML = configXml;
      const enabledMatch = /<PriceClass>[^<]*<\/PriceClass>\s*<Enabled>(.*?)<\/Enabled>/.exec(configXml);
      if (enabledMatch) {
        const enabledValue = enabledMatch[1].trim();
        const isEnabled = enabledValue === "true";
        result.DistributionConfig = {
          Enabled: isEnabled
        };
        const callerRefMatch = /<CallerReference>(.*?)<\/CallerReference>/.exec(configXml);
        if (callerRefMatch) {
          result.DistributionConfig.CallerReference = callerRefMatch[1];
        }
      }
    }
    return result;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AWSCloudFrontEntity
});
