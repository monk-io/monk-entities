// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/aws-dynamo-db/base.ts
var base_exports = {};
__export(base_exports, {
  AWSDynamoDBEntity: () => AWSDynamoDBEntity
});
module.exports = __toCommonJS(base_exports);
var import_base = require("monkec/base");
var import_aws = __toESM(require("cloud/aws"));
var AWSDynamoDBEntity = class extends import_base.MonkEntity {
  constructor() {
    super(...arguments);
    __publicField(this, "region");
  }
  before() {
    this.region = this.definition.region;
  }
  makeDynamoDBRequest(action, body) {
    const url = `https://dynamodb.${this.region}.amazonaws.com/`;
    const options = {
      service: "dynamodb",
      region: this.region,
      headers: {
        "X-Amz-Target": `DynamoDB_20120810.${action}`,
        "Content-Type": "application/x-amz-json-1.0"
      },
      body: typeof body === "string" ? body : JSON.stringify(body),
      timeout: 30
    };
    try {
      const response = import_aws.default.post(url, options);
      if (response.statusCode >= 400) {
        let errorMessage = `DynamoDB API error: ${response.statusCode} ${response.status}`;
        try {
          const errorBody = JSON.parse(response.body);
          if (errorBody.message) {
            errorMessage += ` - ${errorBody.message}`;
          }
          if (errorBody.__type) {
            errorMessage += ` - Type: ${errorBody.__type}`;
          }
        } catch (parseError) {
          errorMessage += ` - Raw: ${response.body}`;
        }
        throw new Error(errorMessage);
      }
      if (response.body) {
        try {
          return JSON.parse(response.body);
        } catch (error) {
          throw new Error(`Failed to parse DynamoDB API response: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      return response;
    } catch (error) {
      throw new Error(`DynamoDB API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  waitForTableStatus(tableName, targetStatus, maxAttempts = 30, delaySeconds = 5) {
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        const response = this.makeDynamoDBRequest("DescribeTable", {
          TableName: tableName
        });
        const currentStatus = response.Table?.TableStatus;
        if (currentStatus === targetStatus) {
          return;
        }
        if (currentStatus === "DELETING" && targetStatus !== "DELETING") {
          throw new Error(`Table ${tableName} is being deleted`);
        }
        if (attempt < maxAttempts) {
          const delayMs = delaySeconds * 1e3;
          const start = Date.now();
          while (Date.now() - start < delayMs) {
          }
        }
      } catch (error) {
        if (error instanceof Error && error.message.includes("ResourceNotFoundException")) {
          if (targetStatus === "DELETING" || targetStatus === "DELETED") {
            return;
          }
        }
        throw error;
      }
    }
    throw new Error(`Table ${tableName} did not reach ${targetStatus} status within ${maxAttempts * delaySeconds} seconds`);
  }
  tableExists(tableName) {
    try {
      const response = this.makeDynamoDBRequest("DescribeTable", {
        TableName: tableName
      });
      return !!response.Table;
    } catch (error) {
      if (error instanceof Error && error.message.includes("ResourceNotFoundException")) {
        return false;
      }
      throw error;
    }
  }
  getTableInfo(tableName) {
    try {
      const response = this.makeDynamoDBRequest("DescribeTable", {
        TableName: tableName
      });
      return response.Table;
    } catch (error) {
      if (error instanceof Error && error.message.includes("ResourceNotFoundException")) {
        return null;
      }
      throw error;
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AWSDynamoDBEntity
});
