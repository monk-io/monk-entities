
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/aws-dynamo-db/table.ts
const base = require("aws-dynamo-db/base");
const AWSDynamoDBEntity = base.AWSDynamoDBEntity;
const MonkecBase = require("monkec/base");
const common = require("aws-dynamo-db/common");
const validateTableName = common.validateTableName;
const validateBillingMode = common.validateBillingMode;
const convertTagsToArray = common.convertTagsToArray;
const convertTagsToObject = common.convertTagsToObject;
var action2 = MonkecBase.action;
var _listTags_dec, _scanTable_dec, _deleteItem_dec, _getItem_dec, _putItem_dec, _getTableDetails_dec, _a, _init;
var _DynamoDBTable = class _DynamoDBTable extends (_a = AWSDynamoDBEntity, _getTableDetails_dec = [action2()], _putItem_dec = [action2()], _getItem_dec = [action2()], _deleteItem_dec = [action2()], _scanTable_dec = [action2()], _listTags_dec = [action2()], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  extractArrayFromIndexedFields(obj, fieldName) {
    const result = [];
    let index = 0;
    while (obj[`${fieldName}!${index}`] !== void 0) {
      result.push(obj[`${fieldName}!${index}`]);
      index++;
    }
    return result;
  }
  validateDefinition() {
    const attributeDefinitions = this.extractArrayFromIndexedFields(this.definition, "attribute_definitions");
    const keySchema = this.extractArrayFromIndexedFields(this.definition, "key_schema");
    if (!validateTableName(this.definition.table_name)) {
      throw new Error(`Invalid table name: ${this.definition.table_name}. Must be 3-255 characters and contain only letters, numbers, underscores, periods, and hyphens.`);
    }
    if (!attributeDefinitions || attributeDefinitions.length === 0) {
      throw new Error("At least one attribute definition is required");
    }
    if (!keySchema || keySchema.length === 0) {
      throw new Error("At least one key schema element is required");
    }
    if (!validateBillingMode(this.definition.billing_mode, this.definition.provisioned_throughput)) {
      throw new Error("Invalid billing mode configuration");
    }
  }
  buildTableSchema() {
    const attributeDefinitions = this.extractArrayFromIndexedFields(this.definition, "attribute_definitions");
    const keySchema = this.extractArrayFromIndexedFields(this.definition, "key_schema");
    const schema = {
      TableName: this.definition.table_name,
      AttributeDefinitions: attributeDefinitions,
      KeySchema: keySchema,
      BillingMode: this.definition.billing_mode || "PAY_PER_REQUEST"
    };
    if (this.definition.provisioned_throughput) {
      schema.ProvisionedThroughput = this.definition.provisioned_throughput;
    }
    const globalSecondaryIndexes = this.extractArrayFromIndexedFields(this.definition, "global_secondary_indexes");
    if (globalSecondaryIndexes.length > 0) {
      schema.GlobalSecondaryIndexes = globalSecondaryIndexes;
    }
    const localSecondaryIndexes = this.extractArrayFromIndexedFields(this.definition, "local_secondary_indexes");
    if (localSecondaryIndexes.length > 0) {
      schema.LocalSecondaryIndexes = localSecondaryIndexes;
    }
    if (this.definition.sse_specification) {
      schema.SSESpecification = this.definition.sse_specification;
    }
    if (this.definition.stream_specification) {
      schema.StreamSpecification = this.definition.stream_specification;
    }
    if (this.definition.table_class) {
      schema.TableClass = this.definition.table_class;
    }
    if (this.definition.deletion_protection_enabled !== void 0) {
      schema.DeletionProtectionEnabled = this.definition.deletion_protection_enabled;
    }
    if (this.definition.tags) {
      schema.Tags = convertTagsToArray(this.definition.tags);
    }
    return schema;
  }
  create() {
    this.validateDefinition();
    const existingTable = super.getTableInfo(this.definition.table_name);
    if (existingTable) {
      this.state = {
        table_name: existingTable.TableName,
        table_arn: existingTable.TableArn,
        table_status: existingTable.TableStatus,
        existing: true
      };
      return;
    }
    const tableSchema = this.buildTableSchema();
    const response = this.makeDynamoDBRequest("CreateTable", tableSchema);
    if (response.TableDescription) {
      this.state = {
        table_name: response.TableDescription.TableName,
        table_arn: response.TableDescription.TableArn,
        table_status: response.TableDescription.TableStatus,
        existing: false
      };
    } else {
      throw new Error("Unexpected response from CreateTable API");
    }
  }
  checkReadiness() {
    if (!this.state.table_name) {
      return false;
    }
    try {
      const tableInfo = super.getTableInfo(this.state.table_name);
      if (!tableInfo) {
        return false;
      }
      const isReady = tableInfo.TableStatus === "ACTIVE";
      this.state.table_status = tableInfo.TableStatus;
      return isReady;
    } catch (error) {
      return false;
    }
  }
  start() {
    if (!this.state.table_name) {
      throw new Error("Table not created yet");
    }
    super.waitForTableStatus(this.state.table_name, "ACTIVE", 60, 5);
  }
  stop() {
  }
  update() {
    if (!this.state.table_name) {
      throw new Error("Table not created yet");
    }
    const currentTable = super.getTableInfo(this.state.table_name);
    if (!currentTable) {
      throw new Error(`Table ${this.state.table_name} not found`);
    }
    const updateParams = {
      TableName: this.state.table_name
    };
    let hasChanges = false;
    if (this.definition.billing_mode && currentTable.BillingModeSummary?.BillingMode !== this.definition.billing_mode) {
      updateParams.BillingMode = this.definition.billing_mode;
      if (this.definition.billing_mode === "PROVISIONED" && this.definition.provisioned_throughput) {
        updateParams.ProvisionedThroughput = this.definition.provisioned_throughput;
      }
      hasChanges = true;
    }
    if (this.definition.stream_specification) {
      updateParams.StreamSpecification = this.definition.stream_specification;
      hasChanges = true;
    }
    if (this.definition.sse_specification) {
      updateParams.SSESpecification = this.definition.sse_specification;
      hasChanges = true;
    }
    if (this.definition.table_class) {
      updateParams.TableClass = this.definition.table_class;
      hasChanges = true;
    }
    if (this.definition.deletion_protection_enabled !== void 0) {
      updateParams.DeletionProtectionEnabled = this.definition.deletion_protection_enabled;
      hasChanges = true;
    }
    if (hasChanges) {
      const response = this.makeDynamoDBRequest("UpdateTable", updateParams);
      if (response.TableDescription) {
        this.state.table_status = response.TableDescription.TableStatus;
      }
    } else {
    }
    if (this.definition.point_in_time_recovery_enabled !== void 0) {
      this.updatePointInTimeRecovery();
    }
    if (this.definition.tags) {
      this.updateTags();
    }
  }
  delete() {
    if (!this.state.table_name) {
      return;
    }
    if (this.state.existing) {
      return;
    }
    try {
      this.makeDynamoDBRequest("DeleteTable", {
        TableName: this.state.table_name
      });
      this.state.table_status = "DELETING";
    } catch (error) {
      if (error instanceof Error && error.message.includes("ResourceNotFoundException")) {
        return;
      }
      throw error;
    }
  }
  getTableDetails() {
    if (!this.state.table_name) {
      throw new Error("Table not created yet");
    }
    const tableInfo = super.getTableInfo(this.state.table_name);
    if (tableInfo) {
    }
    return tableInfo;
  }
  putItem(args) {
    if (!this.state.table_name) {
      throw new Error("Table not created yet");
    }
    const itemJson = args?.item;
    if (!itemJson) {
      throw new Error("Item is required");
    }
    let item;
    try {
      item = typeof itemJson === "string" ? JSON.parse(itemJson) : itemJson;
    } catch (error) {
      throw new Error(`Invalid item JSON: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
    const params = {
      TableName: this.state.table_name,
      Item: item
    };
    this.makeDynamoDBRequest("PutItem", params);
  }
  getItem(args) {
    if (!this.state.table_name) {
      throw new Error("Table not created yet");
    }
    const keyJson = args?.key;
    if (!keyJson) {
      throw new Error("Key is required");
    }
    let key;
    try {
      key = typeof keyJson === "string" ? JSON.parse(keyJson) : keyJson;
    } catch (error) {
      throw new Error(`Invalid key JSON: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
    const params = {
      TableName: this.state.table_name,
      Key: key
    };
    const response = this.makeDynamoDBRequest("GetItem", params);
    if (response.Item) {
      return response.Item;
    }
    return null;
  }
  deleteItem(args) {
    if (!this.state.table_name) {
      throw new Error("Table not created yet");
    }
    const keyJson = args?.key;
    if (!keyJson) {
      throw new Error("Key is required");
    }
    let key;
    try {
      key = typeof keyJson === "string" ? JSON.parse(keyJson) : keyJson;
    } catch (error) {
      throw new Error(`Invalid key JSON: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
    const params = {
      TableName: this.state.table_name,
      Key: key
    };
    this.makeDynamoDBRequest("DeleteItem", params);
  }
  scanTable(args) {
    if (!this.state.table_name) {
      throw new Error("Table not created yet");
    }
    const limit = args?.limit;
    const params = {
      TableName: this.state.table_name
    };
    if (limit) {
      params.Limit = parseInt(limit, 10);
    }
    const response = this.makeDynamoDBRequest("Scan", params);
    return {
      Items: response.Items || [],
      Count: response.Count || 0,
      ScannedCount: response.ScannedCount || 0,
      LastEvaluatedKey: response.LastEvaluatedKey
    };
  }
  listTags() {
    if (!this.state.table_arn) {
      throw new Error("Table ARN not available");
    }
    const response = this.makeDynamoDBRequest("ListTagsOfResource", {
      ResourceArn: this.state.table_arn
    });
    const tags = convertTagsToObject(response.Tags);
    return tags || {};
  }
  updatePointInTimeRecovery() {
    if (!this.state.table_name) {
      return;
    }
    const params = {
      TableName: this.state.table_name,
      PointInTimeRecoverySpecification: {
        PointInTimeRecoveryEnabled: this.definition.point_in_time_recovery_enabled
      }
    };
    this.makeDynamoDBRequest("UpdateContinuousBackups", params);
  }
  updateTags() {
    if (!this.state.table_arn || !this.definition.tags) {
      return;
    }
    const currentTags = this.listTags();
    const newTags = this.definition.tags;
    const tagsToRemove = Object.keys(currentTags).filter((key) => !(key in newTags));
    if (tagsToRemove.length > 0) {
      this.makeDynamoDBRequest("UntagResource", {
        ResourceArn: this.state.table_arn,
        TagKeys: tagsToRemove
      });
    }
    const tagsToSet = convertTagsToArray(newTags);
    if (tagsToSet && tagsToSet.length > 0) {
      this.makeDynamoDBRequest("TagResource", {
        ResourceArn: this.state.table_arn,
        Tags: tagsToSet
      });
    }
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "getTableDetails", _getTableDetails_dec, _DynamoDBTable);
__decorateElement(_init, 1, "putItem", _putItem_dec, _DynamoDBTable);
__decorateElement(_init, 1, "getItem", _getItem_dec, _DynamoDBTable);
__decorateElement(_init, 1, "deleteItem", _deleteItem_dec, _DynamoDBTable);
__decorateElement(_init, 1, "scanTable", _scanTable_dec, _DynamoDBTable);
__decorateElement(_init, 1, "listTags", _listTags_dec, _DynamoDBTable);
__decoratorMetadata(_init, _DynamoDBTable);
__name(_DynamoDBTable, "DynamoDBTable");
__publicField(_DynamoDBTable, "readiness", { period: 10, initialDelay: 5, attempts: 30 });
var DynamoDBTable = _DynamoDBTable;



function main(def, state, ctx) {
  const entity = new DynamoDBTable(def, state, ctx);
  return entity.main(ctx);
}
