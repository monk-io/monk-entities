// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/aws-iam/common.ts
var common_exports = {};
__export(common_exports, {
  AWS_CONDITION_KEYS: () => AWS_CONDITION_KEYS,
  IAM_ACTIONS: () => IAM_ACTIONS,
  IAM_ERROR_CODES: () => IAM_ERROR_CODES,
  IAM_LIMITS: () => IAM_LIMITS,
  IAM_PATHS: () => IAM_PATHS,
  IAM_RESOURCE_TYPES: () => IAM_RESOURCE_TYPES,
  POLICY_CONDITIONS: () => POLICY_CONDITIONS,
  POLICY_EFFECTS: () => POLICY_EFFECTS,
  createBasicPolicyDocument: () => createBasicPolicyDocument,
  createIAMArn: () => createIAMArn,
  extractPolicyActions: () => extractPolicyActions,
  formatIAMResourceName: () => formatIAMResourceName,
  getPolicyStatementBySid: () => getPolicyStatementBySid,
  mergePolicyStatements: () => mergePolicyStatements,
  policyAllowsAction: () => policyAllowsAction,
  validatePolicyDocument: () => validatePolicyDocument
});
module.exports = __toCommonJS(common_exports);
var IAM_ACTIONS = {
  // Policy actions
  CREATE_POLICY: "CreatePolicy",
  GET_POLICY: "GetPolicy",
  UPDATE_POLICY: "UpdatePolicy",
  DELETE_POLICY: "DeletePolicy",
  LIST_POLICIES: "ListPolicies",
  CREATE_POLICY_VERSION: "CreatePolicyVersion",
  GET_POLICY_VERSION: "GetPolicyVersion",
  DELETE_POLICY_VERSION: "DeletePolicyVersion",
  LIST_POLICY_VERSIONS: "ListPolicyVersions",
  SET_DEFAULT_POLICY_VERSION: "SetDefaultPolicyVersion",
  LIST_ENTITIES_FOR_POLICY: "ListEntitiesForPolicy",
  // User actions
  CREATE_USER: "CreateUser",
  GET_USER: "GetUser",
  UPDATE_USER: "UpdateUser",
  DELETE_USER: "DeleteUser",
  LIST_USERS: "ListUsers",
  // Group actions
  CREATE_GROUP: "CreateGroup",
  GET_GROUP: "GetGroup",
  UPDATE_GROUP: "UpdateGroup",
  DELETE_GROUP: "DeleteGroup",
  LIST_GROUPS: "ListGroups",
  // Role actions
  CREATE_ROLE: "CreateRole",
  GET_ROLE: "GetRole",
  UPDATE_ROLE: "UpdateRole",
  DELETE_ROLE: "DeleteRole",
  LIST_ROLES: "ListRoles",
  // Attachment actions
  ATTACH_USER_POLICY: "AttachUserPolicy",
  DETACH_USER_POLICY: "DetachUserPolicy",
  ATTACH_GROUP_POLICY: "AttachGroupPolicy",
  DETACH_GROUP_POLICY: "DetachGroupPolicy",
  ATTACH_ROLE_POLICY: "AttachRolePolicy",
  DETACH_ROLE_POLICY: "DetachRolePolicy",
  // Access key actions
  CREATE_ACCESS_KEY: "CreateAccessKey",
  DELETE_ACCESS_KEY: "DeleteAccessKey",
  LIST_ACCESS_KEYS: "ListAccessKeys",
  UPDATE_ACCESS_KEY: "UpdateAccessKey",
  // Policy simulation
  SIMULATE_PRINCIPAL_POLICY: "SimulatePrincipalPolicy",
  SIMULATE_CUSTOM_POLICY: "SimulateCustomPolicy"
};
var POLICY_EFFECTS = {
  ALLOW: "Allow",
  DENY: "Deny"
};
var POLICY_CONDITIONS = {
  // String conditions
  STRING_EQUALS: "StringEquals",
  STRING_NOT_EQUALS: "StringNotEquals",
  STRING_EQUALS_IGNORE_CASE: "StringEqualsIgnoreCase",
  STRING_NOT_EQUALS_IGNORE_CASE: "StringNotEqualsIgnoreCase",
  STRING_LIKE: "StringLike",
  STRING_NOT_LIKE: "StringNotLike",
  // Numeric conditions
  NUMERIC_EQUALS: "NumericEquals",
  NUMERIC_NOT_EQUALS: "NumericNotEquals",
  NUMERIC_LESS_THAN: "NumericLessThan",
  NUMERIC_LESS_THAN_EQUALS: "NumericLessThanEquals",
  NUMERIC_GREATER_THAN: "NumericGreaterThan",
  NUMERIC_GREATER_THAN_EQUALS: "NumericGreaterThanEquals",
  // Date conditions
  DATE_EQUALS: "DateEquals",
  DATE_NOT_EQUALS: "DateNotEquals",
  DATE_LESS_THAN: "DateLessThan",
  DATE_LESS_THAN_EQUALS: "DateLessThanEquals",
  DATE_GREATER_THAN: "DateGreaterThan",
  DATE_GREATER_THAN_EQUALS: "DateGreaterThanEquals",
  // Boolean condition
  BOOL: "Bool",
  // Binary conditions
  BINARY_EQUALS: "BinaryEquals",
  // IP address conditions
  IP_ADDRESS: "IpAddress",
  NOT_IP_ADDRESS: "NotIpAddress",
  // ARN conditions
  ARN_EQUALS: "ArnEquals",
  ARN_NOT_EQUALS: "ArnNotEquals",
  ARN_LIKE: "ArnLike",
  ARN_NOT_LIKE: "ArnNotLike"
};
var AWS_CONDITION_KEYS = {
  // Global condition keys
  CURRENT_TIME: "aws:CurrentTime",
  EPOCH_TIME: "aws:EpochTime",
  MULTI_FACTOR_AUTH: "aws:MultiFactorAuth",
  MULTI_FACTOR_AUTH_AGE: "aws:MultiFactorAuthAge",
  PRINCIPAL_ARN: "aws:PrincipalArn",
  PRINCIPAL_TYPE: "aws:PrincipalType",
  REFERER: "aws:Referer",
  REQUESTED_REGION: "aws:RequestedRegion",
  SECURE_TRANSPORT: "aws:SecureTransport",
  SOURCE_IP: "aws:SourceIp",
  USER_AGENT: "aws:UserAgent",
  USERID: "aws:userid",
  USERNAME: "aws:username",
  // Service-specific condition keys
  S3_BUCKET: "s3:Bucket",
  S3_OBJECT_KEY: "s3:Object",
  EC2_INSTANCE_TYPE: "ec2:InstanceType",
  EC2_REGION: "ec2:Region",
  IAM_POLICY_ARN: "iam:PolicyArn"
};
var IAM_RESOURCE_TYPES = {
  POLICY: "policy",
  USER: "user",
  GROUP: "group",
  ROLE: "role",
  ACCESS_KEY: "access-key",
  MFA_DEVICE: "mfa",
  SAML_PROVIDER: "saml-provider",
  OIDC_PROVIDER: "oidc-provider",
  SERVER_CERTIFICATE: "server-certificate"
};
var IAM_PATHS = {
  ROOT: "/",
  SERVICE_ROLE: "/service-role/",
  APPLICATION: "/application/"
};
var IAM_LIMITS = {
  POLICY_SIZE_MAX: 6144,
  // 6KB
  POLICY_VERSIONS_MAX: 5,
  POLICIES_PER_USER_MAX: 10,
  POLICIES_PER_GROUP_MAX: 10,
  POLICIES_PER_ROLE_MAX: 10,
  USERS_PER_ACCOUNT_MAX: 5e3,
  GROUPS_PER_ACCOUNT_MAX: 300,
  ROLES_PER_ACCOUNT_MAX: 1e3,
  POLICIES_PER_ACCOUNT_MAX: 1500,
  ACCESS_KEYS_PER_USER_MAX: 2
};
var IAM_ERROR_CODES = {
  ACCESS_DENIED: "AccessDenied",
  ALREADY_EXISTS: "EntityAlreadyExists",
  CONFLICT: "Conflict",
  INVALID_INPUT: "InvalidInput",
  LIMIT_EXCEEDED: "LimitExceeded",
  MALFORMED_POLICY_DOCUMENT: "MalformedPolicyDocument",
  NO_SUCH_ENTITY: "NoSuchEntity",
  POLICY_EVALUATION_EXCEPTION: "PolicyEvaluationException",
  SERVICE_FAILURE: "ServiceFailure",
  THROTTLING: "Throttling",
  VALIDATION_ERROR: "ValidationError"
};
function createIAMArn(accountId, resourceType, resourceName, path = "/") {
  return `arn:aws:iam::${accountId}:${resourceType}${path}${resourceName}`;
}
function validatePolicyDocument(policyDoc) {
  try {
    if (typeof policyDoc === "string") {
      policyDoc = JSON.parse(policyDoc);
    }
    if (!policyDoc.Version) {
      return false;
    }
    if (!policyDoc.Statement || !Array.isArray(policyDoc.Statement)) {
      return false;
    }
    for (const statement of policyDoc.Statement) {
      if (!statement.Effect || !statement.Action) {
        return false;
      }
      if (statement.Effect !== POLICY_EFFECTS.ALLOW && statement.Effect !== POLICY_EFFECTS.DENY) {
        return false;
      }
    }
    return true;
  } catch (error) {
    return false;
  }
}
function createBasicPolicyDocument(effect, actions, resources, conditions) {
  const statement = {
    Effect: effect,
    Action: Array.isArray(actions) ? actions : [actions],
    Resource: Array.isArray(resources) ? resources : [resources]
  };
  if (conditions) {
    statement.Condition = conditions;
  }
  return {
    Version: "2012-10-17",
    Statement: [statement]
  };
}
function mergePolicyStatements(statements) {
  return {
    Version: "2012-10-17",
    Statement: statements
  };
}
function formatIAMResourceName(name) {
  return name.replace(/[^a-zA-Z0-9+=,.@-]/g, "");
}
function getPolicyStatementBySid(policyDoc, sid) {
  try {
    if (typeof policyDoc === "string") {
      policyDoc = JSON.parse(policyDoc);
    }
    if (!policyDoc.Statement || !Array.isArray(policyDoc.Statement)) {
      return null;
    }
    return policyDoc.Statement.find((stmt) => stmt.Sid === sid) || null;
  } catch (error) {
    return null;
  }
}
function extractPolicyActions(policyDoc) {
  try {
    if (typeof policyDoc === "string") {
      policyDoc = JSON.parse(policyDoc);
    }
    if (!policyDoc.Statement || !Array.isArray(policyDoc.Statement)) {
      return [];
    }
    const actions = [];
    for (const statement of policyDoc.Statement) {
      if (statement.Action) {
        if (Array.isArray(statement.Action)) {
          actions.push(...statement.Action);
        } else {
          actions.push(statement.Action);
        }
      }
    }
    return [...new Set(actions)];
  } catch (error) {
    return [];
  }
}
function policyAllowsAction(policyDoc, action) {
  try {
    if (typeof policyDoc === "string") {
      policyDoc = JSON.parse(policyDoc);
    }
    if (!policyDoc.Statement || !Array.isArray(policyDoc.Statement)) {
      return false;
    }
    for (const statement of policyDoc.Statement) {
      if (statement.Effect === POLICY_EFFECTS.ALLOW && statement.Action) {
        const actions = Array.isArray(statement.Action) ? statement.Action : [statement.Action];
        for (const policyAction of actions) {
          if (policyAction === "*" || policyAction === action) {
            return true;
          }
          if (policyAction.endsWith("*") && action.startsWith(policyAction.slice(0, -1))) {
            return true;
          }
        }
      }
    }
    return false;
  } catch (error) {
    return false;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AWS_CONDITION_KEYS,
  IAM_ACTIONS,
  IAM_ERROR_CODES,
  IAM_LIMITS,
  IAM_PATHS,
  IAM_RESOURCE_TYPES,
  POLICY_CONDITIONS,
  POLICY_EFFECTS,
  createBasicPolicyDocument,
  createIAMArn,
  extractPolicyActions,
  formatIAMResourceName,
  getPolicyStatementBySid,
  mergePolicyStatements,
  policyAllowsAction,
  validatePolicyDocument
});
