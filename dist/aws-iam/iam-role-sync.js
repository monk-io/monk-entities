
// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/aws-iam/role.ts
const base = require("aws-iam/base");
const AWSIAMEntity = base.AWSIAMEntity;
var _IAMRole = class _IAMRole extends AWSIAMEntity {
  checkReadiness() {
    try {
      const roleInfo = this.checkRoleExists(this.definition.role_name);
      if (!roleInfo?.Role) {
        return false;
      }
      if (!this.state.role_arn) {
        return false;
      }
      if (this.definition.attached_policies && this.definition.attached_policies.length > 0) {
        const attachedPolicies = this.getAttachedPolicies();
        for (const expectedPolicy of this.definition.attached_policies) {
          if (!attachedPolicies.includes(expectedPolicy)) {
            return false;
          }
        }
      }
      return true;
    } catch (error) {
      return false;
    }
  }
  getPolicyName() {
    return this.definition.role_name;
  }
  getRoleName() {
    return this.definition.role_name;
  }
  customJSONStringify(obj) {
    if (obj === null) return "null";
    if (typeof obj === "undefined") return "undefined";
    if (typeof obj === "string") return '"' + obj.replace(/"/g, '\\"') + '"';
    if (typeof obj === "number" || typeof obj === "boolean") return String(obj);
    if (Array.isArray(obj)) {
      const items = obj.map((item) => this.customJSONStringify(item));
      return "[" + items.join(",") + "]";
    }
    if (typeof obj === "object") {
      const normalized = this.normalizeIndexedObject(obj);
      const keys = Object.keys(normalized);
      const items = keys.map((key) => '"' + key + '":' + this.customJSONStringify(normalized[key]));
      return "{" + items.join(",") + "}";
    }
    return String(obj);
  }
  normalizeIndexedObject(obj) {
    const result = {};
    const arrayGroups = {};
    for (const [key, value] of Object.entries(obj)) {
      const match = key.match(/^(.+)!(\d+)$/);
      if (match) {
        const baseKey = match[1];
        const index = parseInt(match[2]);
        if (!arrayGroups[baseKey]) {
          arrayGroups[baseKey] = [];
        }
        arrayGroups[baseKey][index] = value;
      } else {
        result[key] = value;
      }
    }
    for (const [baseKey, array] of Object.entries(arrayGroups)) {
      result[baseKey] = array.filter((item) => item !== void 0);
    }
    return result;
  }
  create() {
    const existing = this.checkRoleExists(this.definition.role_name);
    if (existing?.Role) {
      this.state = {
        role_arn: existing.Role.Arn,
        role_id: existing.Role.RoleId,
        create_date: existing.Role.CreateDate,
        existing: true
      };
      this.managePolicyAttachments();
      return;
    }
    const assumeRolePolicyDocument = typeof this.definition.assume_role_policy_document === "string" ? this.definition.assume_role_policy_document : this.customJSONStringify(this.definition.assume_role_policy_document);
    const params = {
      RoleName: this.definition.role_name,
      AssumeRolePolicyDocument: assumeRolePolicyDocument
    };
    if (this.definition.path) {
      params.Path = this.definition.path;
    }
    if (this.definition.role_description) {
      params.Description = this.definition.role_description;
    }
    if (this.definition.max_session_duration) {
      params.MaxSessionDuration = this.definition.max_session_duration;
    }
    if (this.definition.tags && Object.keys(this.definition.tags).length > 0) {
      let tagIndex = 1;
      for (const [key, value] of Object.entries(this.definition.tags)) {
        params[`Tags.member.${tagIndex}.Key`] = key;
        params[`Tags.member.${tagIndex}.Value`] = value;
        tagIndex++;
      }
    }
    try {
      const response = this.makeAWSRequest("POST", "CreateRole", params);
      if (response.Role) {
        this.state = {
          role_arn: response.Role.Arn,
          role_id: response.Role.RoleId,
          create_date: response.Role.CreateDate
        };
        this.managePolicyAttachments();
      } else {
        throw new Error("No role information in CreateRole response");
      }
    } catch (error) {
      throw new Error(`Failed to create IAM Role ${this.definition.role_name}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  update() {
    if (!this.state.role_arn) {
      throw new Error("Role ARN not available. Role may not exist.");
    }
    const assumeRolePolicyDocument = typeof this.definition.assume_role_policy_document === "string" ? this.definition.assume_role_policy_document : this.customJSONStringify(this.definition.assume_role_policy_document);
    try {
      this.makeAWSRequest("POST", "UpdateAssumeRolePolicy", {
        RoleName: this.definition.role_name,
        PolicyDocument: assumeRolePolicyDocument
      });
      if (this.definition.role_description !== void 0) {
        this.makeAWSRequest("POST", "UpdateRole", {
          RoleName: this.definition.role_name,
          Description: this.definition.role_description,
          MaxSessionDuration: this.definition.max_session_duration || 3600
        });
      }
      this.updatePolicyAttachments();
    } catch (error) {
      throw new Error(`Failed to update IAM Role ${this.definition.role_name}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  delete() {
    if (!this.state.role_arn) {
      return;
    }
    try {
      const attachedPolicies = this.getAttachedPolicies();
      for (const policyArn of attachedPolicies) {
        this.detachPolicyFromRoleStrict(policyArn);
      }
      const inlinePolicies = this.getInlinePolicies();
      for (const policyName of inlinePolicies) {
        this.deleteInlinePolicyStrict(policyName);
      }
      this.makeAWSRequest("POST", "DeleteRole", {
        RoleName: this.definition.role_name
      });
    } catch (error) {
      throw new Error(`Failed to delete IAM Role ${this.definition.role_name}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  checkRoleExists(roleName) {
    try {
      const result = this.makeAWSRequest("POST", "GetRole", {
        RoleName: roleName
      });
      return result;
    } catch (error) {
      return null;
    }
  }
  attachPolicyToRole(policyArn) {
    try {
      this.makeAWSRequest("POST", "AttachRolePolicy", {
        RoleName: this.definition.role_name,
        PolicyArn: policyArn
      });
    } catch (error) {
      throw new Error(`Failed to attach policy ${policyArn} to role ${this.definition.role_name}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  detachPolicyFromRole(policyArn) {
    try {
      this.makeAWSRequest("POST", "DetachRolePolicy", {
        RoleName: this.definition.role_name,
        PolicyArn: policyArn
      });
    } catch (error) {
    }
  }
  detachPolicyFromRoleStrict(policyArn) {
    try {
      this.makeAWSRequest("POST", "DetachRolePolicy", {
        RoleName: this.definition.role_name,
        PolicyArn: policyArn
      });
    } catch (error) {
      throw new Error(`Failed to detach policy ${policyArn} from role ${this.definition.role_name}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  getAttachedPolicies() {
    try {
      const result = this.makeAWSRequest("POST", "ListAttachedRolePolicies", {
        RoleName: this.definition.role_name
      });
      if (result.AttachedPolicies) {
        return result.AttachedPolicies.map((policy) => policy.PolicyArn);
      }
      return [];
    } catch (error) {
      return [];
    }
  }
  getInlinePolicies() {
    try {
      const result = this.makeAWSRequest("POST", "ListRolePolicies", {
        RoleName: this.definition.role_name
      });
      if (result.PolicyNames) {
        return result.PolicyNames;
      }
      return [];
    } catch (error) {
      return [];
    }
  }
  deleteInlinePolicyStrict(policyName) {
    try {
      this.makeAWSRequest("POST", "DeleteRolePolicy", {
        RoleName: this.definition.role_name,
        PolicyName: policyName
      });
    } catch (error) {
      throw new Error(`Failed to delete inline policy ${policyName} from role ${this.definition.role_name}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  managePolicyAttachments() {
    if (!this.definition.attached_policies || this.definition.attached_policies.length === 0) {
      return;
    }
    for (const policyArn of this.definition.attached_policies) {
      this.attachPolicyToRole(policyArn);
    }
  }
  updatePolicyAttachments() {
    const currentPolicies = this.getAttachedPolicies();
    const desiredPolicies = this.definition.attached_policies || [];
    for (const currentPolicy of currentPolicies) {
      if (!desiredPolicies.includes(currentPolicy)) {
        this.detachPolicyFromRole(currentPolicy);
      }
    }
    for (const desiredPolicy of desiredPolicies) {
      if (!currentPolicies.includes(desiredPolicy)) {
        this.attachPolicyToRole(desiredPolicy);
      }
    }
  }
};
__name(_IAMRole, "IAMRole");
// Customize readiness check parameters
__publicField(_IAMRole, "readiness", { period: 5, initialDelay: 5, attempts: 10 });
var IAMRole = _IAMRole;



function main(def, state, ctx) {
  const entity = new IAMRole(def, state, ctx);
  return entity.main(ctx);
}
