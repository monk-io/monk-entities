
// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/digitalocean-database/apiToken.ts
const base = require("monkec/base");
const MonkEntity = base.MonkEntity;
const secret = require("secret");
const cli = require("cli");
var digitalocean = __require("cloud/digitalocean");
var _ApiToken = class _ApiToken extends MonkEntity {
  getEntityName() {
    return "api-token";
  }
  create() {
    const tokenName = this.definition.name || `monk-do-token-${Date.now()}`;
    const body = JSON.stringify({
      name: tokenName,
      type: "read_write"
    });
    const resp = digitalocean.post("/v2/tokens", {
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json"
      },
      body
    });
    if (resp.statusCode < 200 || resp.statusCode >= 300) {
      throw new Error(`DO API error: ${resp.statusCode} ${resp.status} - ${resp.body || ""}`);
    }
    const data = resp.body ? JSON.parse(resp.body) : {};
    const token = data.token || data.access_token || data;
    if (!token || typeof token !== "string") {
      throw new Error(`Unexpected DO response for token creation: ${resp.body || ""}`);
    }
    this.state.id = data.id || tokenName;
    this.state.token = token;
    this.state.existing = true;
    secret.set("do-api-token", token);
    cli.output(`Created API token and stored into secret (do-api-token)`);
  }
  delete() {
    if (!this.state.id) {
      cli.output("No API token id in state; nothing to delete.");
      return;
    }
    cli.output("API token cleanup: tokens can be revoked through DigitalOcean web interface");
    this.state.id = void 0;
    this.state.token = void 0;
    this.state.existing = false;
    cli.output(`API token state cleared`);
  }
  checkReadiness() {
    return !!this.state.token;
  }
};
__name(_ApiToken, "ApiToken");
__publicField(_ApiToken, "readiness", { period: 5, initialDelay: 1, attempts: 10 });
var ApiToken = _ApiToken;



function main(def, state, ctx) {
  const entity = new ApiToken(def, state, ctx);
  return entity.main(ctx);
}
