// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/digitalocean-database/common.ts
var common_exports = {};
__export(common_exports, {
  BASE_URL: () => BASE_URL,
  getApiToken: () => getApiToken,
  validateDatabaseEngine: () => validateDatabaseEngine,
  validateDatabaseRegion: () => validateDatabaseRegion,
  validateDatabaseSize: () => validateDatabaseSize
});
module.exports = __toCommonJS(common_exports);
var import_secret = __toESM(require("secret"));
var BASE_URL = "https://api.digitalocean.com/v2";
function getApiToken(secretRef) {
  const token = import_secret.default.get(secretRef);
  if (!token) {
    throw new Error(`Failed to retrieve DigitalOcean API token from secret: ${secretRef}`);
  }
  return token;
}
function validateDatabaseEngine(engine) {
  const validEngines = ["mysql", "pg", "redis", "mongodb", "kafka", "opensearch"];
  if (!validEngines.includes(engine)) {
    throw new Error(`Invalid database engine: ${engine}. Valid engines: ${validEngines.join(", ")}`);
  }
  return engine;
}
function validateDatabaseRegion(region) {
  const validRegions = [
    "ams3",
    "blr1",
    "fra1",
    "lon1",
    "nyc1",
    "nyc3",
    "sfo3",
    "sgp1",
    "tor1",
    "syd1"
  ];
  if (!validRegions.includes(region)) {
    throw new Error(`Invalid database region: ${region}. Valid regions: ${validRegions.join(", ")}`);
  }
  return region;
}
function validateDatabaseSize(size) {
  const validSizes = [
    "db-s-1vcpu-1gb",
    "db-s-1vcpu-2gb",
    "db-s-2vcpu-4gb",
    "db-s-4vcpu-8gb",
    "db-s-6vcpu-16gb",
    "db-s-8vcpu-32gb"
  ];
  if (!validSizes.includes(size)) {
    throw new Error(`Invalid database size: ${size}. Valid sizes: ${validSizes.join(", ")}`);
  }
  return size;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BASE_URL,
  getApiToken,
  validateDatabaseEngine,
  validateDatabaseRegion,
  validateDatabaseSize
});
