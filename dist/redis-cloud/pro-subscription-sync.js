
// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// input/redis-cloud/proSubscription.ts
const cli = require("cli");
const base = require("redis-cloud/base");
const RedisCloudEntity = base.RedisCloudEntity;
var _ProSubscription = class _ProSubscription extends RedisCloudEntity {
  /**
   * Get subscription prefix for API calls (essentials uses /fixed)
   */
  getSubscriptionPrefix() {
    return "";
  }
  /**
   * Make authenticated HTTP request to Redis Cloud API
   */
  makeRequest(method, path, body) {
    try {
      const response = this.httpClient.request(method, path, { body });
      if (!response.ok) {
        const errorBody = typeof response.data === "string" ? response.data : JSON.stringify(response.data);
        throw new Error(`Redis Cloud API error: ${response.statusCode} ${response.status}. Body: ${errorBody || response.raw}`);
      }
      return response.data;
    } catch (error) {
      throw new Error(`${method} request to ${path} failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  getEntityName() {
    return `Redis Cloud Subscription: ${this.definition.name}`;
  }
  /**
   * Select the appropriate payment method
   */
  selectPaymentMethod() {
    if (this.definition.payment_method_id) {
      return this.definition.payment_method_id;
    }
    if (!this.definition.payment_method_type) {
      return void 0;
    }
    const paymentMethodsData = this.makeRequest("GET", "/payment-methods");
    const paymentMethods = paymentMethodsData.paymentMethods || [];
    for (const paymentMethod of paymentMethods) {
      if (paymentMethod.type === this.definition.payment_method_type) {
        cli.output(`Selected payment method: ${JSON.stringify(paymentMethod)}`);
        return paymentMethod.id;
      }
    }
    throw new Error(`No matching payment method found for type: ${this.definition.payment_method_type}`);
  }
  /**
   * Create the subscription body for API requests
   */
  createSubscriptionBody() {
    const paymentMethodId = this.selectPaymentMethod();
    return {
      name: this.definition.name,
      paymentMethod: this.definition.payment_method,
      paymentMethodId
    };
  }
  /**
   * Sync subscription with Redis Cloud API
   */
  syncSubscription(isUpdate = false) {
    const subscriptionPrefix = this.getSubscriptionPrefix();
    const body = this.createSubscriptionBody();
    let response;
    if (isUpdate && this.state.id) {
      response = this.makeRequest("PUT", `${subscriptionPrefix}/subscriptions/${this.state.id}`, body);
    } else {
      response = this.makeRequest("POST", `${subscriptionPrefix}/subscriptions`, body);
    }
    cli.output(`Subscription API response: ${JSON.stringify(response)}`);
    const task = this.waitForTask(response.taskId);
    const resourceId = task.response.resourceId;
    const subscriptionData = this.makeRequest("GET", `${subscriptionPrefix}/subscriptions/${resourceId}`);
    cli.output(`Subscription details: ${JSON.stringify(subscriptionData)}`);
    const newState = {
      id: subscriptionData.id,
      name: subscriptionData.name,
      status: subscriptionData.status,
      ready: subscriptionData.status === "active",
      payment_method_id: subscriptionData.paymentMethodId,
      existing: false
    };
    return newState;
  }
  /**
   * Delete all databases in the subscription before deletion
   */
  deleteSubscriptionDatabases() {
    const subscriptionPrefix = this.getSubscriptionPrefix();
    if (!this.state.id) {
      return;
    }
    const databasesData = this.makeRequest("GET", `${subscriptionPrefix}/subscriptions/${this.state.id}/databases`);
    const databases = databasesData.subscription?.databases || [];
    for (const database of databases) {
      cli.output(`Deleting database: ${database.name} (ID: ${database.databaseId})`);
      const deleteResponse = this.makeRequest(
        "DELETE",
        `${subscriptionPrefix}/subscriptions/${this.state.id}/databases/${database.databaseId}`
      );
      if (deleteResponse.taskId) {
        this.waitForTask(deleteResponse.taskId);
      }
    }
  }
  create() {
    cli.output(`Creating Redis Cloud subscription: ${this.definition.name}`);
    try {
      const subscriptionPrefix = this.getSubscriptionPrefix();
      const existingSubscriptions = this.makeRequest("GET", `${subscriptionPrefix}/subscriptions`);
      for (const sub of existingSubscriptions.subscriptions || []) {
        if (sub.name === this.definition.name) {
          cli.output(`Subscription ${this.definition.name} already exists with ID: ${sub.id}`);
          this.state = {
            id: sub.id,
            name: sub.name,
            status: sub.status,
            ready: sub.status === "active",
            payment_method_id: sub.paymentMethodId,
            existing: true
          };
          return;
        }
      }
      this.state = this.syncSubscription(false);
      cli.output(`Successfully created subscription with ID: ${this.state.id}`);
    } catch (error) {
      throw new Error(`Failed to create subscription: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  update() {
    if (!this.state.id) {
      this.create();
      return;
    }
    cli.output(`Updating Redis Cloud subscription: ${this.definition.name} (ID: ${this.state.id})`);
    try {
      this.state = { ...this.state, ...this.syncSubscription(true) };
      cli.output(`Successfully updated subscription with ID: ${this.state.id}`);
    } catch (error) {
      throw new Error(`Failed to update subscription: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  delete() {
    if (!this.state.id) {
      cli.output("No subscription to delete");
      return;
    }
    if (this.state.existing) {
      cli.output("Subscription existed before entity management - not deleting");
      return;
    }
    cli.output(`Deleting Redis Cloud subscription: ${this.definition.name} (ID: ${this.state.id})`);
    try {
      this.deleteSubscriptionDatabases();
      const subscriptionPrefix = this.getSubscriptionPrefix();
      const response = this.makeRequest("DELETE", `${subscriptionPrefix}/subscriptions/${this.state.id}`);
      if (response.taskId) {
        this.waitForTask(response.taskId);
      }
      this.state = {};
      cli.output("Successfully deleted subscription");
    } catch (error) {
      throw new Error(`Failed to delete subscription: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  checkReadiness() {
    if (!this.state.id) {
      return false;
    }
    try {
      const subscriptionPrefix = this.getSubscriptionPrefix();
      const subscriptionData = this.makeRequest("GET", `${subscriptionPrefix}/subscriptions/${this.state.id}`);
      const isReady = subscriptionData.status === "active";
      this.state.ready = isReady;
      this.state.status = subscriptionData.status;
      return isReady;
    } catch (error) {
      cli.output(`Error checking subscription readiness: ${error instanceof Error ? error.message : "Unknown error"}`);
      return false;
    }
  }
};
__name(_ProSubscription, "ProSubscription");
var ProSubscription = _ProSubscription;



function main(def, state, ctx) {
  const entity = new ProSubscription(def, state, ctx);
  return entity.main(ctx);
}
