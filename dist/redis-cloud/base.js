// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/redis-cloud/base.ts
var base_exports = {};
__export(base_exports, {
  RedisCloudEntity: () => RedisCloudEntity
});
module.exports = __toCommonJS(base_exports);
var import_base = require("monkec/base");
var import_http_client = require("monkec/http-client");

// input/redis-cloud/common.ts
var import_secret = __toESM(require("secret"));
var BASE_URL = "https://api.redislabs.com/v1";
var CONTENT_TYPE = "application/json";
var DEFAULT_TASK_TIMEOUT = 600;
var DEFAULT_POLLING_INTERVAL = 5e3;
function getCredentials(secretRef) {
  const accessKeySecret = import_secret.default.get(secretRef + "_access_key");
  const secretKeySecret = import_secret.default.get(secretRef + "_secret_key");
  if (!accessKeySecret || !secretKeySecret) {
    throw new Error(`Redis Cloud credentials not found. Expected secrets: ${secretRef}_access_key and ${secretRef}_secret_key`);
  }
  return { accessKey: accessKeySecret, secretKey: secretKeySecret };
}

// input/redis-cloud/base.ts
var import_cli = __toESM(require("cli"));
var import_secret2 = __toESM(require("secret"));
var RedisCloudEntity = class extends import_base.MonkEntity {
  constructor() {
    super(...arguments);
    /**
     * HTTP client configured for Redis Cloud API
     */
    __publicField(this, "httpClient");
    /**
     * Authentication credentials
     */
    __publicField(this, "credentials");
  }
  /**
   * Initialize authentication and HTTP client before any operations
   */
  before() {
    this.credentials = this.getEntityCredentials();
    this.httpClient = new import_http_client.HttpClient({
      baseUrl: BASE_URL,
      headers: {
        "x-api-key": this.credentials.accessKey,
        "x-api-secret-key": this.credentials.secretKey,
        "content-type": CONTENT_TYPE
      },
      parseJson: true,
      stringifyJson: true
    });
  }
  /**
   * Get credentials using either new or legacy authentication method
   */
  getEntityCredentials() {
    if (this.definition.account_key_secret && this.definition.user_key_secret) {
      const accountKey = import_secret2.default.get(this.definition.account_key_secret);
      const userKey = import_secret2.default.get(this.definition.user_key_secret);
      if (!accountKey || !userKey) {
        throw new Error(`Redis Cloud credentials not found. Expected secrets: ${this.definition.account_key_secret} and ${this.definition.user_key_secret}`);
      }
      return { accessKey: accountKey, secretKey: userKey };
    }
    if (this.definition.secret_ref) {
      return getCredentials(this.definition.secret_ref);
    }
    throw new Error("Redis Cloud authentication not configured. Provide either 'secret_ref' or both 'account_key_secret' and 'user_key_secret'");
  }
  /**
   * Standard start implementation for Redis Cloud entities
   */
  start() {
    import_cli.default.output(`Starting Redis Cloud operations for: ${this.getEntityName()}`);
  }
  /**
   * Standard stop implementation for Redis Cloud entities
   */
  stop() {
    import_cli.default.output(`Stopping Redis Cloud operations for: ${this.getEntityName()}`);
  }
  /**
   * Helper method to make authenticated HTTP requests with consistent error handling
   */
  makeRequest(method, path, body) {
    try {
      const response = this.httpClient.request(method, path, {
        body,
        headers: {
          "x-api-key": this.credentials.accessKey,
          "x-api-secret-key": this.credentials.secretKey,
          "content-type": CONTENT_TYPE
        }
      });
      if (!response.ok) {
        const errorBody = typeof response.data === "string" ? response.data : JSON.stringify(response.data);
        throw new Error(`Redis Cloud API error: ${response.statusCode} ${response.status}. Body: ${errorBody || response.raw}`);
      }
      let responseData = response.data;
      if (typeof responseData === "string") {
        try {
          responseData = JSON.parse(responseData);
        } catch (e) {
        }
      }
      return responseData;
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(`Redis Cloud ${method} request to ${path} failed: ${error.message}`);
      }
      throw error;
    }
  }
  /**
   * Helper method to check if a resource exists by making a GET request
   * Returns the resource data if it exists, null otherwise
   */
  checkResourceExists(path) {
    try {
      return this.makeRequest("GET", path);
    } catch (error) {
      return null;
    }
  }
  /**
   * Helper method to handle resource deletion with proper existing resource checks
   */
  deleteResource(path, resourceName) {
    if (this.state.existing) {
      import_cli.default.output(`${resourceName} wasn't created by this entity, skipping delete`);
      return;
    }
    try {
      this.makeRequest("DELETE", path);
      import_cli.default.output(`Successfully deleted ${resourceName}`);
    } catch (error) {
      throw new Error(`Failed to delete ${resourceName}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Wait for task completion with timeout
   */
  waitForTask(taskId, timeoutSeconds = DEFAULT_TASK_TIMEOUT) {
    if (!taskId) {
      return null;
    }
    const startTime = Date.now();
    const timeout = timeoutSeconds * 1e3;
    while (Date.now() - startTime < timeout) {
      try {
        const taskData = this.makeRequest("GET", `/tasks/${taskId}`);
        import_cli.default.output(`\u{1F50D} Full task response: ${JSON.stringify(taskData, null, 2)}`);
        if (taskData && taskData.status) {
          if (taskData.status === "processing-completed") {
            import_cli.default.output(`\u2705 Task ${taskId} completed successfully`);
            return taskData;
          }
          if (taskData.status === "processing-error") {
            import_cli.default.output(`\u274C Task failed with full details: ${JSON.stringify(taskData, null, 2)}`);
            throw new Error(`PERMANENT_FAILURE: Task failed: ${taskData.description || "Unknown error"}`);
          }
          import_cli.default.output(`\u23F3 Task ${taskId} status: ${taskData.status}`);
        }
      } catch (error) {
        if (error instanceof Error && error.message.includes("PERMANENT_FAILURE:")) {
          throw error;
        }
        import_cli.default.output(`\u26A0\uFE0F Error checking task status: ${error}`);
      }
      const currentTime = Date.now();
      const elapsed = currentTime - startTime;
      if (elapsed + DEFAULT_POLLING_INTERVAL < timeout) {
        const endTime = currentTime + DEFAULT_POLLING_INTERVAL;
        while (Date.now() < endTime) {
        }
      } else {
        break;
      }
    }
    throw new Error(`Task ${taskId} timed out after ${timeoutSeconds} seconds`);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RedisCloudEntity
});
