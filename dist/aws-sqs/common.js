// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/aws-sqs/common.ts
var common_exports = {};
__export(common_exports, {
  DEFAULT_FIFO_QUEUE_ATTRIBUTES: () => DEFAULT_FIFO_QUEUE_ATTRIBUTES,
  DEFAULT_STANDARD_QUEUE_ATTRIBUTES: () => DEFAULT_STANDARD_QUEUE_ATTRIBUTES,
  buildQueueArn: () => buildQueueArn,
  calculateMD5: () => calculateMD5,
  convertAttributesFromApiFormat: () => convertAttributesFromApiFormat,
  convertAttributesToApiFormat: () => convertAttributesToApiFormat,
  createBasicQueuePolicy: () => createBasicQueuePolicy,
  exponentialBackoffWait: () => exponentialBackoffWait,
  extractAccountIdFromArn: () => extractAccountIdFromArn,
  extractQueueNameFromUrl: () => extractQueueNameFromUrl,
  generateMessageDeduplicationId: () => generateMessageDeduplicationId,
  isFifoQueue: () => isFifoQueue,
  parseSQSError: () => parseSQSError,
  validateMessageBodySize: () => validateMessageBodySize,
  validateQueueName: () => validateQueueName
});
module.exports = __toCommonJS(common_exports);
function validateQueueName(name) {
  if (!name || name.length < 1 || name.length > 80) {
    return false;
  }
  const validPattern = /^[a-zA-Z0-9_-]+(\.fifo)?$/;
  return validPattern.test(name);
}
function isFifoQueue(queueName) {
  return queueName.endsWith(".fifo");
}
function extractQueueNameFromUrl(queueUrl) {
  const parts = queueUrl.split("/");
  return parts[parts.length - 1];
}
function extractAccountIdFromArn(arn) {
  const parts = arn.split(":");
  return parts.length >= 5 ? parts[4] : "";
}
function buildQueueArn(region, accountId, queueName) {
  return `arn:aws:sqs:${region}:${accountId}:${queueName}`;
}
function convertAttributesToApiFormat(attributes) {
  const apiAttributes = {};
  if (attributes.DelaySeconds !== void 0) {
    apiAttributes.DelaySeconds = attributes.DelaySeconds.toString();
  }
  if (attributes.MaximumMessageSize !== void 0) {
    apiAttributes.MaximumMessageSize = attributes.MaximumMessageSize.toString();
  }
  if (attributes.MessageRetentionPeriod !== void 0) {
    apiAttributes.MessageRetentionPeriod = attributes.MessageRetentionPeriod.toString();
  }
  if (attributes.Policy !== void 0) {
    apiAttributes.Policy = attributes.Policy;
  }
  if (attributes.ReceiveMessageWaitTimeSeconds !== void 0) {
    apiAttributes.ReceiveMessageWaitTimeSeconds = attributes.ReceiveMessageWaitTimeSeconds.toString();
  }
  if (attributes.VisibilityTimeout !== void 0) {
    apiAttributes.VisibilityTimeout = attributes.VisibilityTimeout.toString();
  }
  if (attributes.FifoQueue !== void 0) {
    apiAttributes.FifoQueue = attributes.FifoQueue.toString();
  }
  if (attributes.ContentBasedDeduplication !== void 0) {
    apiAttributes.ContentBasedDeduplication = attributes.ContentBasedDeduplication.toString();
  }
  if (attributes.KmsMasterKeyId !== void 0) {
    apiAttributes.KmsMasterKeyId = attributes.KmsMasterKeyId;
  }
  if (attributes.KmsDataKeyReusePeriodSeconds !== void 0) {
    apiAttributes.KmsDataKeyReusePeriodSeconds = attributes.KmsDataKeyReusePeriodSeconds.toString();
  }
  if (attributes.RedrivePolicy !== void 0) {
    apiAttributes.RedrivePolicy = JSON.stringify(attributes.RedrivePolicy);
  }
  if (attributes.RedriveAllowPolicy !== void 0) {
    apiAttributes.RedriveAllowPolicy = JSON.stringify(attributes.RedriveAllowPolicy);
  }
  if (attributes.SqsManagedSseEnabled !== void 0) {
    apiAttributes.SqsManagedSseEnabled = attributes.SqsManagedSseEnabled.toString();
  }
  return apiAttributes;
}
function convertAttributesFromApiFormat(apiAttributes) {
  const attributes = {};
  if (apiAttributes.DelaySeconds) {
    attributes.DelaySeconds = parseInt(apiAttributes.DelaySeconds, 10);
  }
  if (apiAttributes.MaximumMessageSize) {
    attributes.MaximumMessageSize = parseInt(apiAttributes.MaximumMessageSize, 10);
  }
  if (apiAttributes.MessageRetentionPeriod) {
    attributes.MessageRetentionPeriod = parseInt(apiAttributes.MessageRetentionPeriod, 10);
  }
  if (apiAttributes.Policy) {
    attributes.Policy = apiAttributes.Policy;
  }
  if (apiAttributes.ReceiveMessageWaitTimeSeconds) {
    attributes.ReceiveMessageWaitTimeSeconds = parseInt(apiAttributes.ReceiveMessageWaitTimeSeconds, 10);
  }
  if (apiAttributes.VisibilityTimeout) {
    attributes.VisibilityTimeout = parseInt(apiAttributes.VisibilityTimeout, 10);
  }
  if (apiAttributes.FifoQueue) {
    attributes.FifoQueue = apiAttributes.FifoQueue === "true";
  }
  if (apiAttributes.ContentBasedDeduplication) {
    attributes.ContentBasedDeduplication = apiAttributes.ContentBasedDeduplication === "true";
  }
  if (apiAttributes.KmsMasterKeyId) {
    attributes.KmsMasterKeyId = apiAttributes.KmsMasterKeyId;
  }
  if (apiAttributes.KmsDataKeyReusePeriodSeconds) {
    attributes.KmsDataKeyReusePeriodSeconds = parseInt(apiAttributes.KmsDataKeyReusePeriodSeconds, 10);
  }
  if (apiAttributes.RedrivePolicy) {
    try {
      attributes.RedrivePolicy = JSON.parse(apiAttributes.RedrivePolicy);
    } catch (error) {
    }
  }
  if (apiAttributes.RedriveAllowPolicy) {
    try {
      attributes.RedriveAllowPolicy = JSON.parse(apiAttributes.RedriveAllowPolicy);
    } catch (error) {
    }
  }
  if (apiAttributes.SqsManagedSseEnabled) {
    attributes.SqsManagedSseEnabled = apiAttributes.SqsManagedSseEnabled === "true";
  }
  return attributes;
}
function generateMessageDeduplicationId() {
  const timestamp = Date.now().toString();
  const random = Math.random().toString(36).substring(2, 15);
  return `${timestamp}-${random}`;
}
function validateMessageBodySize(body, maxSize = 262144) {
  let byteLength = 0;
  for (let i = 0; i < body.length; i++) {
    const code = body.charCodeAt(i);
    if (code < 128) {
      byteLength += 1;
    } else if (code < 2048) {
      byteLength += 2;
    } else if (code < 65536) {
      byteLength += 3;
    } else {
      byteLength += 4;
    }
  }
  return byteLength <= maxSize;
}
function calculateMD5(content) {
  return `md5-${content.length}-${Date.now()}`;
}
function parseSQSError(responseBody) {
  try {
    const parsed = JSON.parse(responseBody);
    return {
      code: parsed.Error?.Code || "UnknownError",
      message: parsed.Error?.Message || "Unknown error occurred"
    };
  } catch (error) {
    return {
      code: "ParseError",
      message: `Failed to parse error response: ${responseBody}`
    };
  }
}
function createBasicQueuePolicy(queueArn, allowedActions = ["sqs:*"]) {
  const policy = {
    Version: "2012-10-17",
    Statement: [
      {
        Sid: "DefaultPolicy",
        Effect: "Allow",
        Principal: {
          AWS: "*"
        },
        Action: allowedActions,
        Resource: queueArn
      }
    ]
  };
  return JSON.stringify(policy, null, 2);
}
function exponentialBackoffWait(attempt, baseDelay = 1e3, maxDelay = 3e4) {
  const delay = Math.min(baseDelay * Math.pow(2, attempt - 1), maxDelay);
  const start = Date.now();
  while (Date.now() - start < delay) {
  }
}
var DEFAULT_STANDARD_QUEUE_ATTRIBUTES = {
  DelaySeconds: 0,
  MaximumMessageSize: 262144,
  // 256 KiB
  MessageRetentionPeriod: 345600,
  // 4 days
  ReceiveMessageWaitTimeSeconds: 0,
  VisibilityTimeout: 30
  // Note: FifoQueue is not included as AWS rejects this attribute for standard queues
};
var DEFAULT_FIFO_QUEUE_ATTRIBUTES = {
  ...DEFAULT_STANDARD_QUEUE_ATTRIBUTES,
  FifoQueue: true,
  ContentBasedDeduplication: false
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DEFAULT_FIFO_QUEUE_ATTRIBUTES,
  DEFAULT_STANDARD_QUEUE_ATTRIBUTES,
  buildQueueArn,
  calculateMD5,
  convertAttributesFromApiFormat,
  convertAttributesToApiFormat,
  createBasicQueuePolicy,
  exponentialBackoffWait,
  extractAccountIdFromArn,
  extractQueueNameFromUrl,
  generateMessageDeduplicationId,
  isFifoQueue,
  parseSQSError,
  validateMessageBodySize,
  validateQueueName
});
