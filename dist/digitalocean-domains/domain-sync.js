
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/digitalocean-domains/domain.ts
const common = require("digitalocean-domains/common");
const DODomainsEntity = common.DODomainsEntity;
const base = require("monkec/base");
const action = base.action;
const cli = require("cli");
var _listAllDomains_dec, _addCNAME_dec, _addARecord_dec, _records_dec, _info_dec, _a, _init;
var _Domain = class _Domain extends (_a = DODomainsEntity, _info_dec = [action()], _records_dec = [action()], _addARecord_dec = [action("add-a-record")], _addCNAME_dec = [action("add-cname-record")], _listAllDomains_dec = [action("list-all-domains")], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  getEntityName() {
    return "domain";
  }
  create() {
    const domainName = this.definition.name;
    cli.output(`Processing domain: ${domainName}`);
    try {
      cli.output(`Checking if domain ${domainName} already exists...`);
      const existingDomain = this.get(`/v2/domains/${domainName}`);
      if (existingDomain.domain) {
        cli.output(`Domain ${domainName} already exists, using existing domain`);
        this.state.existing = true;
        this.state.name = existingDomain.domain.name;
        this.state.ttl = existingDomain.domain.ttl;
        this.state.zone_file = existingDomain.domain.zone_file;
        cli.output(`Connected to existing domain: ${domainName} (TTL: ${existingDomain.domain.ttl})`);
        return;
      }
    } catch (getError) {
      cli.output(`Domain ${domainName} doesn't exist, will create new one`);
    }
    cli.output(`Creating new domain: ${domainName}`);
    const createPayload = {
      name: domainName,
      type: "domain"
    };
    if (this.definition.ip_address) {
      createPayload.ip_address = this.definition.ip_address;
    }
    try {
      const response = this.post("/v2/domains", createPayload);
      if (!response.domain) {
        throw new Error(`Unexpected response when creating domain: ${JSON.stringify(response)}`);
      }
      this.state.existing = true;
      this.state.name = response.domain.name;
      this.state.ttl = response.domain.ttl;
      this.state.zone_file = response.domain.zone_file;
      cli.output(`Successfully created domain: ${domainName} (TTL: ${response.domain.ttl})`);
    } catch (createError) {
      if (createError.message.includes("already exists")) {
        cli.output(`Domain creation failed because it already exists, retrieving existing domain...`);
        try {
          const existingDomain = this.get(`/v2/domains/${domainName}`);
          this.state.existing = true;
          this.state.name = existingDomain.domain.name;
          this.state.ttl = existingDomain.domain.ttl;
          this.state.zone_file = existingDomain.domain.zone_file;
          cli.output(`Connected to existing domain: ${domainName} (TTL: ${existingDomain.domain.ttl})`);
        } catch (getError2) {
          cli.output(`Could not retrieve domain details, but domain exists: ${getError2.message}`);
          this.state.existing = true;
          this.state.name = domainName;
          this.state.ttl = this.definition.ttl || 1800;
        }
      } else {
        throw createError;
      }
    }
  }
  update() {
    if (!this.state.name) {
      throw new Error("Cannot update domain: no domain name in state");
    }
    cli.output(`Domain ${this.state.name} exists. Use DNS record entities to manage records.`);
  }
  delete() {
    if (!this.state.name) {
      cli.output("No domain name in state; nothing to delete.");
      return;
    }
    try {
      this.deleteRequest(`/v2/domains/${this.state.name}`);
      cli.output(`Deleted domain: ${this.state.name}`);
    } catch (error) {
      if (error.message.includes("404")) {
        cli.output(`Domain ${this.state.name} not found (already deleted)`);
      } else {
        throw error;
      }
    }
    this.state.existing = false;
    this.state.name = void 0;
    this.state.ttl = void 0;
    this.state.zone_file = void 0;
  }
  checkReadiness() {
    return !!this.state.name && !!this.state.existing;
  }
  /**
   * Get domain information
   */
  getDomainInfo() {
    if (!this.state.name) {
      throw new Error("No domain name in state");
    }
    return this.get(`/v2/domains/${this.state.name}`);
  }
  /**
   * List all domains in the account
   */
  listDomains() {
    return this.get("/v2/domains");
  }
  info(_args) {
    if (!this.state.name) {
      cli.output("No domain configured");
      return;
    }
    try {
      const domain = this.get(`/v2/domains/${this.state.name}`);
      cli.output(`Domain: ${domain.domain.name}`);
      cli.output(`TTL: ${domain.domain.ttl}`);
      cli.output(`Zone file: ${domain.domain.zone_file}`);
    } catch (error) {
      cli.output(`Error getting domain info: ${error.message}`);
    }
  }
  records(_args) {
    if (!this.state.name) {
      cli.output("No domain configured");
      return;
    }
    try {
      const records = this.get(`/v2/domains/${this.state.name}/records`);
      cli.output(`DNS Records for ${this.state.name}:`);
      if (records.domain_records && records.domain_records.length > 0) {
        records.domain_records.forEach((record) => {
          cli.output(`  ${record.type} ${record.name || "@"} -> ${record.data} (TTL: ${record.ttl})`);
        });
      } else {
        cli.output("  No DNS records found");
      }
    } catch (error) {
      cli.output(`Error getting DNS records: ${error.message}`);
    }
  }
  addARecord(args) {
    if (!this.state.name) {
      cli.output("No domain configured");
      return;
    }
    const name = args?.name;
    const ip = args?.ip;
    const ttl = args?.ttl ? parseInt(args.ttl) : void 0;
    if (!name || !ip) {
      cli.output("Usage: monk do <domain>/add-a-record --name=<record_name> --ip=<ip_address> [--ttl=<ttl>]");
      return;
    }
    const recordData = {
      type: "A",
      name,
      data: ip,
      ttl: ttl || 1800
    };
    try {
      const result = this.post(`/v2/domains/${this.state.name}/records`, recordData);
      cli.output(`Added A record: ${name}.${this.state.name} -> ${ip}`);
      return result;
    } catch (error) {
      cli.output(`Error adding A record: ${error.message}`);
    }
  }
  addCNAME(args) {
    if (!this.state.name) {
      cli.output("No domain configured");
      return;
    }
    const name = args?.name;
    const target = args?.target;
    const ttl = args?.ttl ? parseInt(args.ttl) : void 0;
    if (!name || !target) {
      cli.output("Usage: monk do <domain>/add-cname-record --name=<record_name> --target=<target_domain> [--ttl=<ttl>]");
      return;
    }
    const recordData = {
      type: "CNAME",
      name,
      data: target,
      ttl: ttl || 1800
    };
    try {
      const result = this.post(`/v2/domains/${this.state.name}/records`, recordData);
      cli.output(`Added CNAME record: ${name}.${this.state.name} -> ${target}`);
      return result;
    } catch (error) {
      cli.output(`Error adding CNAME record: ${error.message}`);
    }
  }
  listAllDomains(_args) {
    try {
      const domains = this.get("/v2/domains");
      cli.output("All domains in account:");
      if (domains.domains && domains.domains.length > 0) {
        domains.domains.forEach((domain) => {
          cli.output(`  ${domain.name} (TTL: ${domain.ttl})`);
        });
      } else {
        cli.output("  No domains found");
      }
    } catch (error) {
      cli.output(`Error listing domains: ${error.message}`);
    }
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "info", _info_dec, _Domain);
__decorateElement(_init, 1, "records", _records_dec, _Domain);
__decorateElement(_init, 1, "addARecord", _addARecord_dec, _Domain);
__decorateElement(_init, 1, "addCNAME", _addCNAME_dec, _Domain);
__decorateElement(_init, 1, "listAllDomains", _listAllDomains_dec, _Domain);
__decoratorMetadata(_init, _Domain);
__name(_Domain, "Domain");
__publicField(_Domain, "readiness", { period: 5, initialDelay: 1, attempts: 10 });
var Domain = _Domain;



function main(def, state, ctx) {
  const entity = new Domain(def, state, ctx);
  return entity.main(ctx);
}
