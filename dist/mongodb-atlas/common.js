// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/mongodb-atlas/common.ts
var common_exports = {};
__export(common_exports, {
  API_VERSION: () => API_VERSION,
  API_VERSION_2025: () => API_VERSION_2025,
  BASE_URL: () => BASE_URL,
  getOrganization: () => getOrganization,
  getToken: () => getToken
});
module.exports = __toCommonJS(common_exports);
var import_http = __toESM(require("http"));
var import_secret = __toESM(require("secret"));
var BASE_URL = "https://cloud.mongodb.com/api/atlas/v2";
var API_VERSION = "application/vnd.atlas.2023-01-01+json";
var API_VERSION_2025 = "application/vnd.atlas.2025-03-12+json";
function getToken(secretRef) {
  const now = /* @__PURE__ */ new Date();
  let cachedToken;
  let cachedTokenExpires;
  try {
    cachedToken = import_secret.default.get(secretRef + "_cached_token");
    cachedTokenExpires = import_secret.default.get(secretRef + "_cached_token_expires");
  } catch (e) {
    cachedToken = void 0;
    cachedTokenExpires = void 0;
  }
  if (cachedToken && cachedTokenExpires) {
    const expires = new Date(cachedTokenExpires);
    if (now < expires) {
      return cachedToken;
    }
  }
  const serviceAccountToken = import_secret.default.get(secretRef);
  if (!serviceAccountToken) {
    throw new Error(`Failed to retrieve MongoDB Atlas service account token from secret: ${secretRef}`);
  }
  if (!serviceAccountToken.startsWith("mdb_sa_id")) {
    throw new Error("Token is not a service account token");
  }
  const headers = {
    "Accept": "application/json",
    "Authorization": "Basic " + btoa(serviceAccountToken),
    "Content-Type": "application/x-www-form-urlencoded",
    "Cache-Control": "no-cache"
  };
  const res = import_http.default.post("https://cloud.mongodb.com/api/oauth/token", {
    headers,
    body: "grant_type=client_credentials"
  });
  if (res.error) {
    throw new Error(`OAuth token exchange failed: ${res.error}, body: ${res.body}`);
  }
  if (res.statusCode >= 400) {
    throw new Error(`OAuth token exchange failed: ${res.status}, body: ${res.body}`);
  }
  const tokenResponse = JSON.parse(res.body);
  if (!tokenResponse.access_token) {
    throw new Error(`OAuth token exchange failed: no access_token in response, body: ${res.body}`);
  }
  if (tokenResponse.expires_in) {
    const expiresIn = new Date(now.getTime() + tokenResponse.expires_in * 1e3);
    import_secret.default.set(secretRef + "_cached_token", tokenResponse.access_token);
    import_secret.default.set(secretRef + "_cached_token_expires", expiresIn.toISOString());
  }
  return tokenResponse.access_token;
}
function getOrganization(name, bearerToken) {
  const headers = {
    "Accept": API_VERSION,
    "Authorization": "Bearer " + bearerToken
  };
  const res = import_http.default.get(BASE_URL + "/orgs", {
    headers
  });
  if (res.error) {
    throw new Error(res.error + ", body " + res.body);
  }
  if (res.statusCode >= 400) {
    throw new Error("Error getting organizations: " + res.status + ", body " + res.body);
  }
  const resObj = JSON.parse(res.body);
  if (!resObj.results || resObj.results.length === 0) {
    throw new Error("No organizations found, body " + res.body);
  }
  for (let i = 0; i < resObj.results.length; i++) {
    if (resObj.results[i].name === name) {
      return { id: resObj.results[i].id, name: resObj.results[i].name };
    }
  }
  throw new Error("Organization not found: " + name + ", body " + res.body);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  API_VERSION,
  API_VERSION_2025,
  BASE_URL,
  getOrganization,
  getToken
});
