// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/user.ts
var user_exports = {};
__export(user_exports, {
  User: () => User
});
module.exports = __toCommonJS(user_exports);

// input/base.ts
var import_base = require("monkec/base");
var import_http_client = require("monkec/http-client");

// input/common.ts
var import_http = __toESM(require("http"));
var import_secret = __toESM(require("secret"));
var BASE_URL = "https://cloud.mongodb.com/api/atlas/v2";
var API_VERSION = "application/vnd.atlas.2023-01-01+json";
var API_VERSION_2025 = "application/vnd.atlas.2025-03-12+json";
function getToken(secretRef) {
  const now = /* @__PURE__ */ new Date();
  let cachedToken;
  let cachedTokenExpires;
  try {
    cachedToken = import_secret.default.get(secretRef + "_cached_token");
    cachedTokenExpires = import_secret.default.get(secretRef + "_cached_token_expires");
  } catch (e) {
    cachedToken = void 0;
    cachedTokenExpires = void 0;
  }
  if (cachedToken && cachedTokenExpires) {
    const expires = new Date(cachedTokenExpires);
    if (now < expires) {
      return cachedToken;
    }
  }
  const serviceAccountToken = import_secret.default.get(secretRef);
  if (!serviceAccountToken) {
    throw new Error(`Failed to retrieve MongoDB Atlas service account token from secret: ${secretRef}`);
  }
  if (!serviceAccountToken.startsWith("mdb_sa_id")) {
    throw new Error("Token is not a service account token");
  }
  const headers = {
    "Accept": "application/json",
    "Authorization": "Basic " + btoa(serviceAccountToken),
    "Content-Type": "application/x-www-form-urlencoded",
    "Cache-Control": "no-cache"
  };
  const res = import_http.default.post("https://cloud.mongodb.com/api/oauth/token", {
    headers,
    body: "grant_type=client_credentials"
  });
  if (res.error) {
    throw new Error(`OAuth token exchange failed: ${res.error}, body: ${res.body}`);
  }
  if (res.statusCode >= 400) {
    throw new Error(`OAuth token exchange failed: ${res.status}, body: ${res.body}`);
  }
  const tokenResponse = JSON.parse(res.body);
  if (!tokenResponse.access_token) {
    throw new Error(`OAuth token exchange failed: no access_token in response, body: ${res.body}`);
  }
  if (tokenResponse.expires_in) {
    const expiresIn = new Date(now.getTime() + tokenResponse.expires_in * 1e3);
    import_secret.default.set(secretRef + "_cached_token", tokenResponse.access_token);
    import_secret.default.set(secretRef + "_cached_token_expires", expiresIn.toISOString());
  }
  return tokenResponse.access_token;
}

// input/base.ts
var import_cli = __toESM(require("cli"));
var MongoDBAtlasEntity = class extends import_base.MonkEntity {
  constructor() {
    super(...arguments);
    /**
     * OAuth token for MongoDB Atlas API access
     */
    __publicField(this, "apiToken");
    /**
     * HTTP client configured for MongoDB Atlas API
     */
    __publicField(this, "httpClient");
  }
  /**
   * Initialize authentication and HTTP client before any operations
   */
  before() {
    this.apiToken = getToken(this.definition.secret_ref);
    if (!this.apiToken) {
      throw new Error(`Failed to retrieve API token from secret: ${this.definition.secret_ref}`);
    }
    this.httpClient = new import_http_client.HttpClient({
      baseUrl: BASE_URL,
      headers: {
        "authorization": "Bearer " + this.apiToken
      },
      parseJson: true,
      stringifyJson: true
    });
  }
  /**
   * Standard start implementation for MongoDB Atlas entities
   */
  start() {
    import_cli.default.output(`Starting MongoDB Atlas operations for: ${this.getEntityName()}`);
  }
  /**
   * Standard stop implementation for MongoDB Atlas entities
   */
  stop() {
    import_cli.default.output(`Stopping MongoDB Atlas operations for: ${this.getEntityName()}`);
  }
  /**
   * Helper method to make authenticated HTTP requests with consistent error handling
   */
  makeRequest(method, path, body) {
    try {
      const apiVersion = this.isClusterRequest(path) ? API_VERSION_2025 : API_VERSION;
      const headers = {
        "Accept": apiVersion,
        "Authorization": "Bearer " + this.apiToken
      };
      if (method.toUpperCase() !== "GET") {
        headers["Content-Type"] = apiVersion;
      }
      const response = this.httpClient.request(method, path, {
        body,
        headers
      });
      if (!response.ok) {
        const errorBody = typeof response.data === "string" ? response.data : JSON.stringify(response.data);
        throw new Error(`MongoDB Atlas API error: ${response.statusCode} ${response.status}. Body: ${errorBody || response.raw}`);
      }
      let responseData = response.data;
      if (typeof responseData === "string") {
        try {
          responseData = JSON.parse(responseData);
        } catch (e) {
        }
      }
      return responseData;
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(`MongoDB Atlas ${method} request to ${path} failed: ${error.message}`);
      }
      throw error;
    }
  }
  /**
   * Helper method to check if a resource exists by making a GET request
   * Returns the resource data if it exists, null otherwise
   */
  checkResourceExists(path) {
    try {
      return this.makeRequest("GET", path);
    } catch (error) {
      return null;
    }
  }
  /**
   * Helper method to handle resource deletion with proper existing resource checks
   */
  deleteResource(path, resourceName) {
    if (this.state.existing) {
      import_cli.default.output(`${resourceName} wasn't created by this entity, skipping delete`);
      return;
    }
    try {
      this.makeRequest("DELETE", path);
      import_cli.default.output(`Successfully deleted ${resourceName}`);
    } catch (error) {
      throw new Error(`Failed to delete ${resourceName}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Check if the request path is for cluster operations
   */
  isClusterRequest(path) {
    return path.includes("/clusters") || path.includes("/accessList");
  }
};

// input/user.ts
var import_secret2 = __toESM(require("secret"));
var import_cli2 = __toESM(require("cli"));
var User = class extends MongoDBAtlasEntity {
  getEntityName() {
    return this.definition.name;
  }
  /** Create a new MongoDB Atlas database user */
  create() {
    const existingUser = this.getExistingUser();
    if (existingUser) {
      this.state = existingUser;
      return;
    }
    const password = this.getOrCreatePassword();
    const role = this.definition.role || "readWriteAnyDatabase";
    const body = {
      "username": this.definition.name,
      "databaseName": "admin",
      "password": password,
      "roles": [
        {
          "databaseName": "admin",
          "roleName": role
        }
      ]
    };
    const resObj = this.makeRequest("POST", `/groups/${this.definition.project_id}/databaseUsers`, body);
    this.state = {
      name: resObj.username,
      project_id: this.definition.project_id,
      database_name: resObj.databaseName,
      roles: resObj.roles
    };
  }
  /** Get existing user if it exists */
  getExistingUser() {
    const userData = this.checkResourceExists(`/groups/${this.definition.project_id}/databaseUsers/admin/${this.definition.name}`);
    if (!userData || !userData.username) {
      return null;
    }
    return {
      name: userData.username,
      project_id: this.definition.project_id,
      database_name: userData.databaseName,
      roles: userData.roles,
      existing: true
    };
  }
  /** Get or create password for the user */
  getOrCreatePassword() {
    if (!this.definition.password_secret_ref) {
      throw new Error("Password secret reference not defined");
    }
    try {
      const storedPassword = import_secret2.default.get(this.definition.password_secret_ref);
      if (!storedPassword) {
        throw new Error("Password not found");
      }
      return storedPassword;
    } catch (e) {
      const password = import_secret2.default.randString(16);
      import_secret2.default.set(this.definition.password_secret_ref, password);
      return password;
    }
  }
  update() {
    if (!this.state.name) {
      this.create();
      return;
    }
    const userData = this.checkResourceExists(`/groups/${this.definition.project_id}/databaseUsers/admin/${this.definition.name}`);
    if (userData) {
      this.state = {
        ...this.state,
        name: userData.username,
        database_name: userData.databaseName,
        roles: userData.roles
      };
    }
  }
  delete() {
    if (!this.state.name) {
      import_cli2.default.output("User does not exist, nothing to delete");
      return;
    }
    if (this.state.existing) {
      import_cli2.default.output(`User ${this.definition.name} was pre-existing, not deleting`);
      return;
    }
    this.deleteResource(`/groups/${this.definition.project_id}/databaseUsers/admin/${this.definition.name}`, "Database User");
  }
  /** Check if user is ready (exists and is active) */
  isReady() {
    if (!this.state.name) {
      return false;
    }
    const userData = this.checkResourceExists(`/groups/${this.definition.project_id}/databaseUsers/admin/${this.definition.name}`);
    return userData && userData.username === this.definition.name;
  }
  /** Update user password */
  updatePassword(newPassword) {
    if (!this.state.name) {
      throw new Error("User does not exist, cannot update password");
    }
    const password = newPassword || import_secret2.default.randString(16);
    const body = {
      "password": password
    };
    this.makeRequest("PATCH", `/groups/${this.definition.project_id}/databaseUsers/admin/${this.definition.name}`, body);
    import_secret2.default.set(this.definition.password_secret_ref, password);
    import_cli2.default.output(`Password updated for user: ${this.definition.name}`);
  }
  /** Get the current password for this user */
  getPassword() {
    try {
      const password = import_secret2.default.get(this.definition.password_secret_ref);
      if (!password) {
        throw new Error("Password not found in secrets");
      }
      return password;
    } catch (e) {
      throw new Error(`Failed to retrieve password for user ${this.definition.name}: ${e instanceof Error ? e.message : "Unknown error"}`);
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  User
});
