
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/cloudflare/dnsRecord.ts
const base = require("monkec/base");
const action = base.action;
const cli = require("cli");
const cloudflareBase = require("cloudflare/cloudflare-base");
const CloudflareEntity = cloudflareBase.CloudflareEntity;
var _getInfo_dec, _a, _init;
var _CloudflareDNSRecord = class _CloudflareDNSRecord extends (_a = CloudflareEntity, _getInfo_dec = [action("get-info")], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  create() {
    const zoneId = this.resolveZoneId();
    if (!zoneId) {
      this.state.existing = false;
      return;
    }
    const existing = this.findRecord(zoneId, this.definition.record_type, this.definition.name);
    if (existing) {
      this.state.record_id = existing.id;
      this.state.zone_id = zoneId;
      this.state.existing = true;
      this.state.applied_zone_name = this.definition.zone_name;
      return;
    }
    const payload = {
      type: this.definition.record_type,
      name: this.definition.name
    };
    if (this.definition.content !== void 0) payload.content = this.definition.content;
    if (typeof this.definition.ttl === "number") payload.ttl = this.definition.ttl;
    if (typeof this.definition.proxied === "boolean") payload.proxied = this.definition.proxied;
    if (typeof this.definition.priority === "number") payload.priority = this.definition.priority;
    if (this.definition.data) payload.data = this.definition.data;
    const created = this.request("POST", `/zones/${zoneId}/dns_records`, payload);
    const createdId = created?.result?.id;
    if (createdId) {
      this.state.record_id = createdId;
      this.state.zone_id = zoneId;
      this.state.existing = false;
      this.state.applied_zone_name = this.definition.zone_name;
    } else {
      const newRec = this.findRecord(zoneId, this.definition.record_type, this.definition.name);
      if (newRec) {
        this.state.record_id = newRec.id;
        this.state.zone_id = zoneId;
        this.state.existing = false;
        this.state.applied_zone_name = this.definition.zone_name;
      }
    }
    return;
  }
  update() {
    const currentZoneId = this.state.zone_id;
    const desiredZoneId = this.definition.zone_id ?? (this.definition.zone_name ? this.findZoneByName(this.definition.zone_name)?.id : currentZoneId);
    if (!desiredZoneId) return;
    const payload = {
      type: this.definition.record_type,
      name: this.definition.name
    };
    if (this.definition.content !== void 0) payload.content = this.definition.content;
    if (typeof this.definition.ttl === "number") payload.ttl = this.definition.ttl;
    if (typeof this.definition.proxied === "boolean") payload.proxied = this.definition.proxied;
    if (typeof this.definition.priority === "number") payload.priority = this.definition.priority;
    if (this.definition.data) payload.data = this.definition.data;
    const nameChanged = this.definition.zone_name !== void 0 && this.state.applied_zone_name !== void 0 && this.definition.zone_name !== this.state.applied_zone_name;
    const idChanged = Boolean(currentZoneId && currentZoneId !== desiredZoneId);
    if (nameChanged || idChanged) {
      const old = { zone: currentZoneId, id: this.state.record_id, owned: this.state.existing === false };
      const existing = this.findRecord(desiredZoneId, this.definition.record_type, this.definition.name);
      if (existing) {
        this.state.record_id = existing.id;
        this.state.zone_id = desiredZoneId;
        this.state.existing = true;
      } else {
        const created = this.request("POST", `/zones/${desiredZoneId}/dns_records`, payload);
        const newId = created?.result?.id;
        if (newId) {
          this.state.record_id = newId;
          this.state.zone_id = desiredZoneId;
          this.state.existing = false;
        } else {
          const newRec = this.findRecord(desiredZoneId, this.definition.record_type, this.definition.name);
          if (newRec) {
            this.state.record_id = newRec.id;
            this.state.zone_id = desiredZoneId;
            this.state.existing = true;
          }
        }
      }
      if (old.zone && old.id && old.owned) {
        this.request("DELETE", `/zones/${old.zone}/dns_records/${old.id}`);
      }
      if (this.definition.zone_name !== void 0) {
        this.state.applied_zone_name = this.definition.zone_name;
      }
      return;
    }
    if (!this.state.record_id) {
      const existing = this.findRecord(desiredZoneId, this.definition.record_type, this.definition.name);
      if (!existing) {
        const created = this.request("POST", `/zones/${desiredZoneId}/dns_records`, payload);
        const newId = created?.result?.id;
        if (newId) {
          this.state.record_id = newId;
          this.state.zone_id = desiredZoneId;
          this.state.existing = false;
          if (this.definition.zone_name !== void 0) this.state.applied_zone_name = this.definition.zone_name;
        } else {
          const newRec = this.findRecord(desiredZoneId, this.definition.record_type, this.definition.name);
          if (newRec) {
            this.state.record_id = newRec.id;
            this.state.zone_id = desiredZoneId;
            this.state.existing = true;
            if (this.definition.zone_name !== void 0) this.state.applied_zone_name = this.definition.zone_name;
          }
        }
        return;
      }
      this.state.record_id = existing.id;
      this.state.zone_id = desiredZoneId;
      this.state.existing = true;
    }
    this.request("PUT", `/zones/${desiredZoneId}/dns_records/${this.state.record_id}`, payload);
    this.state.zone_id = desiredZoneId;
    if (this.definition.zone_name !== void 0) {
      this.state.applied_zone_name = this.definition.zone_name;
    }
  }
  delete() {
    if (!this.state.zone_id || !this.state.record_id) {
      cli.output("DNS record does not exist, nothing to delete");
      return;
    }
    if (this.state.existing) {
      cli.output("Record wasn't created by this entity, skipping delete");
      return;
    }
    this.request("DELETE", `/zones/${this.state.zone_id}/dns_records/${this.state.record_id}`);
    cli.output("Deleted DNS record");
  }
  checkReadiness() {
    const zoneId = this.state.zone_id || this.definition.zone_id || this.resolveZoneId();
    if (!zoneId) return true;
    if (!this.state.record_id) {
      const existing = this.findRecord(zoneId, this.definition.record_type, this.definition.name);
      if (existing) this.state.record_id = existing.id;
    }
    return Boolean(this.state.record_id);
  }
  getInfo() {
    const zoneId = this.resolveZoneId();
    if (!zoneId) {
      cli.output("Zone not found or not accessible; cannot fetch record info");
      return;
    }
    const rec = this.findRecord(zoneId, this.definition.record_type, this.definition.name);
    cli.output(JSON.stringify(rec || {}, null, 2));
  }
  resolveZoneId() {
    if (this.state.zone_id) return this.state.zone_id;
    if (this.definition.zone_id) {
      this.state.zone_id = this.definition.zone_id;
      return this.state.zone_id;
    }
    if (!this.definition.zone_name) return void 0;
    const z = this.findZoneByName(this.definition.zone_name);
    if (!z?.id) return void 0;
    this.state.zone_id = z.id;
    return z.id;
  }
  findZoneByName(name) {
    if (!name) return null;
    try {
      const res = this.request("GET", `/zones?name=${encodeURIComponent(name)}`);
      const first = res?.result?.[0];
      if (first?.id) return { id: first.id };
      return null;
    } catch {
      return null;
    }
  }
  findRecord(zoneId, recordType, name) {
    const candidateNames = [name];
    const zoneName = this.definition.zone_name;
    if (zoneName) {
      if (name == "@") {
        candidateNames.push(zoneName);
      } else if (!name.includes(".")) {
        candidateNames.push(`${name}.${zoneName}`);
      }
    }
    for (const candidate of candidateNames) {
      try {
        const query = `/zones/${zoneId}/dns_records?type=${encodeURIComponent(recordType)}&name=${encodeURIComponent(candidate)}`;
        const res = this.request("GET", query);
        const first = res?.result?.[0];
        if (first?.id) return { id: first.id, type: first.type, name: first.name };
      } catch {
      }
    }
    return null;
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "getInfo", _getInfo_dec, _CloudflareDNSRecord);
__decoratorMetadata(_init, _CloudflareDNSRecord);
__name(_CloudflareDNSRecord, "CloudflareDNSRecord");
__publicField(_CloudflareDNSRecord, "readiness", { period: 5, initialDelay: 1, attempts: 20 });
var CloudflareDNSRecord = _CloudflareDNSRecord;



function main(def, state, ctx) {
  const entity = new CloudflareDNSRecord(def, state, ctx);
  return entity.main(ctx);
}
