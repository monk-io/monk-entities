// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/cloudflare/cloudflareBase.ts
var cloudflare_base_exports = {};
__export(cloudflare_base_exports, {
  CloudflareEntity: () => CloudflareEntity
});
module.exports = __toCommonJS(cloudflare_base_exports);
var import_base = require("monkec/base");
var import_http_client = require("monkec/http-client");
var import_secret = __toESM(require("secret"));
var CloudflareEntity = class extends import_base.MonkEntity {
  constructor() {
    super(...arguments);
    __publicField(this, "apiToken");
    __publicField(this, "http");
  }
  before() {
    const secretRef = this.definition.secret_ref || "cloudflare-api-token";
    const token = import_secret.default.get(secretRef);
    if (!token) {
      throw new Error(`Missing Cloudflare API token in secret: ${secretRef}`);
    }
    this.apiToken = token;
    this.http = new import_http_client.HttpClient({
      baseUrl: "https://api.cloudflare.com/client/v4",
      headers: {
        Authorization: `Bearer ${this.apiToken}`,
        Accept: "application/json",
        "Content-Type": "application/json"
      },
      parseJson: true,
      stringifyJson: true,
      timeout: 15e3
    });
  }
  request(method, path, body) {
    const res = this.http.request(method, path, { body });
    if (!res.ok) {
      throw new Error(
        `Cloudflare API error: ${res.statusCode} ${res.status} - ${typeof res.data === "string" ? res.data : JSON.stringify(res.data)}`
      );
    }
    return res.data;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CloudflareEntity
});
