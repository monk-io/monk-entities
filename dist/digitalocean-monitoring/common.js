// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/digitalocean-monitoring/common.ts
var common_exports = {};
__export(common_exports, {
  validateAlertPolicyType: () => validateAlertPolicyType,
  validateComparator: () => validateComparator,
  validateEmail: () => validateEmail,
  validateEmails: () => validateEmails,
  validateWindow: () => validateWindow
});
module.exports = __toCommonJS(common_exports);
function validateAlertPolicyType(type) {
  const validTypes = [
    "v1/insights/droplet/load_1",
    "v1/insights/droplet/load_5",
    "v1/insights/droplet/load_15",
    "v1/insights/droplet/memory_utilization_percent",
    "v1/insights/droplet/disk_utilization_percent",
    "v1/insights/droplet/cpu",
    "v1/insights/droplet/disk_read",
    "v1/insights/droplet/disk_write",
    "v1/insights/droplet/public_outbound_bandwidth",
    "v1/insights/droplet/public_inbound_bandwidth",
    "v1/insights/droplet/private_outbound_bandwidth",
    "v1/insights/droplet/private_inbound_bandwidth"
  ];
  if (!validTypes.includes(type)) {
    throw new Error(`Invalid alert policy type: ${type}. Valid types: ${validTypes.join(", ")}`);
  }
  return type;
}
function validateComparator(comparator) {
  const validComparators = ["GreaterThan", "LessThan"];
  if (!validComparators.includes(comparator)) {
    throw new Error(`Invalid comparator: ${comparator}. Valid comparators: ${validComparators.join(", ")}`);
  }
  return comparator;
}
function validateWindow(window) {
  const validWindows = ["5m", "10m", "30m", "1h"];
  if (!validWindows.includes(window)) {
    throw new Error(`Invalid window: ${window}. Valid windows: ${validWindows.join(", ")}`);
  }
  return window;
}
function validateEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}
function validateEmails(emails) {
  for (const email of emails) {
    if (!validateEmail(email)) {
      throw new Error(`Invalid email address: ${email}`);
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  validateAlertPolicyType,
  validateComparator,
  validateEmail,
  validateEmails,
  validateWindow
});
