// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/digitalocean-monitoring/common.ts
var common_exports = {};
__export(common_exports, {
  API_ENDPOINTS: () => API_ENDPOINTS,
  DEFAULTS: () => DEFAULTS,
  ERROR_MESSAGES: () => ERROR_MESSAGES,
  HTTP_STATUS: () => HTTP_STATUS,
  RATE_LIMIT: () => RATE_LIMIT,
  VALIDATION_PATTERNS: () => VALIDATION_PATTERNS,
  generateTimeRange: () => generateTimeRange,
  validateComparisonOperator: () => validateComparisonOperator,
  validateEmail: () => validateEmail,
  validateMetricType: () => validateMetricType,
  validateSlackUrl: () => validateSlackUrl,
  validateWindow: () => validateWindow
});
module.exports = __toCommonJS(common_exports);
function validateMetricType(type) {
  const validTypes = [
    "v1/insights/droplet/cpu",
    "v1/insights/droplet/load_1",
    "v1/insights/droplet/load_5",
    "v1/insights/droplet/load_15",
    "v1/insights/droplet/memory_utilization_percent",
    "v1/insights/droplet/disk_utilization_percent",
    "v1/insights/droplet/disk_read",
    "v1/insights/droplet/disk_write",
    "v1/insights/droplet/public_outbound_bandwidth",
    "v1/insights/droplet/public_inbound_bandwidth",
    "v1/insights/droplet/private_outbound_bandwidth",
    "v1/insights/droplet/private_inbound_bandwidth"
  ];
  if (!validTypes.includes(type)) {
    throw new Error(`Invalid metric type: ${type}. Supported types: ${validTypes.join(", ")}`);
  }
  return type;
}
function validateComparisonOperator(operator) {
  if (operator !== "GreaterThan" && operator !== "LessThan") {
    throw new Error(`Invalid comparison operator: ${operator}. Must be 'GreaterThan' or 'LessThan'`);
  }
  return operator;
}
function validateWindow(window) {
  const validWindows = ["5m", "10m", "30m", "1h"];
  if (!validWindows.includes(window)) {
    throw new Error(`Invalid time window: ${window}. Supported windows: ${validWindows.join(", ")}`);
  }
  return window;
}
function validateEmail(email) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}
function validateSlackUrl(url) {
  return url.startsWith("https://hooks.slack.com/services/");
}
function generateTimeRange(hours = 1) {
  const endTime = /* @__PURE__ */ new Date();
  const startTime = new Date(endTime.getTime() - hours * 60 * 60 * 1e3);
  return {
    start_time: startTime.toISOString(),
    end_time: endTime.toISOString()
  };
}
var VALIDATION_PATTERNS = {
  EMAIL: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
  SLACK_WEBHOOK: /^https:\/\/hooks\.slack\.com\/services\//,
  DROPLET_ID: /^\d+$/,
  UUID: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i
};
var DEFAULTS = {
  TIME_WINDOW: "1h",
  METRICS_HOURS: 1,
  MAX_RETRIES: 3,
  RETRY_DELAY: 1e3
};
var ERROR_MESSAGES = {
  INVALID_METRIC_TYPE: "Invalid metric type provided",
  INVALID_COMPARISON: "Invalid comparison operator - must be GreaterThan or LessThan",
  INVALID_WINDOW: "Invalid time window - must be 5m, 10m, 30m, or 1h",
  INVALID_EMAIL: "Invalid email address format",
  INVALID_SLACK_URL: "Invalid Slack webhook URL format",
  MISSING_DROPLET_ID: "Droplet ID is required",
  MISSING_POLICY_UUID: "Alert policy UUID is required",
  API_ERROR: "DigitalOcean API request failed",
  NETWORK_ERROR: "Network request failed",
  TIMEOUT_ERROR: "Request timeout"
};
var API_ENDPOINTS = {
  ALERTS: "/monitoring/alerts",
  SINKS: "/monitoring/sinks",
  ACCOUNT: "/account",
  DROPLETS: "/droplets",
  METRICS_DROPLET: "/monitoring/metrics/droplet",
  METRICS_VOLUME: "/monitoring/metrics/volume",
  METRICS_APP: "/monitoring/metrics/app",
  METRICS_LB: "/monitoring/metrics/load_balancer",
  METRICS_DB: "/monitoring/metrics/database"
};
var HTTP_STATUS = {
  OK: 200,
  CREATED: 201,
  NO_CONTENT: 204,
  BAD_REQUEST: 400,
  UNAUTHORIZED: 401,
  FORBIDDEN: 403,
  NOT_FOUND: 404,
  CONFLICT: 409,
  RATE_LIMITED: 429,
  INTERNAL_ERROR: 500,
  SERVICE_UNAVAILABLE: 503
};
var RATE_LIMIT = {
  MAX_REQUESTS_PER_SECOND: 10,
  RETRY_AFTER_SECONDS: 60,
  BACKOFF_MULTIPLIER: 2
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  API_ENDPOINTS,
  DEFAULTS,
  ERROR_MESSAGES,
  HTTP_STATUS,
  RATE_LIMIT,
  VALIDATION_PATTERNS,
  generateTimeRange,
  validateComparisonOperator,
  validateEmail,
  validateMetricType,
  validateSlackUrl,
  validateWindow
});
