// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/digitalocean-monitoring/doProviderBase.ts
var do_provider_base_exports = {};
__export(do_provider_base_exports, {
  DOMonitoringEntity: () => DOMonitoringEntity
});
module.exports = __toCommonJS(do_provider_base_exports);
var import_base = require("monkec/base");
var import_cli = __toESM(require("cli"));
var digitalocean = require("cloud/digitalocean");
var DOMonitoringEntity = class extends import_base.MonkEntity {
  before() {
  }
  /**
   * Standard start implementation for DigitalOcean entities
   */
  start() {
    import_cli.default.output(`Starting DigitalOcean Monitoring operations for: ${this.getEntityName()}`);
  }
  /**
   * Standard stop implementation for DigitalOcean entities
   */
  stop() {
    import_cli.default.output(`Stopping DigitalOcean Monitoring operations for: ${this.getEntityName()}`);
  }
  /**
   * Helper method to make authenticated HTTP requests using DigitalOcean provider
   */
  makeRequest(method, path, body) {
    const apiPath = path.startsWith("/v2/") ? path : `/v2${path}`;
    try {
      const requestOptions = {
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json"
        }
      };
      if (body) {
        requestOptions.body = JSON.stringify(body);
      }
      let response;
      switch (method.toUpperCase()) {
        case "GET":
          response = digitalocean.get(apiPath, requestOptions);
          break;
        case "POST":
          response = digitalocean.post(apiPath, requestOptions);
          break;
        case "PUT":
          response = digitalocean.put(apiPath, requestOptions);
          break;
        case "DELETE":
          response = digitalocean.delete(apiPath, requestOptions);
          break;
        default:
          throw new Error(`Unsupported HTTP method: ${method}`);
      }
      if (response.statusCode < 200 || response.statusCode >= 300) {
        let errorMessage = `DigitalOcean API error: ${response.statusCode} ${response.status}`;
        try {
          if (response.body) {
            const errorData = JSON.parse(response.body);
            if (errorData.errors && Array.isArray(errorData.errors)) {
              errorMessage += ` - ${errorData.errors.map((e) => e.message).join(", ")}`;
            } else if (errorData.message) {
              errorMessage += ` - ${errorData.message}`;
            }
          }
        } catch (parseError) {
          errorMessage += ` - Raw: ${response.body || ""}`;
        }
        throw new Error(errorMessage);
      }
      let responseData = {};
      if (response.body) {
        try {
          responseData = JSON.parse(response.body);
        } catch (e) {
          responseData = response.body;
        }
      }
      return responseData;
    } catch (error) {
      if (error instanceof Error) {
        throw new Error(`DigitalOcean ${method} request to ${apiPath} failed: ${error.message}`);
      }
      throw error;
    }
  }
  /**
   * Helper method to check if a resource exists by making a GET request
   * Returns the resource data if it exists, null otherwise
   */
  checkResourceExists(path) {
    try {
      return this.makeRequest("GET", path);
    } catch (error) {
      if (error instanceof Error && (error.message.includes("404") || error.message.includes("not found") || error.message.includes("not_found"))) {
        return null;
      }
      throw error;
    }
  }
  /**
   * Helper method to handle resource deletion with proper existing resource checks
   */
  deleteResource(path, resourceName) {
    if (this.state.existing) {
      return;
    }
    try {
      this.makeRequest("DELETE", path);
    } catch (error) {
      if (error instanceof Error && (error.message.includes("404") || error.message.includes("not found") || error.message.includes("not_found"))) {
        return;
      }
      throw new Error(`Failed to delete ${resourceName}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Helper method to get account information and verified email
   */
  getAccountInfo() {
    try {
      return this.makeRequest("GET", "/account");
    } catch (error) {
      throw new Error(`Failed to get account info: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Helper method to auto-detect verified email from account
   */
  getVerifiedEmail() {
    try {
      const accountResponse = this.getAccountInfo();
      if (accountResponse.account && accountResponse.account.email_verified && accountResponse.account.email) {
        return accountResponse.account.email;
      }
      return null;
    } catch (error) {
      return null;
    }
  }
  /**
   * Helper method to list all droplets
   */
  listDroplets() {
    try {
      return this.makeRequest("GET", "/droplets");
    } catch (error) {
      throw new Error(`Failed to list droplets: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
};
/**
 * Readiness check configuration
 */
__publicField(DOMonitoringEntity, "readiness", { period: 15, initialDelay: 5, attempts: 40 });
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DOMonitoringEntity
});
