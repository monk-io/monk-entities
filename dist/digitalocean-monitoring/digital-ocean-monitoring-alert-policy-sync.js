
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/digitalocean-monitoring/monitoring.ts
const base = require("monkec/base");
const action = base.action;
const do-provider-base = require("digitalocean-monitoring/do-provider-base");
const DOProviderEntity = do-provider-base.DOProviderEntity;
const common = require("digitalocean-monitoring/common");
const validateAlertPolicyType = common.validateAlertPolicyType;
const validateComparator = common.validateComparator;
const validateWindow = common.validateWindow;
const validateEmails = common.validateEmails;
const cli = require("cli");
var _getDropletMetrics_dec, _deleteAlertPolicy_dec, _updateAlertPolicy_dec, _getAlertPolicy_dec, _listAlertPolicies_dec, _createAlertPolicy_dec, _a, _init;
var _DigitalOceanMonitoringAlertPolicy = class _DigitalOceanMonitoringAlertPolicy extends (_a = DOProviderEntity, _createAlertPolicy_dec = [action()], _listAlertPolicies_dec = [action()], _getAlertPolicy_dec = [action()], _updateAlertPolicy_dec = [action()], _deleteAlertPolicy_dec = [action()], _getDropletMetrics_dec = [action()], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  getEntityName() {
    return "DigitalOcean Monitoring Alert Policy";
  }
  create() {
    try {
      validateAlertPolicyType(this.definition.type);
      validateComparator(this.definition.compare);
      validateWindow(this.definition.window);
      validateEmails([...this.definition.emails]);
      const existingPolicy = this.findExistingPolicy();
      if (existingPolicy) {
        this.updateStateFromPolicy(existingPolicy);
        cli.output(`Alert Policy Found: ${this.state.name}
UUID: ${this.state.uuid}
Type: ${this.state.type}
Status: ${this.state.enabled ? "Enabled" : "Disabled"}
Created: ${this.state.created_at}`);
        return;
      }
      const policyData = this.buildPolicyData();
      const response = this.makeRequest("POST", "/monitoring/alerts", {
        alerts: [policyData]
      });
      if (response.alerts && response.alerts.length > 0) {
        this.updateStateFromPolicy(response.alerts[0]);
        cli.output(`Alert Policy Created: ${this.state.name}
UUID: ${this.state.uuid}
Type: ${this.state.type}
Threshold: ${this.state.compare} ${this.state.value}
Window: ${this.state.window}
Notifications: ${this.state.emails?.join(", ")}
Status: ${this.state.enabled ? "Enabled" : "Disabled"}`);
      } else {
        throw new Error("Failed to create alert policy: No policy returned in response");
      }
    } catch (error) {
      throw new Error(`Failed to create alert policy: ${error.message}`);
    }
  }
  update() {
    try {
      const existingPolicy = this.findExistingPolicy();
      if (!existingPolicy) {
        this.create();
        return;
      }
      const policyData = this.buildPolicyData();
      const response = this.makeRequest("PUT", `/monitoring/alerts/${existingPolicy.uuid}`, policyData);
      this.updateStateFromPolicy(response.alert);
      cli.output(`Alert Policy Updated: ${this.state.name}
UUID: ${this.state.uuid}
Type: ${this.state.type}
Threshold: ${this.state.compare} ${this.state.value}
Window: ${this.state.window}
Notifications: ${this.state.emails?.join(", ")}
Status: ${this.state.enabled ? "Enabled" : "Disabled"}`);
    } catch (error) {
      throw new Error(`Failed to update alert policy: ${error.message}`);
    }
  }
  delete() {
    try {
      if (!this.state.uuid) {
        cli.output("No alert policy to delete");
        return;
      }
      this.makeRequest("DELETE", `/monitoring/alerts/${this.state.uuid}`);
      this.state = {
        uuid: void 0,
        name: void 0,
        description: void 0,
        type: void 0,
        compare: void 0,
        value: void 0,
        window: void 0,
        entities: void 0,
        tags: void 0,
        emails: void 0,
        slack_channels: void 0,
        enabled: void 0,
        created_at: void 0
      };
      cli.output("Alert policy deleted successfully");
    } catch (error) {
      throw new Error(`Failed to delete alert policy: ${error.message}`);
    }
  }
  checkReadiness() {
    return !!this.state.uuid;
  }
  createAlertPolicy(name, type, compare, value, window, emails, entities, tags, description, slack_channels) {
    try {
      validateAlertPolicyType(type);
      validateComparator(compare);
      validateWindow(window);
      const emailArray = emails.split(",").map((e) => e.trim());
      validateEmails(emailArray);
      const policyData = {
        type,
        description: description || `Alert policy for ${name}`,
        compare,
        value,
        window,
        entities: entities ? entities.split(",").map((e) => e.trim()) : [],
        tags: tags ? tags.split(",").map((t) => t.trim()) : [],
        alerts: {
          email: emailArray,
          slack: slack_channels ? JSON.parse(slack_channels) : []
        },
        enabled: true
      };
      const response = this.makeRequest("POST", "/monitoring/alerts", {
        alerts: [policyData]
      });
      if (response.alerts && response.alerts.length > 0) {
        const policy = response.alerts[0];
        cli.output(`Alert Policy Created: ${name}
UUID: ${policy.uuid}
Type: ${type}
Threshold: ${compare} ${value}
Window: ${window}
Entities: ${policyData.entities.join(", ") || "None"}
Tags: ${policyData.tags.join(", ") || "None"}
Notifications: ${emailArray.join(", ")}
Status: Enabled`);
      }
    } catch (error) {
      throw new Error(`Failed to create alert policy: ${error.message}`);
    }
  }
  listAlertPolicies() {
    try {
      const response = this.makeRequest("GET", "/monitoring/alerts");
      if (!response.alerts || response.alerts.length === 0) {
        cli.output("No alert policies found");
        return;
      }
      const policies = response.alerts.map((policy) => {
        return `Name: ${policy.description}
UUID: ${policy.uuid}
Type: ${policy.type}
Threshold: ${policy.compare} ${policy.value}
Window: ${policy.window}
Entities: ${policy.entities?.join(", ") || "None"}
Tags: ${policy.tags?.join(", ") || "None"}
Emails: ${policy.alerts?.email?.join(", ") || "None"}
Status: ${policy.enabled ? "Enabled" : "Disabled"}
`;
      }).join("\n---\n");
      cli.output(`Alert Policies (${response.alerts.length} total):

${policies}`);
    } catch (error) {
      throw new Error(`Failed to list alert policies: ${error.message}`);
    }
  }
  getAlertPolicy() {
    try {
      if (!this.state.uuid) {
        throw new Error("No alert policy UUID available");
      }
      const response = this.makeRequest("GET", `/monitoring/alerts/${this.state.uuid}`);
      const policy = response.alert;
      cli.output(`Alert Policy Details:
Name: ${policy.description}
UUID: ${policy.uuid}
Type: ${policy.type}
Threshold: ${policy.compare} ${policy.value}
Window: ${policy.window}
Entities: ${policy.entities?.join(", ") || "None"}
Tags: ${policy.tags?.join(", ") || "None"}
Emails: ${policy.alerts?.email?.join(", ") || "None"}
Slack: ${policy.alerts?.slack?.length || 0} channels
Status: ${policy.enabled ? "Enabled" : "Disabled"}`);
    } catch (error) {
      throw new Error(`Failed to get alert policy: ${error.message}`);
    }
  }
  updateAlertPolicy(compare, value, window, emails, entities, tags, enabled) {
    try {
      if (!this.state.uuid) {
        throw new Error("No alert policy UUID available");
      }
      const updateData = {};
      if (compare) {
        validateComparator(compare);
        updateData.compare = compare;
      }
      if (value !== void 0) updateData.value = value;
      if (window) {
        validateWindow(window);
        updateData.window = window;
      }
      if (emails) {
        const emailArray = emails.split(",").map((e) => e.trim());
        validateEmails(emailArray);
        updateData.alerts = { ...updateData.alerts, email: emailArray };
      }
      if (entities) updateData.entities = entities.split(",").map((e) => e.trim());
      if (tags) updateData.tags = tags.split(",").map((t) => t.trim());
      if (enabled !== void 0) updateData.enabled = enabled;
      const response = this.makeRequest("PUT", `/monitoring/alerts/${this.state.uuid}`, updateData);
      const policy = response.alert;
      cli.output(`Alert Policy Updated: ${policy.description}
UUID: ${policy.uuid}
Type: ${policy.type}
Threshold: ${policy.compare} ${policy.value}
Window: ${policy.window}
Status: ${policy.enabled ? "Enabled" : "Disabled"}`);
    } catch (error) {
      throw new Error(`Failed to update alert policy: ${error.message}`);
    }
  }
  deleteAlertPolicy(uuid) {
    try {
      const policyUuid = uuid || this.state.uuid;
      if (!policyUuid) {
        throw new Error("No alert policy UUID provided");
      }
      this.makeRequest("DELETE", `/monitoring/alerts/${policyUuid}`);
      cli.output(`Alert policy ${policyUuid} deleted successfully`);
    } catch (error) {
      throw new Error(`Failed to delete alert policy: ${error.message}`);
    }
  }
  getDropletMetrics(droplet_id, metric_type, start_time, end_time) {
    try {
      validateAlertPolicyType(metric_type);
      let queryParams = `host_id=${droplet_id}&interface=public&direction=inbound`;
      if (start_time) queryParams += `&start=${start_time}`;
      if (end_time) queryParams += `&end=${end_time}`;
      const response = this.makeRequest("GET", `/monitoring/metrics/droplet/${metric_type.replace("v1/insights/droplet/", "")}?${queryParams}`);
      if (!response.data?.result || response.data.result.length === 0) {
        cli.output(`No metrics found for droplet ${droplet_id} and metric ${metric_type}`);
        return;
      }
      const metrics = response.data.result.map((result) => {
        const latestValue = result.values[result.values.length - 1];
        return `Metric: ${metric_type}
Droplet ID: ${droplet_id}
Latest Value: ${latestValue[1]}
Timestamp: ${new Date(latestValue[0] * 1e3).toISOString()}
Total Data Points: ${result.values.length}`;
      }).join("\n\n");
      cli.output(`Droplet Metrics:

${metrics}`);
    } catch (error) {
      throw new Error(`Failed to get droplet metrics: ${error.message}`);
    }
  }
  findExistingPolicy() {
    try {
      const response = this.makeRequest("GET", "/monitoring/alerts");
      if (!response.alerts) return null;
      const existingPolicy = response.alerts.find(
        (policy) => policy.description === this.definition.name || policy.description === `Alert policy for ${this.definition.name}`
      );
      return existingPolicy || null;
    } catch (error) {
      return null;
    }
  }
  buildPolicyData() {
    return {
      type: this.definition.type,
      description: this.definition.description || `Alert policy for ${this.definition.name}`,
      compare: this.definition.compare,
      value: this.definition.value,
      window: this.definition.window,
      entities: this.definition.entities || [],
      tags: this.definition.tags || [],
      alerts: {
        email: this.definition.emails,
        slack: this.definition.slack_channels?.map((ch) => ({
          type: "slack",
          channel: ch.channel,
          url: ch.url
        })) || []
      },
      enabled: this.definition.enabled !== false
    };
  }
  updateStateFromPolicy(policy) {
    this.state.uuid = policy.uuid;
    this.state.name = this.definition.name;
    this.state.description = policy.description;
    this.state.type = policy.type;
    this.state.compare = policy.compare;
    this.state.value = policy.value;
    this.state.window = policy.window;
    this.state.entities = policy.entities;
    this.state.tags = policy.tags;
    this.state.emails = policy.alerts?.email;
    this.state.slack_channels = policy.alerts?.slack?.map((ch) => ({
      channel: ch.channel,
      url: ch.url
    }));
    this.state.enabled = policy.enabled;
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "createAlertPolicy", _createAlertPolicy_dec, _DigitalOceanMonitoringAlertPolicy);
__decorateElement(_init, 1, "listAlertPolicies", _listAlertPolicies_dec, _DigitalOceanMonitoringAlertPolicy);
__decorateElement(_init, 1, "getAlertPolicy", _getAlertPolicy_dec, _DigitalOceanMonitoringAlertPolicy);
__decorateElement(_init, 1, "updateAlertPolicy", _updateAlertPolicy_dec, _DigitalOceanMonitoringAlertPolicy);
__decorateElement(_init, 1, "deleteAlertPolicy", _deleteAlertPolicy_dec, _DigitalOceanMonitoringAlertPolicy);
__decorateElement(_init, 1, "getDropletMetrics", _getDropletMetrics_dec, _DigitalOceanMonitoringAlertPolicy);
__decoratorMetadata(_init, _DigitalOceanMonitoringAlertPolicy);
__name(_DigitalOceanMonitoringAlertPolicy, "DigitalOceanMonitoringAlertPolicy");
var DigitalOceanMonitoringAlertPolicy = _DigitalOceanMonitoringAlertPolicy;
var monitoring_default = DigitalOceanMonitoringAlertPolicy;



function main(def, state, ctx) {
  const entity = new DigitalOceanMonitoringAlertPolicy(def, state, ctx);
  return entity.main(ctx);
}
