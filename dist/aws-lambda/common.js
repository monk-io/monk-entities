// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/aws-lambda/common.ts
var common_exports = {};
__export(common_exports, {
  ARCHITECTURES: () => ARCHITECTURES,
  CONSTRAINTS: () => CONSTRAINTS,
  DEFAULTS: () => DEFAULTS,
  FUNCTION_STATES: () => FUNCTION_STATES,
  INVOCATION_TYPES: () => INVOCATION_TYPES,
  LAMBDA_ENDPOINTS: () => LAMBDA_ENDPOINTS,
  LAMBDA_RUNTIMES: () => LAMBDA_RUNTIMES,
  LOG_FORMATS: () => LOG_FORMATS,
  LOG_LEVELS: () => LOG_LEVELS,
  LambdaUtils: () => LambdaUtils,
  PACKAGE_TYPES: () => PACKAGE_TYPES,
  SNAP_START_APPLY_OPTIONS: () => SNAP_START_APPLY_OPTIONS,
  TRACING_MODES: () => TRACING_MODES,
  UPDATE_STATUSES: () => UPDATE_STATUSES
});
module.exports = __toCommonJS(common_exports);
var LAMBDA_RUNTIMES = {
  // Node.js runtimes
  NODEJS_18_X: "nodejs18.x",
  NODEJS_20_X: "nodejs20.x",
  // Python runtimes
  PYTHON_3_8: "python3.8",
  PYTHON_3_9: "python3.9",
  PYTHON_3_10: "python3.10",
  PYTHON_3_11: "python3.11",
  PYTHON_3_12: "python3.12",
  // Java runtimes
  JAVA_8: "java8",
  JAVA_8_AL2: "java8.al2",
  JAVA_11: "java11",
  JAVA_17: "java17",
  JAVA_21: "java21",
  // .NET runtimes
  DOTNET_6: "dotnet6",
  DOTNET_8: "dotnet8",
  // Go runtime
  GO_1_X: "go1.x",
  // Ruby runtimes
  RUBY_2_7: "ruby2.7",
  RUBY_3_2: "ruby3.2",
  // Custom runtime
  PROVIDED: "provided",
  PROVIDED_AL2: "provided.al2",
  PROVIDED_AL2023: "provided.al2023"
};
var INVOCATION_TYPES = {
  REQUEST_RESPONSE: "RequestResponse",
  EVENT: "Event",
  DRY_RUN: "DryRun"
};
var FUNCTION_STATES = {
  PENDING: "Pending",
  ACTIVE: "Active",
  INACTIVE: "Inactive",
  FAILED: "Failed"
};
var UPDATE_STATUSES = {
  SUCCESSFUL: "Successful",
  FAILED: "Failed",
  IN_PROGRESS: "InProgress"
};
var PACKAGE_TYPES = {
  ZIP: "Zip",
  IMAGE: "Image"
};
var ARCHITECTURES = {
  X86_64: "x86_64",
  ARM64: "arm64"
};
var TRACING_MODES = {
  ACTIVE: "Active",
  PASS_THROUGH: "PassThrough"
};
var LOG_FORMATS = {
  JSON: "JSON",
  TEXT: "Text"
};
var LOG_LEVELS = {
  TRACE: "TRACE",
  DEBUG: "DEBUG",
  INFO: "INFO",
  WARN: "WARN",
  ERROR: "ERROR",
  FATAL: "FATAL"
};
var SNAP_START_APPLY_OPTIONS = {
  PUBLISHED_VERSIONS: "PublishedVersions",
  NONE: "None"
};
var DEFAULTS = {
  TIMEOUT: 3,
  MEMORY_SIZE: 128,
  PACKAGE_TYPE: PACKAGE_TYPES.ZIP,
  ARCHITECTURE: ARCHITECTURES.X86_64,
  TRACING_MODE: TRACING_MODES.PASS_THROUGH,
  LOG_FORMAT: LOG_FORMATS.TEXT,
  EPHEMERAL_STORAGE_SIZE: 512
};
var CONSTRAINTS = {
  FUNCTION_NAME: {
    MIN_LENGTH: 1,
    MAX_LENGTH: 64,
    PATTERN: /^[a-zA-Z0-9-_]+$/
  },
  DESCRIPTION: {
    MAX_LENGTH: 256
  },
  TIMEOUT: {
    MIN: 1,
    MAX: 900
    // 15 minutes
  },
  MEMORY_SIZE: {
    MIN: 128,
    MAX: 10240,
    // 10 GB
    STEP: 1
  },
  ZIP_FILE_SIZE: {
    MAX: 50 * 1024 * 1024
    // 50 MB
  },
  UNCOMPRESSED_CODE_SIZE: {
    MAX: 250 * 1024 * 1024
    // 250 MB
  },
  LAYERS: {
    MAX_COUNT: 5
  },
  ENVIRONMENT_VARIABLES: {
    MAX_COUNT: 100,
    MAX_TOTAL_SIZE: 4096
    // 4 KB
  },
  EPHEMERAL_STORAGE: {
    MIN: 512,
    MAX: 10240
    // 10 GB
  }
};
var LAMBDA_ENDPOINTS = {
  "us-east-1": "lambda.us-east-1.amazonaws.com",
  "us-east-2": "lambda.us-east-2.amazonaws.com",
  "us-west-1": "lambda.us-west-1.amazonaws.com",
  "us-west-2": "lambda.us-west-2.amazonaws.com",
  "eu-west-1": "lambda.eu-west-1.amazonaws.com",
  "eu-west-2": "lambda.eu-west-2.amazonaws.com",
  "eu-west-3": "lambda.eu-west-3.amazonaws.com",
  "eu-central-1": "lambda.eu-central-1.amazonaws.com",
  "eu-north-1": "lambda.eu-north-1.amazonaws.com",
  "ap-south-1": "lambda.ap-south-1.amazonaws.com",
  "ap-southeast-1": "lambda.ap-southeast-1.amazonaws.com",
  "ap-southeast-2": "lambda.ap-southeast-2.amazonaws.com",
  "ap-northeast-1": "lambda.ap-northeast-1.amazonaws.com",
  "ap-northeast-2": "lambda.ap-northeast-2.amazonaws.com",
  "ca-central-1": "lambda.ca-central-1.amazonaws.com",
  "sa-east-1": "lambda.sa-east-1.amazonaws.com"
};
var LambdaUtils = class _LambdaUtils {
  /**
   * Validates Lambda function name
   */
  static validateFunctionName(name) {
    if (!name || name.length < CONSTRAINTS.FUNCTION_NAME.MIN_LENGTH || name.length > CONSTRAINTS.FUNCTION_NAME.MAX_LENGTH) {
      return false;
    }
    return CONSTRAINTS.FUNCTION_NAME.PATTERN.test(name);
  }
  /**
   * Validates memory size value
   */
  static validateMemorySize(memorySize) {
    return memorySize >= CONSTRAINTS.MEMORY_SIZE.MIN && memorySize <= CONSTRAINTS.MEMORY_SIZE.MAX && memorySize % CONSTRAINTS.MEMORY_SIZE.STEP === 0;
  }
  /**
   * Validates timeout value
   */
  static validateTimeout(timeout) {
    return timeout >= CONSTRAINTS.TIMEOUT.MIN && timeout <= CONSTRAINTS.TIMEOUT.MAX;
  }
  /**
   * Validates ephemeral storage size
   */
  static validateEphemeralStorageSize(size) {
    return size >= CONSTRAINTS.EPHEMERAL_STORAGE.MIN && size <= CONSTRAINTS.EPHEMERAL_STORAGE.MAX;
  }
  /**
   * Checks if runtime is supported
   */
  static isValidRuntime(runtime) {
    return Object.values(LAMBDA_RUNTIMES).includes(runtime);
  }
  /**
   * Checks if architecture is supported
   */
  static isValidArchitecture(architecture) {
    return Object.values(ARCHITECTURES).includes(architecture);
  }
  /**
   * Gets Lambda service endpoint for region
   */
  static getLambdaEndpoint(region) {
    return LAMBDA_ENDPOINTS[region] || `lambda.${region}.amazonaws.com`;
  }
  /**
   * Formats environment variables for Lambda API
   */
  static formatEnvironmentVariables(variables) {
    const formatted = {};
    for (const [key, value] of Object.entries(variables)) {
      if (key && typeof value === "string") {
        formatted[key] = value;
      }
    }
    return formatted;
  }
  /**
   * Calculates total size of environment variables
   */
  static getEnvironmentVariablesSize(variables) {
    let totalSize = 0;
    for (const [key, value] of Object.entries(variables)) {
      totalSize += key.length + value.length;
    }
    return totalSize;
  }
  /**
   * Validates environment variables
   */
  static validateEnvironmentVariables(variables) {
    const count = Object.keys(variables).length;
    if (count > CONSTRAINTS.ENVIRONMENT_VARIABLES.MAX_COUNT) {
      return {
        valid: false,
        error: `Too many environment variables: ${count}. Maximum allowed: ${CONSTRAINTS.ENVIRONMENT_VARIABLES.MAX_COUNT}`
      };
    }
    const totalSize = _LambdaUtils.getEnvironmentVariablesSize(variables);
    if (totalSize > CONSTRAINTS.ENVIRONMENT_VARIABLES.MAX_TOTAL_SIZE) {
      return {
        valid: false,
        error: `Environment variables total size: ${totalSize} bytes. Maximum allowed: ${CONSTRAINTS.ENVIRONMENT_VARIABLES.MAX_TOTAL_SIZE} bytes`
      };
    }
    return { valid: true };
  }
  /**
   * Generates CloudWatch log group name for Lambda function
   */
  static getLogGroupName(functionName) {
    return `/aws/lambda/${functionName}`;
  }
  /**
   * Encodes binary data for Lambda payload
   */
  static encodeBinaryData(data) {
    return data;
  }
  /**
   * Parses error response from Lambda API
   */
  static parseApiError(response) {
    try {
      const errorBody = JSON.parse(response.body);
      return errorBody.message || errorBody.errorMessage || `API Error: ${response.statusCode}`;
    } catch {
      return `API Error: ${response.statusCode} - ${response.body}`;
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ARCHITECTURES,
  CONSTRAINTS,
  DEFAULTS,
  FUNCTION_STATES,
  INVOCATION_TYPES,
  LAMBDA_ENDPOINTS,
  LAMBDA_RUNTIMES,
  LOG_FORMATS,
  LOG_LEVELS,
  LambdaUtils,
  PACKAGE_TYPES,
  SNAP_START_APPLY_OPTIONS,
  TRACING_MODES,
  UPDATE_STATUSES
});
