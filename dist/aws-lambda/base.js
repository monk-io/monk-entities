// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/aws-lambda/base.ts
var base_exports = {};
__export(base_exports, {
  AWSLambdaEntity: () => AWSLambdaEntity
});
module.exports = __toCommonJS(base_exports);
var import_base = require("monkec/base");
var import_aws = __toESM(require("cloud/aws"));
var import_blobs = __toESM(require("blobs"));
var AWSLambdaEntity = class extends import_base.MonkEntity {
  constructor() {
    super(...arguments);
    __publicField(this, "region");
  }
  before() {
    this.region = this.definition.region;
  }
  getLambdaZipFromBlob() {
    if (!this.definition.blob_name) {
      throw new Error("blob_name is required for ZIP package deployments");
    }
    try {
      const blobMeta = import_blobs.default.get(this.definition.blob_name);
      if (!blobMeta) {
        throw new Error(`Blob not found: ${this.definition.blob_name}`);
      }
      const zipContent = import_blobs.default.zip(this.definition.blob_name);
      if (!zipContent) {
        throw new Error(`Failed to get ZIP content from blob: ${this.definition.blob_name}`);
      }
      return zipContent;
    } catch (error) {
      throw new Error(`Failed to retrieve Lambda code from blob ${this.definition.blob_name}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  makeAWSRequest(method, path, body) {
    const url = `https://lambda.${this.region}.amazonaws.com${path}`;
    const options = {
      service: "lambda",
      region: this.region,
      headers: {},
      timeout: 3e4
    };
    if (body) {
      options.headers["Content-Type"] = "application/json";
      options.body = JSON.stringify(body);
    }
    try {
      let response;
      if (method === "GET") {
        response = import_aws.default.get(url, options);
      } else if (method === "POST") {
        response = import_aws.default.post(url, options);
      } else if (method === "PUT") {
        response = import_aws.default.put(url, options);
      } else if (method === "DELETE") {
        response = import_aws.default.delete(url, options);
      } else {
        throw new Error(`Unsupported HTTP method: ${method}`);
      }
      if (response.statusCode >= 400) {
        let errorMessage = `AWS Lambda API error: ${response.statusCode} ${response.status}`;
        let errorDetails = {};
        try {
          errorDetails = JSON.parse(response.body);
          if (errorDetails.message) {
            errorMessage += ` - ${errorDetails.message}`;
          }
          if (errorDetails.errorMessage) {
            errorMessage += ` - ${errorDetails.errorMessage}`;
          }
          if (errorDetails.Type) {
            errorMessage += ` - Type: ${errorDetails.Type}`;
          }
          if (errorDetails.__type) {
            errorMessage += ` - ErrorType: ${errorDetails.__type}`;
          }
        } catch (_parseError) {
          errorMessage += ` - Raw response: ${response.body}`;
        }
        if (response.statusCode === 403) {
          errorMessage += `

\u{1F50D} 403 FORBIDDEN ERROR ANALYSIS:`;
          errorMessage += `
   \u2022 Request URL: ${url}`;
          errorMessage += `
   \u2022 HTTP Method: ${method}`;
          errorMessage += `
   \u2022 Region: ${this.region}`;
          if (body && (body.Code?.ImageUri || body.PackageType === "Image")) {
            errorMessage += `
   \u2022 Deployment Type: Container Image`;
            if (body.Code?.ImageUri) {
              errorMessage += `
   \u2022 Image URI: ${body.Code.ImageUri}`;
            }
            errorMessage += `

\u{1F4A1} CONTAINER IMAGE 403 TROUBLESHOOTING:`;
            errorMessage += `
   1. Missing ECR permissions - you need:`;
            errorMessage += `
      \u2022 ecr:GetAuthorizationToken`;
            errorMessage += `
      \u2022 ecr:BatchCheckLayerAvailability`;
            errorMessage += `
      \u2022 ecr:GetDownloadUrlForLayer`;
            errorMessage += `
      \u2022 ecr:BatchGetImage`;
            errorMessage += `
   2. Check if ECR repository exists:`;
            if (body.Code?.ImageUri) {
              const imageUri = body.Code.ImageUri;
              const repoMatch = imageUri.match(/\/([^:]+)/);
              if (repoMatch) {
                errorMessage += `
      aws ecr describe-repositories --repository-names ${repoMatch[1]} --region ${this.region}`;
              }
            }
            errorMessage += `
   3. Verify image exists in ECR repository`;
            errorMessage += `
   4. Ensure Lambda execution role has ECR permissions`;
          } else {
            errorMessage += `
   \u2022 Deployment Type: ZIP Package`;
            errorMessage += `

\u{1F4A1} ZIP PACKAGE 403 TROUBLESHOOTING:`;
            errorMessage += `
   1. Missing Lambda permissions - you need:`;
            errorMessage += `
      \u2022 lambda:CreateFunction`;
            errorMessage += `
      \u2022 lambda:GetFunction`;
            errorMessage += `
      \u2022 lambda:UpdateFunctionCode`;
            errorMessage += `
   2. Check IAM role ARN is valid and accessible`;
            errorMessage += `
   3. Verify role has lambda.amazonaws.com trust policy`;
          }
          if (errorDetails.message && errorDetails.message.includes("not authorized")) {
            errorMessage += `

\u{1F6A8} SPECIFIC AUTHORIZATION ERROR:`;
            errorMessage += `
   This is a credential/permission issue, not a configuration error.`;
            errorMessage += `
   Run: aws sts get-caller-identity`;
            errorMessage += `
   Then verify your credentials have the required permissions.`;
          }
        }
        errorMessage += `

\u{1F4CB} FULL ERROR DETAILS:`;
        errorMessage += `
   Status Code: ${response.statusCode}`;
        errorMessage += `
   Status Text: ${response.status || "N/A"}`;
        errorMessage += `
   Response Headers: ${JSON.stringify(response.headers || {}, null, 2)}`;
        errorMessage += `
   Response Body: ${response.body || "Empty"}`;
        if (body) {
          errorMessage += `
   Request Body: ${JSON.stringify(body, null, 2)}`;
        }
        throw new Error(errorMessage);
      }
      if (response.body) {
        try {
          return JSON.parse(response.body);
        } catch (error) {
          throw new Error(`Failed to parse AWS Lambda API response: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      return response;
    } catch (error) {
      throw new Error(`AWS Lambda API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  checkFunctionExists(functionName) {
    try {
      return this.makeAWSRequest("GET", `/2015-03-31/functions/${encodeURIComponent(functionName)}`);
    } catch (error) {
      if (error instanceof Error && error.message.includes("404")) {
        return null;
      }
      throw error;
    }
  }
  deleteLambdaFunction(functionName) {
    if (this.state.existing) {
      return;
    }
    try {
      this.makeAWSRequest("DELETE", `/2015-03-31/functions/${encodeURIComponent(functionName)}`);
    } catch (error) {
      throw new Error(`Failed to delete Lambda function ${functionName}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  waitForFunctionState(functionName, targetState, maxAttempts = 30) {
    for (let attempt = 0; attempt < maxAttempts; attempt++) {
      try {
        const response = this.checkFunctionExists(functionName);
        if (response) {
          const config = response.Configuration || response;
          const isTargetState = config.State === targetState;
          const isUpdateComplete = config.LastUpdateStatus === "Successful";
          if (isTargetState && isUpdateComplete) {
            return true;
          }
          if (config.State === "Failed" || config.LastUpdateStatus === "Failed") {
            throw new Error(`Function ${functionName} is in Failed state. State: ${config.State}, LastUpdateStatus: ${config.LastUpdateStatus}, Reason: ${config.StateReason}`);
          }
        }
        const start = Date.now();
        while (Date.now() - start < 5e3) {
        }
      } catch (error) {
        if (attempt === maxAttempts - 1) {
          throw error;
        }
      }
    }
    return false;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AWSLambdaEntity
});
