// Generated by MonkEC - targeting Goja runtime
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/monk-entities/src/netlify/netlifyBase.ts
var netlify_base_exports = {};
__export(netlify_base_exports, {
  NetlifyEntity: () => NetlifyEntity
});
module.exports = __toCommonJS(netlify_base_exports);
var import_base = require("monkec/base");
var import_http_client = require("monkec/http-client");
var import_cli = __toESM(require("cli"));
var import_secret = __toESM(require("secret"));
var NetlifyEntity = class extends import_base.MonkEntity {
  constructor() {
    super(...arguments);
    /**
     * Base URL for Netlify API
     */
    this.baseUrl = "https://api.netlify.com/api/v1";
  }
  /**
   * Initialize authentication and HTTP client before any operations
   */
  before() {
    const token = import_secret.default.get(this.definition.secret_ref);
    if (!token) {
      throw new Error(`Failed to retrieve API token from secret: ${this.definition.secret_ref}`);
    }
    this.apiToken = token;
    this.httpClient = new import_http_client.HttpClient({
      baseUrl: this.baseUrl,
      headers: {
        "Authorization": `Bearer ${this.apiToken}`,
        "Accept": "application/json",
        "Content-Type": "application/json"
      },
      parseJson: true,
      stringifyJson: true
    });
  }
  /**
   * Standard start implementation for Netlify entities
   */
  start() {
    import_cli.default.output(`Starting Netlify operations for: ${this.getEntityName()}`);
  }
  /**
   * Standard stop implementation for Netlify entities
   */
  stop() {
    import_cli.default.output(`Stopping Netlify operations for: ${this.getEntityName()}`);
  }
  /**
   * Helper method to make authenticated HTTP requests with consistent error handling
   */
  makeRequest(method, path, body) {
    try {
      const fullUrl = `${this.baseUrl}${path}`;
      import_cli.default.output(`\u{1F527} Making ${method} request to: ${fullUrl}`);
      if (body && method !== "GET") {
        import_cli.default.output(`\u{1F4E6} Request body: ${JSON.stringify(body, null, 2)}`);
      }
      const requestOptions = {
        headers: {
          "Authorization": `Bearer ${this.apiToken}`,
          "Accept": "application/json",
          "Content-Type": "application/json"
        }
      };
      if (method !== "GET" && body) {
        requestOptions.body = body;
      }
      const response = this.httpClient.request(method, path, requestOptions);
      import_cli.default.output(`\u{1F4E1} Response status: ${response.statusCode}`);
      if (!response.ok) {
        import_cli.default.output(`\u274C Error response body: ${response.data}`);
        throw new Error(`Netlify API error: ${response.statusCode} ${response.status} - ${response.data}`);
      }
      let responseData = response.data;
      if (typeof responseData === "string") {
        try {
          responseData = JSON.parse(responseData);
        } catch (e) {
        }
      }
      return responseData;
    } catch (error) {
      import_cli.default.output(`\u{1F50D} makeRequest caught error: ${typeof error}`);
      import_cli.default.output(`\u{1F50D} Error instanceof Error: ${error instanceof Error}`);
      let errorMessage = "Unknown error";
      if (error instanceof Error) {
        errorMessage = error.message;
        import_cli.default.output(`\u{1F50D} Error message: ${errorMessage}`);
      } else if (typeof error === "string") {
        errorMessage = error;
        import_cli.default.output(`\u{1F50D} String error: ${errorMessage}`);
      } else if (typeof error === "object" && error !== null) {
        try {
          errorMessage = JSON.stringify(error);
          import_cli.default.output(`\u{1F50D} Object error: ${errorMessage}`);
        } catch {
          errorMessage = String(error);
          import_cli.default.output(`\u{1F50D} Stringified object error: ${errorMessage}`);
        }
      } else {
        errorMessage = String(error);
        import_cli.default.output(`\u{1F50D} Other error: ${errorMessage}`);
      }
      throw new Error(`Netlify ${method} request to ${path} failed: ${errorMessage}`);
    }
  }
  /**
   * Helper method to check if a resource exists by making a GET request
   * Returns the resource data if it exists, null otherwise
   */
  checkResourceExists(path) {
    try {
      return this.makeRequest("GET", path);
    } catch (error) {
      return null;
    }
  }
  /**
   * Helper method to handle resource deletion with proper existing resource checks
   */
  deleteResource(path, resourceName) {
    if (this.state.existing) {
      import_cli.default.output(`${resourceName} wasn't created by this entity, skipping delete`);
      return;
    }
    try {
      this.makeRequest("DELETE", path);
      import_cli.default.output(`Successfully deleted ${resourceName}`);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "Unknown error";
      if (errorMessage.includes("500") || errorMessage.includes("unexpected response code 500")) {
        import_cli.default.output(`\u26A0\uFE0F  Warning: ${resourceName} may have dependencies or be in a transitional state`);
        import_cli.default.output(`The resource will be cleaned up by Netlify automatically`);
        import_cli.default.output(`Error details: ${errorMessage}`);
        return;
      }
      throw new Error(`Failed to delete ${resourceName}: ${errorMessage}`);
    }
  }
  /**
   * Helper method to wait for operations to complete
   */
  waitForOperation(operationId, maxAttempts = 40, delayMs = 2e3) {
    if (!operationId) return;
    let attempts = 0;
    while (attempts < maxAttempts) {
      try {
        const operationData = this.makeRequest("GET", `/operations/${operationId}`);
        if (operationData.operation) {
          if (operationData.operation.status === "finished" || operationData.operation.status === "completed") {
            import_cli.default.output(`\u2705 Operation ${operationId} completed successfully`);
            return;
          }
          if (operationData.operation.status === "failed") {
            throw new Error(`Operation failed: ${operationData.operation.error || "Unknown error"}`);
          }
        }
      } catch (error) {
      }
      attempts++;
      if (attempts < maxAttempts) {
        const start = Date.now();
        while (Date.now() - start < delayMs) {
        }
      }
    }
    throw new Error(`Operation ${operationId} timed out after ${maxAttempts} attempts`);
  }
};
NetlifyEntity.readiness = { period: 15, initialDelay: 2, attempts: 20 };
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  NetlifyEntity
});
