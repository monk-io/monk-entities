
// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// input/monk-entities/src/netlify/account.ts
const netlify-base = require("monk-entities/netlify-base");
const NetlifyEntity = netlify-base.NetlifyEntity;
const cli = require("cli");
var _Account = class _Account extends NetlifyEntity {
  getEntityName() {
    return "Netlify Account";
  }
  /**
   * Create/update the account entity
   * Fetches accounts from Netlify API and stores data in state
   */
  create() {
    const accounts = this.makeRequest("GET", "/accounts");
    this.state = {
      accounts: Array.isArray(accounts) ? accounts : [],
      existing: true
    };
    cli.output(`Found ${this.state.accounts.length} account(s)`);
  }
  /**
   * Update the account entity
   * Refreshes accounts from API
   */
  update() {
    this.create();
  }
  /**
   * Delete the account entity
   * Since this is just a read-only entity, deletion is a no-op
   */
  delete() {
    this.state = {
      accounts: [],
      existing: false
    };
    cli.output("Account entity is read-only - no deletion needed");
  }
  /**
   * Check if the account entity is ready
   */
  checkReadiness() {
    return true;
  }
};
__name(_Account, "Account");
var Account = _Account;



function main(def, state, ctx) {
  const entity = new Account(def, state, ctx);
  return entity.main(ctx);
}
