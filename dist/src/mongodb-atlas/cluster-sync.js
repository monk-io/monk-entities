
// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// input/monk-entities/src/mongodb-atlas/cluster.ts
const base = require("monk-entities/base");
const MongoDBAtlasEntity = base.MongoDBAtlasEntity;
const cli = require("cli");
var _Cluster = class _Cluster extends MongoDBAtlasEntity {
  getEntityName() {
    return this.definition.name;
  }
  /** Create a new MongoDB Atlas cluster */
  create() {
    const body = {
      "name": this.definition.name,
      "clusterType": "REPLICASET",
      "replicationSpecs": [
        {
          "regionConfigs": [
            {
              "electableSpecs": {
                "instanceSize": this.definition.instance_size,
                "nodeCount": 3
              },
              "providerName": "TENANT",
              "backingProviderName": this.definition.provider,
              "regionName": this.definition.region
            }
          ]
        }
      ]
    };
    const resObj = this.makeRequest("POST", `/groups/${this.definition.project_id}/clusters`, body);
    this.state = {
      id: resObj.id,
      name: resObj.name
    };
    if (this.definition.allow_ips && this.definition.allow_ips.length > 0) {
      this.configureIPAccessList();
    }
  }
  /** Configure IP access list for the cluster */
  configureIPAccessList() {
    if (!this.definition.allow_ips || this.definition.allow_ips.length === 0) {
      return;
    }
    const accessList = this.definition.allow_ips.map((ip) => ({
      "ipAddress": ip,
      "comment": "Added by MonkeC entity"
    }));
    try {
      this.makeRequest("POST", `/groups/${this.definition.project_id}/accessList`, accessList);
    } catch (error) {
      cli.output(`Warning: Failed to configure IP access list: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  update() {
    if (!this.state.id) {
      this.create();
      return;
    }
    const clusterData = this.checkResourceExists(`/groups/${this.definition.project_id}/clusters/${this.definition.name}`);
    if (clusterData) {
      this.state = {
        ...this.state,
        id: clusterData.id,
        name: clusterData.name,
        connection_standard: clusterData.connectionStrings?.standard,
        connection_srv: clusterData.connectionStrings?.standardSrv
      };
    }
  }
  delete() {
    if (!this.state.id) {
      cli.output("Cluster does not exist, nothing to delete");
      return;
    }
    this.deleteResource(`/groups/${this.definition.project_id}/clusters/${this.definition.name}`, "Cluster");
  }
  checkReadiness() {
    if (!this.state.id) {
      return false;
    }
    const clusterData = this.checkResourceExists(`/groups/${this.definition.project_id}/clusters/${this.definition.name}`);
    if (!clusterData) {
      return false;
    }
    if (clusterData.stateName === "IDLE" && clusterData.connectionStrings) {
      this.state.connection_standard = clusterData.connectionStrings.standard;
      this.state.connection_srv = clusterData.connectionStrings.standardSrv;
      return true;
    }
    return false;
  }
};
__name(_Cluster, "Cluster");
var Cluster = _Cluster;



function main(def, state, ctx) {
  const entity = new Cluster(def, state, ctx);
  return entity.main(ctx);
}
