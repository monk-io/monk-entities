
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/neon/project.ts
const base = require("monkec/base");
const action = base.action;
const neonBase = require("neon/neon-base");
const NeonEntity = neonBase.NeonEntity;
const cli = require("cli");
var _createBranch_dec, _listBranches_dec, _debugAuth_dec, _listAllProjects_dec, _getProject_dec, _a, _init;
var _Project = class _Project extends (_a = NeonEntity, _getProject_dec = [action("Get project details")], _listAllProjects_dec = [action("List all projects")], _debugAuth_dec = [action("Debug authentication")], _listBranches_dec = [action("List branches for this project")], _createBranch_dec = [action("Create a new branch")], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  getEntityName() {
    return `Neon Project ${this.definition.name || "unnamed"}`;
  }
  findExistingProject() {
    try {
      const projectsResponse = this.makeRequest("GET", "/projects");
      return projectsResponse.projects?.find(
        (p) => p.name === this.definition.name
      );
    } catch (error) {
      cli.output(`\u26A0\uFE0F Could not check for existing projects: ${error}`);
      return null;
    }
  }
  create() {
    const existingProject = this.findExistingProject();
    if (existingProject) {
      this.state.existing = true;
      this.state.id = existingProject.id;
      this.state.name = existingProject.name;
      this.state.status = existingProject.status;
      this.state.region = existingProject.region;
      this.state.createdAt = existingProject.created_at;
      this.state.lastUpdated = existingProject.updated_at;
      this.state.operationId = void 0;
      cli.output(`\u2705 Using existing project: ${existingProject.name} (${existingProject.id})`);
      return;
    }
    const projectData = {
      project: {
        name: this.definition.name,
        pg_version: this.definition.pg_version,
        region_id: this.definition.region_id
      }
    };
    const response = this.makeRequest("POST", "/projects", projectData);
    const project = response.project;
    this.state.id = project.id;
    this.state.name = project.name;
    this.state.status = project.status;
    this.state.region = project.region;
    this.state.createdAt = project.created_at;
    this.state.lastUpdated = project.updated_at;
    if (response.operations && Array.isArray(response.operations) && response.operations.length > 0) {
      this.state.operationId = response.operations[0].id;
      cli.output(`\u{1F4CB} Project creation operation ID: ${this.state.operationId}`);
    } else {
      cli.output(`\u2139\uFE0F No operations returned from project creation`);
      this.state.operationId = void 0;
    }
  }
  start() {
    if (this.state.operationId) {
      this.waitForOperation(this.state.id, this.state.operationId);
    }
  }
  getProject(_args) {
    if (!this.state.id) {
      throw new Error("Project ID not available");
    }
    const project = this.makeRequest("GET", `/projects/${this.state.id}`);
    cli.output(`Project: ${JSON.stringify(project, null, 2)}`);
  }
  delete() {
    if (!this.state.id) {
      cli.output("No project ID available for deletion");
      return;
    }
    this.deleteResource(`/projects/${this.state.id}`, `Project ${this.state.name}`);
  }
  listAllProjects(_args) {
    const response = this.makeRequest("GET", "/projects");
    cli.output("\u{1F4CB} All Neon Projects:");
    if (response.projects && response.projects.length > 0) {
      response.projects.forEach((project) => {
        cli.output(`  \u2022 ${project.name} (${project.id}) - ${project.status} - ${project.region}`);
      });
    } else {
      cli.output("  No projects found");
    }
    return response;
  }
  debugAuth(_args) {
    cli.output("\u{1F510} Testing Neon API authentication...");
    try {
      const response = this.makeRequest("GET", "/projects");
      cli.output(`\u2705 Authentication successful! Found ${response.projects?.length || 0} projects`);
      return response;
    } catch (error) {
      cli.output(`\u274C Authentication failed: ${error}`);
      throw error;
    }
  }
  listBranches(_args) {
    if (!this.state.id) {
      throw new Error("Project ID not available");
    }
    const response = this.makeRequest("GET", `/projects/${this.state.id}/branches`);
    cli.output(`\u{1F4CB} Branches for project ${this.state.name}:`);
    if (response.branches && response.branches.length > 0) {
      response.branches.forEach((branch) => {
        cli.output(`  \u2022 ${branch.name} (${branch.id}) - ${branch.current_state}`);
      });
    } else {
      cli.output("  No branches found");
    }
    return response;
  }
  createBranch(args) {
    if (!this.state.id) {
      throw new Error("Project ID not available");
    }
    const branchName = args?.name || `branch-${Date.now()}`;
    const parentId = args?.parent_id;
    const parentLsn = args?.parent_lsn;
    cli.output(`\u{1F33F} Creating branch '${branchName}' in project ${this.state.name}...`);
    const branchData = {
      branch: {
        name: branchName,
        parent_id: parentId,
        parent_lsn: parentLsn
      },
      endpoints: [
        {
          type: "read_write",
          settings: {
            pg_settings: {}
          }
        }
      ]
    };
    const response = this.makeRequest(
      "POST",
      `/projects/${this.state.id}/branches`,
      branchData
    );
    cli.output(`\u2705 Branch '${branchName}' created successfully!`);
    cli.output(`   Branch ID: ${response.branch.id}`);
    cli.output(`   State: ${response.branch.current_state}`);
    return response;
  }
  checkReadiness() {
    if (!this.state.id) {
      return false;
    }
    if (this.state.operationId) {
      try {
        cli.output(`\u{1F50D} Checking project operation status for ID: ${this.state.operationId}`);
        const operationData = this.makeRequest("GET", `/projects/${this.state.id}/operations/${this.state.operationId}`);
        cli.output(`\u{1F4CA} Operation response structure: ${JSON.stringify(operationData, null, 2)}`);
        const operation = operationData.operation || operationData;
        if (operation) {
          cli.output(`\u{1F4CA} Project operation status: ${operation.status}`);
          if (operation.status === "failed") {
            cli.output(`\u274C Project operation failed: ${operation.error || "Unknown error"}`);
            return false;
          }
          if (operation.status === "running" || operation.status === "scheduling") {
            cli.output(`\u23F3 Project operation still in progress: ${operation.status}`);
            return false;
          }
          if (operation.status === "completed" || operation.status === "finished") {
            cli.output(`\u2705 Project operation completed successfully: ${operation.status}`);
            this.state.operationId = void 0;
          } else {
            cli.output(`\u26A0\uFE0F Project operation in unknown state: ${operation.status}`);
            return false;
          }
        } else {
          cli.output(`\u26A0\uFE0F No operation data found in response`);
          this.state.operationId = void 0;
        }
      } catch (error) {
        cli.output(`\u26A0\uFE0F Error checking project operation status: ${error}`);
        this.state.operationId = void 0;
      }
    } else {
      cli.output(`\u2139\uFE0F No operation ID for project, checking accessibility directly`);
    }
    try {
      cli.output(`\u{1F50D} Checking project accessibility for ID: ${this.state.id}`);
      const projectData = this.makeRequest("GET", `/projects/${this.state.id}`);
      if (projectData.project) {
        cli.output(`\u2705 Project is accessible`);
        this.state.name = projectData.project.name;
        this.state.region = projectData.project.region_id;
        this.state.createdAt = projectData.project.created_at;
        this.state.lastUpdated = projectData.project.updated_at;
        this.state.status = "active";
        return true;
      }
      cli.output(`\u274C No project data in response`);
      return false;
    } catch (error) {
      cli.output(`\u274C Error checking project accessibility: ${error}`);
      return false;
    }
  }
  update() {
    if (!this.state.id) {
      throw new Error("Project ID not available for update");
    }
    const project = this.makeRequest("GET", `/projects/${this.state.id}`);
    this.state.name = project.project.name;
    this.state.status = project.project.status;
    this.state.region = project.project.region;
    this.state.lastUpdated = project.project.updated_at;
    cli.output(`\u2705 Project ${this.state.name} updated successfully`);
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "getProject", _getProject_dec, _Project);
__decorateElement(_init, 1, "listAllProjects", _listAllProjects_dec, _Project);
__decorateElement(_init, 1, "debugAuth", _debugAuth_dec, _Project);
__decorateElement(_init, 1, "listBranches", _listBranches_dec, _Project);
__decorateElement(_init, 1, "createBranch", _createBranch_dec, _Project);
__decoratorMetadata(_init, _Project);
__name(_Project, "Project");
var Project = _Project;



function main(def, state, ctx) {
  const entity = new Project(def, state, ctx);
  return entity.main(ctx);
}
