
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/neon/branch.ts
const base = require("monkec/base");
const action = base.action;
const neonBase = require("neon/neon-base");
const NeonEntity = neonBase.NeonEntity;
const cli = require("cli");
var _getBranch_dec, _a, _init;
var _Branch = class _Branch extends (_a = NeonEntity, _getBranch_dec = [action("Get branch details")], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  getEntityName() {
    return `Neon Branch ${this.definition.name || "unnamed"} in project ${this.definition.projectId}`;
  }
  create() {
    const branchData = {
      branch: {
        name: this.definition.name,
        parent_id: this.definition.parentId,
        parent_lsn: this.definition.parentLsn
      },
      endpoints: [
        {
          type: "read_write",
          settings: {
            pg_settings: {}
          }
        }
      ]
    };
    const response = this.makeRequest(
      "POST",
      `/projects/${this.definition.projectId}/branches`,
      branchData
    );
    const branch = response.branch;
    this.state.id = branch.id;
    this.state.name = branch.name;
    this.state.currentState = branch.current_state;
    this.state.pendingState = branch.pending_state;
    this.state.parentId = branch.parent_id;
    this.state.parentLsn = branch.parent_lsn;
    this.state.createdAt = branch.created_at;
    this.state.updatedAt = branch.updated_at;
    if (response.operations && response.operations.length > 0) {
      this.state.operationIds = response.operations.map((op) => op.id);
    }
    if (response.endpoints && response.endpoints.length > 0) {
      this.state.endpoints = response.endpoints.map((ep) => ({
        id: ep.id,
        type: ep.type,
        state: ep.state,
        host: ep.host
      }));
    }
  }
  start() {
    if (this.state.operationIds && this.state.operationIds.length > 0) {
      this.waitForOperations(this.definition.projectId, this.state.operationIds);
    }
  }
  getBranch(_args) {
    if (!this.state.id) {
      throw new Error("Branch ID not available");
    }
    const branch = this.makeRequest("GET", `/projects/${this.definition.projectId}/branches/${this.state.id}`);
    cli.output(`Branch: ${JSON.stringify(branch, null, 2)}`);
  }
  delete() {
    if (!this.state.id) {
      cli.output("No branch ID available for deletion");
      return;
    }
    this.deleteResource(`/projects/${this.definition.projectId}/branches/${this.state.id}`, `Branch ${this.state.name}`);
  }
  checkReadiness() {
    if (!this.state.id) {
      return false;
    }
    try {
      const branch = this.makeRequest("GET", `/projects/${this.definition.projectId}/branches/${this.state.id}`);
      const isReady = branch.branch && branch.branch.current_state === "ready";
      if (isReady) {
        cli.output(`\u2705 Branch ${this.state.name} is ready (state: ${branch.branch.current_state})`);
      } else {
        cli.output(`\u23F3 Branch ${this.state.name} is not ready yet (state: ${branch.branch?.current_state || "unknown"})`);
      }
      return isReady;
    } catch (error) {
      cli.output(`\u274C Error checking branch readiness: ${error}`);
      return false;
    }
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "getBranch", _getBranch_dec, _Branch);
__decoratorMetadata(_init, _Branch);
__name(_Branch, "Branch");
var Branch = _Branch;



function main(def, state, ctx) {
  const entity = new Branch(def, state, ctx);
  return entity.main(ctx);
}
