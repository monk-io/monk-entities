
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/digitalocean-spaces/bucket.ts
const doS3Base = require("digitalocean-spaces/do-s3-base");
const DOSpacesS3Entity = doS3Base.DOSpacesS3Entity;
const cli = require("cli");
const MonkecBase = require("monkec/base");
var action2 = MonkecBase.action;
var _getBucketStatistics_dec, _emptyBucket_dec, _generatePresignedUrl_dec, _listObjects_dec, _getBucketInfo_dec, _a, _init;
var _SpacesBucket = class _SpacesBucket extends (_a = DOSpacesS3Entity, _getBucketInfo_dec = [action2()], _listObjects_dec = [action2()], _generatePresignedUrl_dec = [action2()], _emptyBucket_dec = [action2()], _getBucketStatistics_dec = [action2()], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  getBucketName() {
    return this.definition.bucket_name;
  }
  create() {
    const bucketName = this.getBucketName();
    if (this.bucketExists(bucketName)) {
      this.state.existing = true;
      this.state.bucket_name = bucketName;
      this.state.region = this.region;
      this.state.endpoint = `${this.region}.digitaloceanspaces.com`;
      cli.output(`Space '${bucketName}' already exists in region ${this.region}`);
      this.configureBucket();
      return;
    }
    this.createBucket(bucketName);
    this.state.existing = true;
    ;
    this.state.bucket_name = bucketName;
    this.state.region = this.region;
    this.state.endpoint = `${this.region}.digitaloceanspaces.com`;
    cli.output(`Created Space '${bucketName}' in region ${this.region}`);
    this.configureBucket();
  }
  update() {
    if (!this.state.bucket_name) {
      this.create();
      return;
    }
    if (!this.state.endpoint) {
      this.state.endpoint = `${this.region}.digitaloceanspaces.com`;
    }
    this.configureBucket();
  }
  delete() {
    const bucketName = this.state.bucket_name || this.getBucketName();
    if (!bucketName) {
      cli.output("No Space name available, nothing to delete");
      return;
    }
    this.deleteBucket(bucketName);
    this.state.bucket_name = void 0;
    this.state.region = void 0;
    this.state.endpoint = void 0;
    this.state.existing = false;
    cli.output(`Deleted Space '${bucketName}'`);
  }
  checkReadiness() {
    if (!this.getBucketName()) return false;
    try {
      return this.bucketExists(this.getBucketName());
    } catch (_e) {
      return false;
    }
  }
  configureBucket() {
    const bucketName = this.getBucketName();
    if (this.definition.versioning !== void 0) {
      try {
        this.setBucketVersioning(bucketName, !!this.definition.versioning);
      } catch (e) {
        cli.output(`Warning: failed to set versioning: ${e.message}`);
      }
    }
    const pra = this.definition.public_read_access ?? false;
    const pwa = this.definition.public_write_access ?? false;
    try {
      this.setBucketPublicAccessBlock(bucketName, pra, pwa);
    } catch (e) {
      cli.output(`Warning: public access config not applied: ${e.message}`);
    }
    if (this.definition.cors_configuration?.cors_rules) {
      try {
        this.setBucketCors(bucketName, [...this.definition.cors_configuration.cors_rules]);
      } catch (e) {
        cli.output(`Warning: failed to set CORS: ${e.message}`);
      }
    }
    if (this.definition.lifecycle_configuration?.rules) {
      try {
        this.setBucketLifecycle(bucketName, [...this.definition.lifecycle_configuration.rules]);
      } catch (e) {
        cli.output(`Warning: failed to set lifecycle: ${e.message}`);
      }
    }
    if (this.definition.tags) {
      try {
        this.setBucketTags(bucketName, this.definition.tags);
      } catch (e) {
        cli.output(`Warning: failed to set tags: ${e.message}`);
      }
    }
  }
  getBucketInfo(_args) {
    const bucketName = this.getBucketName();
    try {
      const location = this.getBucketLocation(bucketName);
      const info = {
        bucket_name: bucketName,
        region: this.region,
        location: location.LocationConstraint || this.region,
        url: this.getBucketUrl(bucketName)
      };
      cli.output(`Bucket Information:
${JSON.stringify(info, null, 2)}`);
    } catch (e) {
      throw new Error(`Failed to get bucket info: ${e.message}`);
    }
  }
  listObjects(args) {
    const bucketName = this.getBucketName();
    const prefix = args?.prefix || "";
    const maxKeys = parseInt(args?.max_keys || "1000", 10);
    const url = this.getBucketUrl(bucketName, `?list-type=2&max-keys=${maxKeys}${prefix ? `&prefix=${encodeURIComponent(prefix)}` : ""}`);
    try {
      const listResponse = this.listBucketObjects(url);
      const objectInfo = this.parseObjectInfoFromResponse(listResponse.body);
      cli.output(`Found ${objectInfo.length} objects in bucket ${bucketName}:`);
      if (objectInfo.length > 0) {
        objectInfo.forEach((obj) => cli.output(`  - ${obj.key} (${obj.size} bytes, modified: ${obj.lastModified})`));
      } else {
        cli.output("  (bucket is empty)");
      }
    } catch (e) {
      throw new Error(`Failed to list objects: ${e.message}`);
    }
  }
  generatePresignedUrl(args) {
    const bucketName = this.getBucketName();
    const objectKey = args?.object_key;
    const method = args?.method || "GET";
    const expires = parseInt(args?.expires || "3600", 10);
    if (!objectKey) throw new Error("object_key parameter is required");
    const url = this.getBucketUrl(bucketName, objectKey);
    try {
      const presigned = this.generatePresignedUrlForObject(url, method, expires);
      cli.output(`Presigned URL for ${method} ${objectKey}:`);
      cli.output(`URL: ${presigned.url}`);
      if (presigned.headers && Object.keys(presigned.headers).length > 0) {
        cli.output(`Headers: ${JSON.stringify(presigned.headers, null, 2)}`);
      }
    } catch (e) {
      throw new Error(`Failed to generate presigned URL: ${e.message}`);
    }
  }
  emptyBucket(_args) {
    const bucketName = this.getBucketName();
    try {
      let deleted = 0;
      let continuationToken;
      do {
        let listUrl = this.getBucketUrl(bucketName, "?list-type=2&max-keys=1000");
        if (continuationToken) listUrl += `&continuation-token=${encodeURIComponent(continuationToken)}`;
        const listResponse = this.listBucketObjects(listUrl);
        const objectKeys = this.parseObjectKeysFromResponse(listResponse.body);
        if (objectKeys.length === 0) break;
        deleted += this.deleteObjectsBatch(bucketName, objectKeys);
        const nextTokenMatch = listResponse.body.match(/<NextContinuationToken>(.*?)<\/NextContinuationToken>/);
        continuationToken = nextTokenMatch ? nextTokenMatch[1] : void 0;
      } while (continuationToken);
      cli.output(`Successfully deleted ${deleted} objects from bucket ${bucketName}`);
    } catch (e) {
      throw new Error(`Failed to empty bucket: ${e.message}`);
    }
  }
  getBucketStatistics(_args) {
    const bucketName = this.getBucketName();
    try {
      let totalObjects = 0;
      let totalSize = 0;
      let continuationToken;
      do {
        let listUrl = this.getBucketUrl(bucketName, "?list-type=2&max-keys=1000");
        if (continuationToken) listUrl += `&continuation-token=${encodeURIComponent(continuationToken)}`;
        const listResponse = this.listBucketObjects(listUrl);
        const objectInfo = this.parseObjectInfoFromResponse(listResponse.body);
        totalObjects += objectInfo.length;
        totalSize += objectInfo.reduce((sum, obj) => sum + parseInt(obj.size, 10), 0);
        const nextTokenMatch = listResponse.body.match(/<NextContinuationToken>(.*?)<\/NextContinuationToken>/);
        continuationToken = nextTokenMatch ? nextTokenMatch[1] : void 0;
      } while (continuationToken);
      const stats = {
        bucket_name: bucketName,
        total_objects: totalObjects,
        total_size_bytes: totalSize,
        total_size_mb: Math.round(totalSize / (1024 * 1024) * 100) / 100,
        total_size_gb: Math.round(totalSize / (1024 * 1024 * 1024) * 100) / 100
      };
      cli.output(`Bucket Statistics:
${JSON.stringify(stats, null, 2)}`);
    } catch (e) {
      throw new Error(`Failed to get bucket statistics: ${e.message}`);
    }
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "getBucketInfo", _getBucketInfo_dec, _SpacesBucket);
__decorateElement(_init, 1, "listObjects", _listObjects_dec, _SpacesBucket);
__decorateElement(_init, 1, "generatePresignedUrl", _generatePresignedUrl_dec, _SpacesBucket);
__decorateElement(_init, 1, "emptyBucket", _emptyBucket_dec, _SpacesBucket);
__decorateElement(_init, 1, "getBucketStatistics", _getBucketStatistics_dec, _SpacesBucket);
__decoratorMetadata(_init, _SpacesBucket);
__name(_SpacesBucket, "SpacesBucket");
var SpacesBucket = _SpacesBucket;



function main(def, state, ctx) {
  const entity = new SpacesBucket(def, state, ctx);
  return entity.main(ctx);
}
