
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/netlify/deploy.ts
const netlifyBase = require("netlify/netlify-base");
const NetlifyEntity = netlifyBase.NetlifyEntity;
const base = require("monkec/base");
const action = base.action;
const cli = require("cli");
var _getDeployLog_dec, _unlockDeploy_dec, _lockDeploy_dec, _retryDeploy_dec, _cancelDeploy_dec, _getDeploy_dec, _a, _init;
var _Deploy = class _Deploy extends (_a = NetlifyEntity, _getDeploy_dec = [action("get-deploy")], _cancelDeploy_dec = [action("cancel-deploy")], _retryDeploy_dec = [action("retry-deploy")], _lockDeploy_dec = [action("lock-deploy")], _unlockDeploy_dec = [action("unlock-deploy")], _getDeployLog_dec = [action("get-deploy-log")], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  getEntityName() {
    return `Deploy for site ${this.definition.site_id}`;
  }
  /** Create a new Netlify deploy */
  create() {
    const body = {
      site_id: this.definition.site_id
    };
    if (this.definition.dir) {
      body.dir = this.definition.dir;
    }
    if (this.definition.functions_dir) {
      body.functions_dir = this.definition.functions_dir;
    }
    if (this.definition.prod !== void 0) {
      body.prod = this.definition.prod;
    }
    if (this.definition.draft !== void 0) {
      body.draft = this.definition.draft;
    }
    if (this.definition.branch) {
      body.branch = this.definition.branch;
    }
    if (this.definition.commit_ref) {
      body.commit_ref = this.definition.commit_ref;
    }
    const deploy = this.makeRequest("POST", "/deploys", body);
    this.state = {
      id: deploy.id,
      site_id: deploy.site_id,
      deploy_url: deploy.deploy_url,
      state: deploy.state,
      error_message: deploy.error_message,
      created_at: deploy.created_at,
      published_at: deploy.published_at,
      deploy_time: deploy.deploy_time,
      framework: deploy.framework,
      function_count: deploy.function_count,
      existing: false
    };
    cli.output(`\u2705 Created Netlify deploy: ${deploy.id} (${deploy.deploy_url})`);
  }
  update() {
    if (!this.state.id) {
      this.create();
      return;
    }
    cli.output("Deploy updates are typically done by creating new deploys");
  }
  delete() {
    if (!this.state.id) {
      cli.output("Deploy does not exist, nothing to delete");
      return;
    }
    this.deleteResource(`/deploys/${this.state.id}`, "Deploy");
  }
  checkReadiness() {
    if (!this.state.id) {
      return false;
    }
    try {
      const deploy = this.makeRequest("GET", `/deploys/${this.state.id}`);
      return deploy.state === "ready" || deploy.state === "published";
    } catch (error) {
      return false;
    }
  }
  getDeploy() {
    if (!this.state.id) {
      throw new Error("Deploy does not exist");
    }
    const deploy = this.makeRequest("GET", `/deploys/${this.state.id}`);
    cli.output(`Deploy: ${deploy.id}`);
    cli.output(`Site ID: ${deploy.site_id}`);
    cli.output(`URL: ${deploy.deploy_url}`);
    cli.output(`State: ${deploy.state}`);
    cli.output(`Created: ${deploy.created_at}`);
    if (deploy.published_at) {
      cli.output(`Published: ${deploy.published_at}`);
    }
    if (deploy.deploy_time) {
      cli.output(`Deploy time: ${deploy.deploy_time}s`);
    }
    if (deploy.framework) {
      cli.output(`Framework: ${deploy.framework}`);
    }
    if (deploy.function_count) {
      cli.output(`Functions: ${deploy.function_count}`);
    }
    if (deploy.error_message) {
      cli.output(`Error: ${deploy.error_message}`);
    }
  }
  cancelDeploy() {
    if (!this.state.id) {
      throw new Error("Deploy does not exist");
    }
    const cancelledDeploy = this.makeRequest("POST", `/deploys/${this.state.id}/cancel`);
    cli.output(`\u2705 Cancelled deploy: ${cancelledDeploy.id}`);
    cli.output(`State: ${cancelledDeploy.state}`);
  }
  retryDeploy() {
    if (!this.state.id) {
      throw new Error("Deploy does not exist");
    }
    const retriedDeploy = this.makeRequest("POST", `/deploys/${this.state.id}/retry`);
    cli.output(`\u2705 Retried deploy: ${retriedDeploy.id}`);
    cli.output(`New deploy URL: ${retriedDeploy.deploy_url}`);
    cli.output(`State: ${retriedDeploy.state}`);
  }
  lockDeploy() {
    if (!this.state.id) {
      throw new Error("Deploy does not exist");
    }
    const lockedDeploy = this.makeRequest("POST", `/deploys/${this.state.id}/lock`);
    cli.output(`\u2705 Locked deploy: ${lockedDeploy.id}`);
    cli.output(`Locked: ${lockedDeploy.locked}`);
  }
  unlockDeploy() {
    if (!this.state.id) {
      throw new Error("Deploy does not exist");
    }
    const unlockedDeploy = this.makeRequest("POST", `/deploys/${this.state.id}/unlock`);
    cli.output(`\u2705 Unlocked deploy: ${unlockedDeploy.id}`);
    cli.output(`Locked: ${unlockedDeploy.locked}`);
  }
  getDeployLog() {
    if (!this.state.id) {
      throw new Error("Deploy does not exist");
    }
    const log = this.makeRequest("GET", `/deploys/${this.state.id}/log`);
    cli.output(`Deploy log for ${this.state.id}:`);
    cli.output(log);
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "getDeploy", _getDeploy_dec, _Deploy);
__decorateElement(_init, 1, "cancelDeploy", _cancelDeploy_dec, _Deploy);
__decorateElement(_init, 1, "retryDeploy", _retryDeploy_dec, _Deploy);
__decorateElement(_init, 1, "lockDeploy", _lockDeploy_dec, _Deploy);
__decorateElement(_init, 1, "unlockDeploy", _unlockDeploy_dec, _Deploy);
__decorateElement(_init, 1, "getDeployLog", _getDeployLog_dec, _Deploy);
__decoratorMetadata(_init, _Deploy);
__name(_Deploy, "Deploy");
var Deploy = _Deploy;



function main(def, state, ctx) {
  const entity = new Deploy(def, state, ctx);
  return entity.main(ctx);
}
