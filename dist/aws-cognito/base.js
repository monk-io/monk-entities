// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/aws-cognito/base.ts
var base_exports = {};
__export(base_exports, {
  AWSCognitoEntity: () => AWSCognitoEntity
});
module.exports = __toCommonJS(base_exports);
var import_base = require("monkec/base");
var import_aws = __toESM(require("cloud/aws"));
var AWSCognitoEntity = class extends import_base.MonkEntity {
  constructor() {
    super(...arguments);
    __publicField(this, "region");
  }
  before() {
    this.region = this.definition.region;
  }
  /**
   * Makes a request to AWS Cognito Identity Provider API
   * Used for User Pool operations
   */
  makeCognitoIdpRequest(action, body = {}) {
    const url = `https://cognito-idp.${this.region}.amazonaws.com/`;
    const options = {
      service: "cognito-idp",
      region: this.region,
      headers: {
        "Content-Type": "application/x-amz-json-1.1",
        "X-Amz-Target": `AWSCognitoIdentityProviderService.${action}`
      },
      timeout: 3e4
    };
    if (body && Object.keys(body).length > 0) {
      options.body = JSON.stringify(body);
    }
    try {
      const response = import_aws.default.post(url, options);
      if (response.statusCode >= 400) {
        let errorMessage = `AWS Cognito IDP API error: ${response.statusCode} ${response.status}`;
        let errorDetails = {};
        try {
          errorDetails = JSON.parse(response.body);
          if (errorDetails.message) {
            errorMessage += ` - ${errorDetails.message}`;
          }
          if (errorDetails.__type) {
            errorMessage += ` - Type: ${errorDetails.__type}`;
          }
          if (errorDetails.code) {
            errorMessage += ` - Code: ${errorDetails.code}`;
          }
        } catch (_parseError) {
          errorMessage += ` - Raw response: ${response.body}`;
        }
        if (response.statusCode === 403) {
          errorMessage += `

\u{1F50D} 403 FORBIDDEN ERROR ANALYSIS:`;
          errorMessage += `
   \u2022 Request URL: ${url}`;
          errorMessage += `
   \u2022 Action: ${action}`;
          errorMessage += `
   \u2022 Region: ${this.region}`;
          errorMessage += `

\u{1F4A1} COGNITO 403 TROUBLESHOOTING:`;
          errorMessage += `
   1. Missing Cognito permissions - you need:`;
          errorMessage += `
      \u2022 cognito-idp:CreateUserPool`;
          errorMessage += `
      \u2022 cognito-idp:DescribeUserPool`;
          errorMessage += `
      \u2022 cognito-idp:UpdateUserPool`;
          errorMessage += `
      \u2022 cognito-idp:DeleteUserPool`;
          errorMessage += `
      \u2022 cognito-idp:ListUserPools`;
          errorMessage += `
   2. Check if you have the required IAM policy attached`;
          errorMessage += `
   3. Verify your AWS credentials are valid`;
          errorMessage += `
   4. Ensure the region is correct`;
        }
        errorMessage += `

\u{1F4CB} FULL ERROR DETAILS:`;
        errorMessage += `
   Status Code: ${response.statusCode}`;
        errorMessage += `
   Status Text: ${response.status || "N/A"}`;
        errorMessage += `
   Response Headers: ${JSON.stringify(response.headers || {}, null, 2)}`;
        errorMessage += `
   Response Body: ${response.body || "Empty"}`;
        errorMessage += `
   Request Body: ${JSON.stringify(body, null, 2)}`;
        throw new Error(errorMessage);
      }
      if (response.body) {
        try {
          return JSON.parse(response.body);
        } catch (error) {
          throw new Error(`Failed to parse AWS Cognito IDP API response: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      return response;
    } catch (error) {
      throw new Error(`AWS Cognito IDP API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Makes a request to AWS Cognito Identity API
   * Used for Identity Pool operations
   */
  makeCognitoIdentityRequest(action, body = {}) {
    const url = `https://cognito-identity.${this.region}.amazonaws.com/`;
    const options = {
      service: "cognito-identity",
      region: this.region,
      headers: {
        "Content-Type": "application/x-amz-json-1.1",
        "X-Amz-Target": `AWSCognitoIdentityService.${action}`
      },
      timeout: 3e4
    };
    if (body && Object.keys(body).length > 0) {
      options.body = JSON.stringify(body);
    }
    try {
      const response = import_aws.default.post(url, options);
      if (response.statusCode >= 400) {
        let errorMessage = `AWS Cognito Identity API error: ${response.statusCode} ${response.status}`;
        let errorDetails = {};
        try {
          errorDetails = JSON.parse(response.body);
          if (errorDetails.message) {
            errorMessage += ` - ${errorDetails.message}`;
          }
          if (errorDetails.__type) {
            errorMessage += ` - Type: ${errorDetails.__type}`;
          }
          if (errorDetails.code) {
            errorMessage += ` - Code: ${errorDetails.code}`;
          }
        } catch (_parseError) {
          errorMessage += ` - Raw response: ${response.body}`;
        }
        throw new Error(errorMessage);
      }
      if (response.body) {
        try {
          return JSON.parse(response.body);
        } catch (error) {
          throw new Error(`Failed to parse AWS Cognito Identity API response: ${error instanceof Error ? error.message : "Unknown error"}`);
        }
      }
      return response;
    } catch (error) {
      throw new Error(`AWS Cognito Identity API request failed: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Checks if a User Pool exists by name
   */
  checkUserPoolExists(poolName) {
    try {
      const response = this.makeCognitoIdpRequest("ListUserPools", {
        MaxResults: 60
        // Maximum allowed
      });
      const userPools = response.UserPools;
      if (userPools) {
        for (const pool of userPools) {
          if (pool.Name === poolName) {
            const detailResponse = this.makeCognitoIdpRequest("DescribeUserPool", {
              UserPoolId: pool.Id
            });
            return detailResponse;
          }
        }
      }
      return null;
    } catch (error) {
      if (error instanceof Error && (error.message.includes("404") || error.message.includes("ResourceNotFoundException"))) {
        return null;
      }
      throw error;
    }
  }
  /**
   * Checks if a User Pool exists by ID
   */
  checkUserPoolExistsById(userPoolId) {
    try {
      const response = this.makeCognitoIdpRequest("DescribeUserPool", {
        UserPoolId: userPoolId
      });
      return response;
    } catch (error) {
      if (error instanceof Error && (error.message.includes("404") || error.message.includes("ResourceNotFoundException"))) {
        return null;
      }
      throw error;
    }
  }
  /**
   * Checks if an Identity Pool exists by name
   */
  checkIdentityPoolExists(poolName) {
    try {
      const response = this.makeCognitoIdentityRequest("ListIdentityPools", {
        MaxResults: 60
        // Maximum allowed
      });
      const identityPools = response.IdentityPools;
      if (identityPools) {
        for (const pool of identityPools) {
          if (pool.IdentityPoolName === poolName) {
            const detailResponse = this.makeCognitoIdentityRequest("DescribeIdentityPool", {
              IdentityPoolId: pool.IdentityPoolId
            });
            return detailResponse;
          }
        }
      }
      return null;
    } catch (error) {
      if (error instanceof Error && (error.message.includes("404") || error.message.includes("ResourceNotFoundException"))) {
        return null;
      }
      throw error;
    }
  }
  /**
   * Deletes a User Pool (only if we created it)
   */
  deleteUserPool(userPoolId) {
    if (this.state.existing) {
      return;
    }
    try {
      this.makeCognitoIdpRequest("DeleteUserPool", {
        UserPoolId: userPoolId
      });
    } catch (error) {
      throw new Error(`Failed to delete User Pool ${userPoolId}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Deletes an Identity Pool (only if we created it)
   */
  deleteIdentityPool(identityPoolId) {
    if (this.state.existing) {
      return;
    }
    try {
      this.makeCognitoIdentityRequest("DeleteIdentityPool", {
        IdentityPoolId: identityPoolId
      });
    } catch (error) {
      throw new Error(`Failed to delete Identity Pool ${identityPoolId}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AWSCognitoEntity
});
