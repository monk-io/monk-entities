
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/aws-cognito/userPoolDomain.ts
const cognitoBase = require("aws-cognito/cognito-base");
const AWSCognitoEntity = cognitoBase.AWSCognitoEntity;
const base = require("monkec/base");
const action = base.action;
const cli = require("cli");
var _testDomainAccess_dec, _debugDomain_dec, _getHostedUIUrl_dec, _getDomainInfo_dec, _a, _init;
var _UserPoolDomain = class _UserPoolDomain extends (_a = AWSCognitoEntity, _getDomainInfo_dec = [action("get-domain-info")], _getHostedUIUrl_dec = [action("get-hosted-ui-url")], _debugDomain_dec = [action("debug-domain")], _testDomainAccess_dec = [action("test-domain-access")], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  /**
   * Create a new User Pool Domain
   * Handles both Cognito prefix and custom domain creation
   */
  create() {
    const domain = this.definition.domain;
    const userPoolId = this.definition.user_pool_id;
    if (!domain) {
      throw new Error("Domain is required for User Pool Domain creation");
    }
    if (!userPoolId) {
      throw new Error("User Pool ID is required for User Pool Domain creation");
    }
    this.validateDomainFormat(domain);
    try {
      console.log(`Checking if domain ${domain} already exists...`);
      const existingDomain = this.checkDomainExists(domain);
      if (existingDomain) {
        console.log(`User Pool Domain ${domain} already exists with status: ${existingDomain.Status}, marking as existing`);
        const state = this.formatDomainState(existingDomain, true);
        Object.assign(this.state, state);
        return;
      } else {
        console.log(`Domain ${domain} does not exist, proceeding with creation`);
      }
      const isCustomDomain = this.isCustomDomain(domain);
      const params = {
        UserPoolId: userPoolId,
        Domain: domain
      };
      if (isCustomDomain && this.definition.custom_domain_config) {
        const customConfig = {
          CertificateArn: this.definition.custom_domain_config.certificate_arn
        };
        if (this.definition.custom_domain_config.managed_login_version) {
          customConfig.ManagedLoginVersion = this.definition.custom_domain_config.managed_login_version;
        }
        params.CustomDomainConfig = customConfig;
      } else if (isCustomDomain) {
        throw new Error(`Custom domain ${domain} requires custom_domain_config with certificate_arn`);
      }
      console.log(`Creating User Pool Domain: ${domain} with params:`, params);
      const createResponse = this.makeCognitoIdpRequest("CreateUserPoolDomain", params);
      console.log(`CreateUserPoolDomain API response:`, createResponse);
      console.log(`Successfully initiated User Pool Domain creation: ${domain}`);
      const domainInfo = this.describeDomain(domain);
      if (!domainInfo) {
        console.log(`Domain created but info not immediately available, storing basic state`);
        const basicState = {
          existing: false,
          domain,
          status: "CREATING",
          is_custom_domain: isCustomDomain,
          cloudfront_distribution: void 0,
          cloudfront_distribution_arn: void 0,
          custom_domain_config: void 0,
          creation_date: void 0
        };
        Object.assign(this.state, basicState);
      } else {
        const state = this.formatDomainState(domainInfo, false);
        Object.assign(this.state, state);
      }
    } catch (error) {
      console.error(`Error creating User Pool Domain ${domain}:`, error);
      if (error instanceof Error) {
        console.error(`Error details: ${error.message}`);
        if (error.message.includes("InvalidParameterException")) {
          throw new Error(`Invalid parameter for User Pool Domain ${domain}: ${error.message}`);
        } else if (error.message.includes("LimitExceededException")) {
          throw new Error(`Domain limit exceeded for User Pool Domain ${domain}: ${error.message}`);
        } else if (error.message.includes("ResourceConflictException")) {
          throw new Error(`Domain ${domain} already exists or conflicts with existing domain: ${error.message}`);
        }
      }
      throw new Error(`Failed to create User Pool Domain ${domain}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Update domain configuration
   * Note: AWS doesn't support updating domains directly, only recreation
   */
  update() {
    console.log("User Pool Domain update requested - domains cannot be updated in place");
    console.log("To change domain configuration, delete and recreate the domain");
    try {
      const domain = this.definition.domain;
      const domainInfo = this.describeDomain(domain);
      if (domainInfo) {
        const state = this.formatDomainState(domainInfo, this.state.existing);
        Object.assign(this.state, state);
      }
    } catch (_error) {
      console.log(`Failed to refresh domain state: ${_error instanceof Error ? _error.message : "Unknown error"}`);
    }
  }
  /**
   * Delete the User Pool Domain
   * Only deletes domains created by this entity (respects existing flag)
   */
  delete() {
    const domain = this.state.domain || this.definition.domain;
    try {
      if (domain && !this.state.existing) {
        console.log(`Deleting User Pool Domain: ${domain}`);
        this.makeCognitoIdpRequest("DeleteUserPoolDomain", {
          Domain: domain
        });
        console.log(`Successfully deleted User Pool Domain: ${domain}`);
        this.state.domain = void 0;
        this.state.cloudfront_distribution = void 0;
        this.state.cloudfront_distribution_arn = void 0;
        this.state.status = void 0;
        this.state.custom_domain_config = void 0;
        this.state.creation_date = void 0;
        this.state.is_custom_domain = void 0;
      } else if (this.state.existing) {
        console.log(`User Pool Domain ${domain} was pre-existing, not deleting`);
        this.state.domain = void 0;
      } else {
        console.log("No User Pool Domain to delete");
      }
    } catch (error) {
      throw new Error(`Failed to delete User Pool Domain ${domain}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Check if domain is ready
   * Domain is ready when status is ACTIVE
   */
  checkReadiness() {
    const domain = this.state.domain || this.definition.domain;
    if (!domain) {
      console.log("User Pool Domain not specified");
      return false;
    }
    try {
      console.log(`Checking readiness for User Pool Domain: ${domain}`);
      const domainInfo = this.describeDomain(domain);
      if (!domainInfo) {
        console.log(`User Pool Domain ${domain} not found in AWS - may still be provisioning`);
        return false;
      }
      const status = domainInfo.Status;
      console.log(`User Pool Domain ${domain} current status: ${status || "UNKNOWN"}`);
      if (status === "ACTIVE") {
        console.log(`User Pool Domain ${domain} is ready (status: ACTIVE)`);
        if (!this.state.domain) {
          const state = this.formatDomainState(domainInfo, this.state.existing);
          Object.assign(this.state, state);
        }
        return true;
      } else {
        console.log(`User Pool Domain ${domain} not ready yet (status: ${status || "UNKNOWN"})`);
        if (status === "FAILED") {
          console.log(`User Pool Domain ${domain} creation failed - check AWS console for details`);
        }
        return false;
      }
    } catch (error) {
      console.log(`Failed to check User Pool Domain readiness: ${error instanceof Error ? error.message : "Unknown error"}`);
      return false;
    }
  }
  getDomainInfo() {
    const domain = this.state.domain || this.definition.domain;
    try {
      if (!domain) {
        cli.output(`No domain specified in definition or state`);
        throw new Error(`No domain specified`);
      }
      const domainInfo = this.describeDomain(domain);
      if (!domainInfo) {
        cli.output(`User Pool Domain ${domain} not found in AWS`);
        throw new Error(`User Pool Domain ${domain} not found`);
      }
      cli.output("=== User Pool Domain Information ===");
      cli.output(`Domain: ${domainInfo.Domain}`);
      cli.output(`User Pool ID: ${domainInfo.UserPoolId}`);
      cli.output(`Status: ${domainInfo.Status}`);
      cli.output(`AWS Account ID: ${domainInfo.AWSAccountId || "N/A"}`);
      if (domainInfo.CloudFrontDistribution) {
        cli.output(`CloudFront Distribution: ${domainInfo.CloudFrontDistribution}`);
      }
      if (domainInfo.CustomDomainConfig) {
        const customConfig = domainInfo.CustomDomainConfig;
        cli.output("Custom Domain Configuration:");
        cli.output(`  - Certificate ARN: ${customConfig.CertificateArn}`);
        if (customConfig.ManagedLoginVersion) {
          cli.output(`  - Managed Login Version: ${customConfig.ManagedLoginVersion}`);
        }
      }
      if (domainInfo.Version) {
        cli.output(`Domain Version: ${domainInfo.Version}`);
      }
      const fullDomain = this.getFullDomainUrl(domain);
      cli.output(`Full Domain URL: ${fullDomain}`);
    } catch (error) {
      const errorMsg = `Failed to get domain info: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
  getHostedUIUrl() {
    const domain = this.state.domain || this.definition.domain;
    try {
      if (!domain) {
        cli.output(`No domain specified in definition or state`);
        throw new Error(`No domain specified`);
      }
      const domainInfo = this.describeDomain(domain);
      if (!domainInfo || domainInfo.Status !== "ACTIVE") {
        cli.output(`User Pool Domain ${domain} is not active`);
        throw new Error(`User Pool Domain ${domain} is not active`);
      }
      const fullDomain = this.getFullDomainUrl(domain);
      cli.output("=== Hosted UI URLs ===");
      cli.output(`Base Domain: ${fullDomain}`);
      cli.output("");
      cli.output("Login/Signup URLs (replace CLIENT_ID and REDIRECT_URI):");
      cli.output(`Login: ${fullDomain}/login?client_id=CLIENT_ID&response_type=code&scope=openid&redirect_uri=REDIRECT_URI`);
      cli.output(`Signup: ${fullDomain}/signup?client_id=CLIENT_ID&response_type=code&scope=openid&redirect_uri=REDIRECT_URI`);
      cli.output(`Logout: ${fullDomain}/logout?client_id=CLIENT_ID&logout_uri=REDIRECT_URI`);
      cli.output("");
      cli.output("OAuth 2.0 Endpoints:");
      cli.output(`Authorization: ${fullDomain}/oauth2/authorize`);
      cli.output(`Token: ${fullDomain}/oauth2/token`);
      cli.output(`UserInfo: ${fullDomain}/oauth2/userInfo`);
      cli.output(`JWKS: ${fullDomain}/.well-known/jwks.json`);
    } catch (error) {
      const errorMsg = `Failed to generate hosted UI URLs: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
  debugDomain() {
    const domain = this.definition.domain;
    const userPoolId = this.definition.user_pool_id;
    try {
      cli.output("=== Domain Debug Information ===");
      cli.output(`Domain: ${domain}`);
      cli.output(`User Pool ID: ${userPoolId}`);
      cli.output(`Region: ${this.region}`);
      cli.output("");
      try {
        this.validateDomainFormat(domain);
        cli.output("\u2705 Domain format validation: PASSED");
      } catch (error) {
        cli.output(`\u274C Domain format validation: FAILED - ${error instanceof Error ? error.message : "Unknown error"}`);
        return;
      }
      const existingDomain = this.checkDomainExists(domain);
      if (existingDomain) {
        cli.output("\u2705 Domain exists in AWS");
        cli.output(`Status: ${existingDomain.Status}`);
        cli.output(`User Pool ID: ${existingDomain.UserPoolId}`);
      } else {
        cli.output("\u274C Domain does not exist in AWS");
      }
      cli.output("");
      cli.output("=== Entity State ===");
      cli.output(`State domain: ${this.state.domain || "Not set"}`);
      cli.output(`State existing: ${this.state.existing}`);
      cli.output(`State status: ${this.state.status || "Not set"}`);
    } catch (error) {
      const errorMsg = `Failed to debug domain: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
  testDomainAccess() {
    const domain = this.state.domain || this.definition.domain;
    try {
      if (!domain) {
        cli.output(`No domain specified in definition or state`);
        throw new Error(`No domain specified`);
      }
      const domainInfo = this.describeDomain(domain);
      if (!domainInfo) {
        cli.output(`User Pool Domain ${domain} not found in AWS`);
        throw new Error(`User Pool Domain ${domain} not found`);
      }
      cli.output("=== Domain Access Test ===");
      cli.output(`Domain: ${domain}`);
      cli.output(`Status: ${domainInfo.Status}`);
      const fullDomain = this.getFullDomainUrl(domain);
      cli.output(`Full URL: ${fullDomain}`);
      if (domainInfo.Status === "ACTIVE") {
        cli.output(`\u2705 Domain Status: Active`);
        if (this.state.is_custom_domain) {
          cli.output(`\u2705 Domain Type: Custom Domain`);
          if (domainInfo.CloudFrontDistribution) {
            cli.output(`\u2705 CloudFront Distribution: ${domainInfo.CloudFrontDistribution}`);
          }
          if (domainInfo.CustomDomainConfig?.CertificateArn) {
            cli.output(`\u2705 SSL Certificate: Configured`);
          }
        } else {
          cli.output(`\u2705 Domain Type: Cognito Prefix Domain`);
          cli.output(`\u2705 SSL: Automatically managed by AWS`);
        }
        cli.output("");
        cli.output("Next Steps:");
        cli.output("1. Configure User Pool Client with this domain");
        cli.output("2. Test login flow with a real client_id and redirect_uri");
        cli.output("3. Verify OAuth endpoints are accessible");
      } else {
        cli.output(`\u274C Domain Status: ${domainInfo.Status}`);
        cli.output("Domain is not yet active. Please wait for AWS to complete setup.");
        if (domainInfo.Status === "CREATING") {
          cli.output("This typically takes 15-20 minutes for custom domains.");
        }
      }
    } catch (error) {
      const errorMsg = `Failed to test domain access: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
  /**
   * Check if a domain exists in AWS
   */
  checkDomainExists(domain) {
    try {
      console.log(`Checking if domain ${domain} exists...`);
      const result = this.describeDomain(domain);
      if (result && typeof result === "object" && "DomainDescription" in result) {
        const domainDesc = result.DomainDescription;
        console.log(`Domain ${domain} exists with status: ${domainDesc.Status}`);
        return domainDesc;
      } else {
        console.log(`Domain ${domain} does not exist (no DomainDescription in response)`);
        return null;
      }
    } catch (error) {
      console.log(`Domain ${domain} does not exist (API error): ${error instanceof Error ? error.message : "Unknown error"}`);
      return null;
    }
  }
  /**
   * Describe a User Pool Domain
   */
  describeDomain(domain) {
    try {
      console.log(`Describing domain: ${domain}`);
      const response = this.makeCognitoIdpRequest("DescribeUserPoolDomain", {
        Domain: domain
      });
      const domainDescription = response?.DomainDescription;
      if (domainDescription) {
        console.log(`Domain ${domain} found with status: ${domainDescription.Status}`);
        return domainDescription;
      } else {
        console.log(`Domain ${domain} - no DomainDescription in response`);
        return null;
      }
    } catch (error) {
      if (error instanceof Error && error.message.includes("ResourceNotFoundException")) {
        console.log(`Domain ${domain} not found in AWS (ResourceNotFoundException)`);
        return null;
      }
      console.log(`Error describing domain ${domain}: ${error instanceof Error ? error.message : "Unknown error"}`);
      throw error;
    }
  }
  /**
   * Validate domain format according to AWS Cognito requirements
   */
  validateDomainFormat(domain) {
    if (!domain || domain.length === 0) {
      throw new Error("Domain cannot be empty");
    }
    if (domain.includes(".")) {
      if (domain.length > 63) {
        throw new Error("Custom domain name cannot exceed 63 characters");
      }
      const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
      if (!domainRegex.test(domain)) {
        throw new Error(`Invalid custom domain format: ${domain}`);
      }
    } else {
      if (domain.length < 1 || domain.length > 63) {
        throw new Error("Cognito domain prefix must be between 1 and 63 characters");
      }
      const prefixRegex = /^[a-z0-9-]+$/;
      if (!prefixRegex.test(domain)) {
        throw new Error(`Invalid Cognito domain prefix: ${domain}. Only lowercase letters, numbers, and hyphens are allowed`);
      }
      if (domain.startsWith("-") || domain.endsWith("-")) {
        throw new Error("Cognito domain prefix cannot start or end with a hyphen");
      }
      const forbiddenWords = ["aws", "amazon", "cognito"];
      const lowerDomain = domain.toLowerCase();
      for (const word of forbiddenWords) {
        if (lowerDomain.includes(word)) {
          throw new Error(`Domain prefix cannot contain the word "${word}". AWS restricts the use of aws, amazon, or cognito in domain prefixes.`);
        }
      }
    }
  }
  /**
   * Determine if a domain is a custom domain or Cognito prefix
   */
  isCustomDomain(domain) {
    return !!(domain && domain.includes("."));
  }
  /**
   * Get the full domain URL for hosted UI
   */
  getFullDomainUrl(domain) {
    if (this.isCustomDomain(domain)) {
      return `https://${domain}`;
    } else {
      return `https://${domain}.auth.${this.region}.amazoncognito.com`;
    }
  }
  /**
   * Format domain state from AWS API response
   */
  formatDomainState(domainDescription, wasPreExisting = false) {
    return {
      existing: wasPreExisting,
      domain: domainDescription.Domain,
      cloudfront_distribution: domainDescription.CloudFrontDistribution,
      cloudfront_distribution_arn: domainDescription.CloudFrontDistributionArn,
      status: domainDescription.Status,
      custom_domain_config: domainDescription.CustomDomainConfig || void 0,
      creation_date: domainDescription.Version,
      // Version contains creation info
      is_custom_domain: this.isCustomDomain(domainDescription.Domain)
    };
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "getDomainInfo", _getDomainInfo_dec, _UserPoolDomain);
__decorateElement(_init, 1, "getHostedUIUrl", _getHostedUIUrl_dec, _UserPoolDomain);
__decorateElement(_init, 1, "debugDomain", _debugDomain_dec, _UserPoolDomain);
__decorateElement(_init, 1, "testDomainAccess", _testDomainAccess_dec, _UserPoolDomain);
__decoratorMetadata(_init, _UserPoolDomain);
__name(_UserPoolDomain, "UserPoolDomain");
var UserPoolDomain = _UserPoolDomain;



function main(def, state, ctx) {
  const entity = new UserPoolDomain(def, state, ctx);
  return entity.main(ctx);
}
