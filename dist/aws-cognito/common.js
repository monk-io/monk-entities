// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/aws-cognito/common.ts
var common_exports = {};
__export(common_exports, {
  formatIdentityPoolState: () => formatIdentityPoolState,
  formatUserPoolState: () => formatUserPoolState,
  getOrCreateTempPassword: () => getOrCreateTempPassword,
  validateIdentityPoolName: () => validateIdentityPoolName,
  validateMfaConfiguration: () => validateMfaConfiguration,
  validateUserPoolName: () => validateUserPoolName
});
module.exports = __toCommonJS(common_exports);
var import_secret = __toESM(require("secret"));
function validateUserPoolName(name) {
  if (!name || name.length < 1 || name.length > 128) {
    throw new Error("User Pool name must be between 1 and 128 characters");
  }
  const validPattern = /^[a-zA-Z0-9\s\-_]+$/;
  if (!validPattern.test(name)) {
    throw new Error("User Pool name can only contain letters, numbers, spaces, hyphens, and underscores");
  }
}
function validateIdentityPoolName(name) {
  if (!name || name.length < 1 || name.length > 128) {
    throw new Error("Identity Pool name must be between 1 and 128 characters");
  }
  const validPattern = /^[a-zA-Z0-9\s\-_]+$/;
  if (!validPattern.test(name)) {
    throw new Error("Identity Pool name can only contain letters, numbers, spaces, hyphens, and underscores");
  }
}
function validateMfaConfiguration(mfaConfig) {
  const validMfaOptions = ["OFF", "ON", "OPTIONAL"];
  if (!validMfaOptions.includes(mfaConfig)) {
    throw new Error(`MFA configuration must be one of: ${validMfaOptions.join(", ")}`);
  }
}
function getOrCreateTempPassword(secretRef, resourceName) {
  const defaultSecretRef = secretRef || `${resourceName}-temp-password`;
  try {
    const storedPassword = import_secret.default.get(defaultSecretRef);
    if (!storedPassword) throw new Error("Temporary password not found");
    return storedPassword;
  } catch (_e) {
    const password = import_secret.default.randString(12) + "A1!";
    import_secret.default.set(defaultSecretRef, password);
    return password;
  }
}
function formatUserPoolState(userPool, wasPreExisting = false) {
  return {
    existing: wasPreExisting,
    // true = don't delete (pre-existing), false = we created it (can delete)
    user_pool_id: userPool.Id,
    user_pool_arn: userPool.Arn,
    user_pool_name: userPool.Name,
    user_pool_status: userPool.Status,
    creation_date: userPool.CreationDate ? new Date(userPool.CreationDate * 1e3).toISOString() : void 0,
    last_modified_date: userPool.LastModifiedDate ? new Date(userPool.LastModifiedDate * 1e3).toISOString() : void 0,
    mfa_configuration: userPool.MfaConfiguration,
    estimated_number_of_users: userPool.EstimatedNumberOfUsers
  };
}
function formatIdentityPoolState(identityPool, wasPreExisting = false) {
  return {
    existing: wasPreExisting,
    // true = don't delete (pre-existing), false = we created it (can delete)
    identity_pool_id: identityPool.IdentityPoolId,
    identity_pool_name: identityPool.IdentityPoolName,
    allow_unauthenticated_identities: identityPool.AllowUnauthenticatedIdentities,
    allow_classic_flow: identityPool.AllowClassicFlow
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  formatIdentityPoolState,
  formatUserPoolState,
  getOrCreateTempPassword,
  validateIdentityPoolName,
  validateMfaConfiguration,
  validateUserPoolName
});
