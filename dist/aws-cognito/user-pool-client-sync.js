
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/aws-cognito/userPoolClient.ts
const cognitoBase = require("aws-cognito/cognito-base");
const AWSCognitoEntity = cognitoBase.AWSCognitoEntity;
const base = require("monkec/base");
const action = base.action;
const cli = require("cli");
function formatUserPoolClientState(clientData, wasPreExisting = false) {
  return {
    existing: wasPreExisting,
    client_id: clientData.ClientId,
    client_secret: clientData.ClientSecret,
    creation_date: clientData.CreationDate,
    last_modified_date: clientData.LastModifiedDate
  };
}
__name(formatUserPoolClientState, "formatUserPoolClientState");
var _testAuthConfig_dec, _getOAuthConfig_dec, _getClientInfo_dec, _a, _init;
var _UserPoolClient = class _UserPoolClient extends (_a = AWSCognitoEntity, _getClientInfo_dec = [action("get-client-info")], _getOAuthConfig_dec = [action("get-oauth-config")], _testAuthConfig_dec = [action("test-auth-config")], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  /**
   * Get the User Pool ID for this client
   */
  getUserPoolId() {
    return this.definition.user_pool_id;
  }
  /**
   * Get the client name
   */
  getClientName() {
    return this.definition.client_name;
  }
  /**
   * Get the client ID from state
   */
  getClientId() {
    if (!this.state.client_id) {
      throw new Error(`User Pool Client ID not found in state for client: ${this.getClientName()}`);
    }
    return this.state.client_id;
  }
  /**
   * Check if a User Pool Client exists in AWS
   */
  checkUserPoolClientExists(userPoolId, clientId) {
    try {
      const response = this.makeCognitoIdpRequest("DescribeUserPoolClient", {
        UserPoolId: userPoolId,
        ClientId: clientId
      });
      if (response.UserPoolClient) {
        return response;
      }
      return null;
    } catch (error) {
      if (error instanceof Error && error.message.includes("ResourceNotFoundException")) {
        return null;
      }
      throw error;
    }
  }
  /**
   * Check if a User Pool Client exists by name
   */
  findUserPoolClientByName(userPoolId, clientName) {
    try {
      const response = this.makeCognitoIdpRequest("ListUserPoolClients", {
        UserPoolId: userPoolId,
        MaxResults: 60
      });
      if (response.UserPoolClients && Array.isArray(response.UserPoolClients)) {
        const client = response.UserPoolClients.find((c) => c.ClientName === clientName);
        if (client) {
          return this.checkUserPoolClientExists(userPoolId, client.ClientId);
        }
      }
      return null;
    } catch (error) {
      console.log(`Error searching for User Pool Client by name: ${error instanceof Error ? error.message : "Unknown error"}`);
      return null;
    }
  }
  /**
   * Build parameters for CreateUserPoolClient API call
   */
  buildCreateUserPoolClientParams() {
    const params = {
      UserPoolId: this.getUserPoolId(),
      ClientName: this.getClientName()
    };
    if (this.definition.generate_secret !== void 0) {
      params.GenerateSecret = this.definition.generate_secret;
    }
    if (this.definition.refresh_token_validity !== void 0) {
      params.RefreshTokenValidity = this.definition.refresh_token_validity;
    }
    if (this.definition.access_token_validity !== void 0) {
      params.AccessTokenValidity = this.definition.access_token_validity;
    }
    if (this.definition.id_token_validity !== void 0) {
      params.IdTokenValidity = this.definition.id_token_validity;
    }
    if (this.definition.token_validity_units) {
      params.TokenValidityUnits = this.definition.token_validity_units;
    }
    if (this.definition.explicit_auth_flows && this.definition.explicit_auth_flows.length > 0) {
      params.ExplicitAuthFlows = this.definition.explicit_auth_flows;
    }
    if (this.definition.read_attributes && this.definition.read_attributes.length > 0) {
      params.ReadAttributes = this.definition.read_attributes;
    }
    if (this.definition.write_attributes && this.definition.write_attributes.length > 0) {
      params.WriteAttributes = this.definition.write_attributes;
    }
    if (this.definition.supported_identity_providers && this.definition.supported_identity_providers.length > 0) {
      params.SupportedIdentityProviders = this.definition.supported_identity_providers;
    }
    if (this.definition.callback_urls && this.definition.callback_urls.length > 0) {
      params.CallbackURLs = this.definition.callback_urls;
    }
    if (this.definition.logout_urls && this.definition.logout_urls.length > 0) {
      params.LogoutURLs = this.definition.logout_urls;
    }
    if (this.definition.default_redirect_uri) {
      params.DefaultRedirectURI = this.definition.default_redirect_uri;
    }
    if (this.definition.allowed_oauth_flows && this.definition.allowed_oauth_flows.length > 0) {
      params.AllowedOAuthFlows = this.definition.allowed_oauth_flows;
    }
    if (this.definition.allowed_oauth_scopes && this.definition.allowed_oauth_scopes.length > 0) {
      params.AllowedOAuthScopes = this.definition.allowed_oauth_scopes;
    }
    if (this.definition.allowed_oauth_flows_user_pool_client !== void 0) {
      params.AllowedOAuthFlowsUserPoolClient = this.definition.allowed_oauth_flows_user_pool_client;
    }
    if (this.definition.analytics_configuration) {
      params.AnalyticsConfiguration = this.definition.analytics_configuration;
    }
    if (this.definition.prevent_user_existence_errors) {
      params.PreventUserExistenceErrors = this.definition.prevent_user_existence_errors;
    }
    if (this.definition.enable_token_revocation !== void 0) {
      params.EnableTokenRevocation = this.definition.enable_token_revocation;
    }
    if (this.definition.enable_propagate_additional_user_context_data !== void 0) {
      params.EnablePropagateAdditionalUserContextData = this.definition.enable_propagate_additional_user_context_data;
    }
    if (this.definition.auth_session_validity !== void 0) {
      params.AuthSessionValidity = this.definition.auth_session_validity;
    }
    return params;
  }
  /**
   * Create the User Pool Client
   */
  create() {
    const userPoolId = this.getUserPoolId();
    const clientName = this.getClientName();
    try {
      const existingClient = this.findUserPoolClientByName(userPoolId, clientName);
      if (existingClient && existingClient.UserPoolClient) {
        console.log(`Found existing User Pool Client: ${clientName}`);
        const state = formatUserPoolClientState(existingClient.UserPoolClient, true);
        Object.assign(this.state, state);
        return;
      }
      console.log(`Creating User Pool Client: ${clientName} in User Pool: ${userPoolId}`);
      const params = this.buildCreateUserPoolClientParams();
      const response = this.makeCognitoIdpRequest("CreateUserPoolClient", params);
      if (response.UserPoolClient) {
        const state = formatUserPoolClientState(response.UserPoolClient, false);
        Object.assign(this.state, state);
        console.log(`Successfully created User Pool Client: ${clientName} with ID: ${this.state.client_id}`);
      } else {
        throw new Error("User Pool Client creation response missing UserPoolClient data");
      }
    } catch (error) {
      throw new Error(`Failed to create User Pool Client ${clientName}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Update the User Pool Client
   */
  update() {
    const clientId = this.getClientId();
    const clientName = this.getClientName();
    try {
      console.log(`Updating User Pool Client: ${clientName} (${clientId})`);
      const params = this.buildCreateUserPoolClientParams();
      params.ClientId = clientId;
      delete params.UserPoolId;
      delete params.GenerateSecret;
      const response = this.makeCognitoIdpRequest("UpdateUserPoolClient", params);
      if (response.UserPoolClient) {
        const state = formatUserPoolClientState(response.UserPoolClient, this.state.existing);
        Object.assign(this.state, state);
        console.log(`Successfully updated User Pool Client: ${clientName}`);
      } else {
        throw new Error("User Pool Client update response missing UserPoolClient data");
      }
    } catch (error) {
      throw new Error(`Failed to update User Pool Client ${clientName}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Delete the User Pool Client
   */
  delete() {
    const userPoolId = this.getUserPoolId();
    const clientId = this.state.client_id;
    const clientName = this.getClientName();
    if (clientId && !this.state.existing) {
      try {
        console.log(`Deleting User Pool Client: ${clientName} (${clientId})`);
        this.makeCognitoIdpRequest("DeleteUserPoolClient", {
          UserPoolId: userPoolId,
          ClientId: clientId
        });
        console.log(`Successfully deleted User Pool Client: ${clientName}`);
      } catch (error) {
        console.log(`Error deleting User Pool Client ${clientName}: ${error instanceof Error ? error.message : "Unknown error"}`);
      }
    } else if (this.state.existing) {
      console.log(`Skipping deletion of pre-existing User Pool Client: ${clientName}`);
    }
    this.state.client_id = void 0;
    this.state.client_secret = void 0;
    this.state.creation_date = void 0;
    this.state.last_modified_date = void 0;
  }
  /**
   * Check if the User Pool Client is ready
   */
  checkReadiness() {
    const userPoolId = this.getUserPoolId();
    const clientId = this.state.client_id;
    if (!clientId) {
      console.log(`User Pool Client not ready: missing client ID`);
      return false;
    }
    try {
      const response = this.checkUserPoolClientExists(userPoolId, clientId);
      const isReady = response !== null;
      if (!isReady) {
        console.log(`User Pool Client ${clientId} not found in AWS`);
      }
      return isReady;
    } catch (error) {
      console.log(`Error checking User Pool Client readiness: ${error instanceof Error ? error.message : "Unknown error"}`);
      return false;
    }
  }
  getClientInfo() {
    const userPoolId = this.getUserPoolId();
    const clientId = this.getClientId();
    try {
      if (!this.state.client_id) {
        cli.output(`User Pool Client ${clientId} not found in entity state`);
        throw new Error(`User Pool Client ${clientId} not found`);
      }
      const response = this.makeCognitoIdpRequest("DescribeUserPoolClient", {
        UserPoolId: userPoolId,
        ClientId: clientId
      });
      if (!response.UserPoolClient) {
        cli.output(`User Pool Client ${clientId} not found in AWS`);
        throw new Error(`User Pool Client ${clientId} not found`);
      }
      const client = response.UserPoolClient;
      cli.output("=== User Pool Client Information ===");
      cli.output(`Client Name: ${client.ClientName || "N/A"}`);
      cli.output(`Client ID: ${client.ClientId || "N/A"}`);
      cli.output(`User Pool ID: ${client.UserPoolId || "N/A"}`);
      cli.output(`Has Secret: ${client.ClientSecret ? "Yes" : "No"}`);
      cli.output(`Creation Date: ${client.CreationDate || "N/A"}`);
      cli.output(`Last Modified: ${client.LastModifiedDate || "N/A"}`);
      if (client.ExplicitAuthFlows && Array.isArray(client.ExplicitAuthFlows)) {
        cli.output(`Auth Flows: ${client.ExplicitAuthFlows.join(", ")}`);
      }
      if (client.AllowedOAuthFlows && Array.isArray(client.AllowedOAuthFlows)) {
        cli.output(`OAuth Flows: ${client.AllowedOAuthFlows.join(", ")}`);
      }
      if (client.AllowedOAuthScopes && Array.isArray(client.AllowedOAuthScopes)) {
        cli.output(`OAuth Scopes: ${client.AllowedOAuthScopes.join(", ")}`);
      }
      if (client.CallbackURLs && Array.isArray(client.CallbackURLs)) {
        cli.output(`Callback URLs: ${client.CallbackURLs.join(", ")}`);
      }
      cli.output(`Token Validities:`);
      const tokenUnits = client.TokenValidityUnits || {};
      cli.output(`  - Access Token: ${client.AccessTokenValidity || "Default"} ${tokenUnits.AccessToken || "hours"}`);
      cli.output(`  - ID Token: ${client.IdTokenValidity || "Default"} ${tokenUnits.IdToken || "hours"}`);
      cli.output(`  - Refresh Token: ${client.RefreshTokenValidity || "Default"} ${tokenUnits.RefreshToken || "days"}`);
    } catch (error) {
      const errorMsg = `Failed to get User Pool Client info: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
  getOAuthConfig() {
    const userPoolId = this.getUserPoolId();
    const clientId = this.getClientId();
    try {
      if (!this.state.client_id) {
        cli.output(`User Pool Client ${clientId} not found in entity state`);
        throw new Error(`User Pool Client ${clientId} not found`);
      }
      const response = this.makeCognitoIdpRequest("DescribeUserPoolClient", {
        UserPoolId: userPoolId,
        ClientId: clientId
      });
      if (!response.UserPoolClient) {
        cli.output(`User Pool Client ${clientId} not found in AWS`);
        throw new Error(`User Pool Client ${clientId} not found`);
      }
      const client = response.UserPoolClient;
      cli.output("=== OAuth/OIDC Configuration ===");
      cli.output(`Client ID: ${client.ClientId}`);
      if (client.AllowedOAuthFlows && Array.isArray(client.AllowedOAuthFlows)) {
        cli.output(`Allowed OAuth Flows: ${client.AllowedOAuthFlows.join(", ")}`);
      } else {
        cli.output(`Allowed OAuth Flows: None configured`);
      }
      if (client.AllowedOAuthScopes && Array.isArray(client.AllowedOAuthScopes)) {
        cli.output(`Allowed OAuth Scopes: ${client.AllowedOAuthScopes.join(", ")}`);
      } else {
        cli.output(`Allowed OAuth Scopes: None configured`);
      }
      if (client.CallbackURLs && Array.isArray(client.CallbackURLs)) {
        cli.output(`Callback URLs:`);
        client.CallbackURLs.forEach((url) => {
          cli.output(`  - ${url}`);
        });
      } else {
        cli.output(`Callback URLs: None configured`);
      }
      if (client.LogoutURLs && Array.isArray(client.LogoutURLs)) {
        cli.output(`Logout URLs:`);
        client.LogoutURLs.forEach((url) => {
          cli.output(`  - ${url}`);
        });
      } else {
        cli.output(`Logout URLs: None configured`);
      }
      if (client.DefaultRedirectURI) {
        cli.output(`Default Redirect URI: ${client.DefaultRedirectURI}`);
      }
      cli.output(`OAuth Flows Enabled: ${client.AllowedOAuthFlowsUserPoolClient ? "Yes" : "No"}`);
    } catch (error) {
      const errorMsg = `Failed to get OAuth config: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
  testAuthConfig() {
    const userPoolId = this.getUserPoolId();
    const clientId = this.getClientId();
    try {
      if (!this.state.client_id) {
        cli.output(`User Pool Client ${clientId} not found in entity state`);
        throw new Error(`User Pool Client ${clientId} not found`);
      }
      const response = this.makeCognitoIdpRequest("DescribeUserPoolClient", {
        UserPoolId: userPoolId,
        ClientId: clientId
      });
      if (!response.UserPoolClient) {
        cli.output(`User Pool Client ${clientId} not found in AWS`);
        throw new Error(`User Pool Client ${clientId} not found`);
      }
      const client = response.UserPoolClient;
      cli.output("=== Authentication Configuration Test ===");
      cli.output(`Client ID: ${client.ClientId}`);
      cli.output(`User Pool ID: ${userPoolId}`);
      if (client.ExplicitAuthFlows && Array.isArray(client.ExplicitAuthFlows)) {
        cli.output(`\u2705 Authentication Flows Configured: ${client.ExplicitAuthFlows.join(", ")}`);
        const hasUserSrp = client.ExplicitAuthFlows.includes("ALLOW_USER_SRP_AUTH");
        const hasUserPassword = client.ExplicitAuthFlows.includes("ALLOW_USER_PASSWORD_AUTH");
        const hasRefreshToken = client.ExplicitAuthFlows.includes("ALLOW_REFRESH_TOKEN_AUTH");
        cli.output(`Authentication Flow Support:`);
        cli.output(`  - SRP Authentication: ${hasUserSrp ? "\u2705 Enabled" : "\u274C Disabled"}`);
        cli.output(`  - Password Authentication: ${hasUserPassword ? "\u2705 Enabled" : "\u274C Disabled"}`);
        cli.output(`  - Refresh Token: ${hasRefreshToken ? "\u2705 Enabled" : "\u274C Disabled"}`);
      } else {
        cli.output(`\u274C No authentication flows configured`);
      }
      const hasOAuthFlows = client.AllowedOAuthFlows && Array.isArray(client.AllowedOAuthFlows) && client.AllowedOAuthFlows.length > 0;
      const hasCallbackUrls = client.CallbackURLs && Array.isArray(client.CallbackURLs) && client.CallbackURLs.length > 0;
      cli.output(`OAuth Configuration:`);
      cli.output(`  - OAuth Flows: ${hasOAuthFlows ? "\u2705 Configured" : "\u274C Not configured"}`);
      cli.output(`  - Callback URLs: ${hasCallbackUrls ? "\u2705 Configured" : "\u274C Not configured"}`);
      cli.output(`  - OAuth Client Enabled: ${client.AllowedOAuthFlowsUserPoolClient ? "\u2705 Yes" : "\u274C No"}`);
      cli.output(`Token Configuration:`);
      const tokenUnits2 = client.TokenValidityUnits || {};
      cli.output(`  - Access Token Validity: ${client.AccessTokenValidity || "Default (1 hour)"} ${tokenUnits2.AccessToken || "hours"}`);
      cli.output(`  - ID Token Validity: ${client.IdTokenValidity || "Default (1 hour)"} ${tokenUnits2.IdToken || "hours"}`);
      cli.output(`  - Refresh Token Validity: ${client.RefreshTokenValidity || "Default (30 days)"} ${tokenUnits2.RefreshToken || "days"}`);
      cli.output(`Security Features:`);
      cli.output(`  - Client Secret: ${client.ClientSecret ? "\u2705 Configured" : "\u274C Public client"}`);
      cli.output(`  - Prevent User Existence Errors: ${client.PreventUserExistenceErrors || "LEGACY"}`);
      cli.output(`  - Token Revocation: ${client.EnableTokenRevocation !== false ? "\u2705 Enabled" : "\u274C Disabled"}`);
    } catch (error) {
      const errorMsg = `Failed to test auth config: ${error instanceof Error ? error.message : "Unknown error"}`;
      cli.output(errorMsg);
      throw new Error(errorMsg);
    }
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "getClientInfo", _getClientInfo_dec, _UserPoolClient);
__decorateElement(_init, 1, "getOAuthConfig", _getOAuthConfig_dec, _UserPoolClient);
__decorateElement(_init, 1, "testAuthConfig", _testAuthConfig_dec, _UserPoolClient);
__decoratorMetadata(_init, _UserPoolClient);
__name(_UserPoolClient, "UserPoolClient");
var UserPoolClient = _UserPoolClient;



function main(def, state, ctx) {
  const entity = new UserPoolClient(def, state, ctx);
  return entity.main(ctx);
}
