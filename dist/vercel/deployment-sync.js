
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/vercel/deployment.ts
const vercelBase = require("vercel/vercel-base");
const VercelEntity = vercelBase.VercelEntity;
const base = require("monkec/base");
const action = base.action;
const cli = require("cli");
const common = require("vercel/common");
const VERCEL_API_ENDPOINTS = common.VERCEL_API_ENDPOINTS;
var _getLogs_dec, _getDeployment_dec, _a, _init;
var _Deployment = class _Deployment extends (_a = VercelEntity, _getDeployment_dec = [action("Get deployment details")], _getLogs_dec = [action("Get deployment logs")], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  getEntityName() {
    return `deploy-${this.definition.project_id}`;
  }
  /** Start the deployment process */
  start() {
    cli.output(`\u{1F680} Starting Vercel deployment for project: ${this.definition.project_id}`);
    cli.output(`\u{1F4C1} Source directory: ${this.definition.source_path}`);
    cli.output(`\u{1F3ED} Production: ${this.definition.production || false}`);
  }
  /** Stop the deployment process */
  stop() {
    cli.output(`\u{1F6D1} Stopping Vercel deployment for project: ${this.definition.project_id}`);
  }
  /** Check if deployment is ready */
  checkReadiness() {
    if (!this.state.id) {
      return false;
    }
    try {
      const deployment = this.makeRequest("GET", `${VERCEL_API_ENDPOINTS.DEPLOYMENTS_V13}/${this.state.id}`);
      this.state.status = deployment.status;
      this.state.ready_at = deployment.ready_at;
      this.state.build_status = deployment.build_status;
      this.state.error = deployment.error;
      return deployment.status === "ready";
    } catch (error) {
      return false;
    }
  }
  getDeployment() {
    if (!this.state.id) {
      throw new Error("Deployment ID not available");
    }
    cli.output(`\u{1F4CB} Getting details for deployment: ${this.state.id}`);
    const deployment = this.makeRequest("GET", `${VERCEL_API_ENDPOINTS.DEPLOYMENTS_V13}/${this.state.id}`);
    cli.output(`\u2705 Deployment Details:`);
    cli.output(`   ID: ${deployment.id}`);
    cli.output(`   URL: ${deployment.url}`);
    cli.output(`   Status: ${deployment.status}`);
    cli.output(`   Created: ${deployment.created_at}`);
    cli.output(`   Ready: ${deployment.ready_at || "Not ready"}`);
    cli.output(`   Build Status: ${deployment.build_status || "Unknown"}`);
    if (deployment.error) {
      cli.output(`   Error: ${deployment.error}`);
    }
  }
  getLogs(args) {
    if (!this.state.id) {
      throw new Error("Deployment ID not available");
    }
    const functionId = args?.function_id;
    const path = args?.path || "/";
    cli.output(`\u{1F4CB} Getting logs for deployment: ${this.state.id}`);
    let logsUrl = `/v2/deployments/${this.state.id}/logs`;
    if (functionId) {
      logsUrl += `?functionId=${functionId}`;
    }
    if (path && path !== "/") {
      logsUrl += `${functionId ? "&" : "?"}path=${encodeURIComponent(path)}`;
    }
    const logs = this.makeRequest("GET", logsUrl);
    if (logs && Array.isArray(logs)) {
      cli.output(`\u{1F4CB} Deployment Logs:`);
      logs.forEach((log) => {
        cli.output(`   [${log.timestamp}] ${log.message}`);
      });
    } else {
      cli.output(`\u2139\uFE0F  No logs available`);
    }
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "getDeployment", _getDeployment_dec, _Deployment);
__decorateElement(_init, 1, "getLogs", _getLogs_dec, _Deployment);
__decoratorMetadata(_init, _Deployment);
__name(_Deployment, "Deployment");
var Deployment = _Deployment;



function main(def, state, ctx) {
  const entity = new Deployment(def, state, ctx);
  return entity.main(ctx);
}
