
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/digitalocean-function/function.ts
const base = require("digitalocean-function/base");
const DOFunctionEntity = base.DOFunctionEntity;
const MonkecBase = require("monkec/base");
const cli = require("cli");
const common = require("digitalocean-function/common");
const validateFunctionDefinition = common.validateFunctionDefinition;
const formatFunctionState = common.formatFunctionState;
const isDeploymentReady = common.isDeploymentReady;
const isDeploymentFailed = common.isDeploymentFailed;
const getDeploymentStatusDescription = common.getDeploymentStatusDescription;
const sanitizeAppName = common.sanitizeAppName;
const sanitizeComponentName = common.sanitizeComponentName;
const buildEnvironmentVariables = common.buildEnvironmentVariables;
const buildLogDestinations = common.buildLogDestinations;
const normalizeGitHubRepo = common.normalizeGitHubRepo;
var action2 = MonkecBase.action;
var _deploy_dec, _getLogs_dec, _getUrl_dec, _getInfo_dec, _a, _init;
var _AppFunction = class _AppFunction extends (_a = DOFunctionEntity, _getInfo_dec = [action2("info")], _getUrl_dec = [action2("url")], _getLogs_dec = [action2("logs")], _deploy_dec = [action2("deploy")], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  /**
   * Create the function component in App Platform
   */
  create() {
    try {
      this.validateDefinition();
      const appName = sanitizeAppName(this.definition.app_name);
      cli.output(`[DEBUG] Checking if app '${appName}' already exists...`);
      const existingApp = this.checkAppExists(appName);
      if (existingApp) {
        cli.output(`App ${appName} already exists, checking for function component...`);
        const functionComponent = existingApp.spec?.functions?.find(
          (fn) => fn.name === sanitizeComponentName(this.definition.component_name)
        );
        if (functionComponent) {
          cli.output(`Function component ${this.definition.component_name} already exists in app ${appName}`);
          const state2 = formatFunctionState(existingApp, true, this.definition.component_name);
          Object.assign(this.state, state2);
          return;
        }
        cli.output(`Adding function component ${this.definition.component_name} to existing app ${appName}`);
        this.addFunctionToExistingApp(existingApp);
        return;
      }
      cli.output(`Creating new app ${appName} with function component ${this.definition.component_name}`);
      const appSpec = this.buildAppSpec();
      cli.output(`[DEBUG] App spec created, making API call to create app...`);
      const createdApp = this.createApp(appSpec);
      const state = formatFunctionState(createdApp, false, this.definition.component_name);
      Object.assign(this.state, state);
      cli.output(`Successfully created app ${appName} with ID: ${createdApp.id}`);
    } catch (error) {
      throw new Error(`Failed to create DigitalOcean function: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Update the function component
   */
  update() {
    try {
      if (!this.state.app_id) {
        throw new Error("Cannot update function: app_id not found in state");
      }
      cli.output(`Updating app ${this.state.app_id}...`);
      this.getApp(this.state.app_id);
      const updatedSpec = this.buildAppSpec();
      const updatedApp = this.updateApp(this.state.app_id, updatedSpec);
      const updatedState = formatFunctionState(updatedApp, this.state.existing, this.definition.component_name);
      Object.assign(this.state, updatedState);
      cli.output(`Successfully updated app ${this.state.app_id}`);
    } catch (error) {
      throw new Error(`Failed to update DigitalOcean function: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Delete the function component or entire app
   */
  delete() {
    try {
      if (!this.state.app_id) {
        cli.output("No app_id in state, nothing to delete");
        return;
      }
      if (this.state.existing) {
        cli.output(`App ${this.state.app_id} was pre-existing, not deleting`);
        this.state.app_id = void 0;
        this.state.component_name = void 0;
        return;
      }
      cli.output(`Deleting app ${this.state.app_id}...`);
      this.deleteApp(this.state.app_id);
      this.state.app_id = void 0;
      this.state.component_name = void 0;
      cli.output(`Successfully deleted app ${this.state.app_id}`);
    } catch (error) {
      throw new Error(`Failed to delete DigitalOcean function: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Check if the function is ready
   */
  checkReadiness() {
    if (!this.state.app_id) {
      return false;
    }
    console.log(`Checking readiness for app ${this.state.app_id}...`);
    try {
      const app = this.getApp(this.state.app_id);
      const activeDeployment = app.active_deployment;
      const inProgressDeployment = app.in_progress_deployment;
      let deploymentPhase = "unknown";
      let deploymentSource = "none";
      if (activeDeployment) {
        deploymentPhase = activeDeployment.phase || "unknown";
        deploymentSource = "active";
      } else if (inProgressDeployment) {
        deploymentPhase = inProgressDeployment.phase || "unknown";
        deploymentSource = "in_progress";
      }
      console.log(`App ${this.state.app_id} deployment phase: ${deploymentPhase} (${deploymentSource})`);
      if (isDeploymentFailed(deploymentPhase)) {
        console.log(`App deployment failed: ${getDeploymentStatusDescription(deploymentPhase)}`);
        return false;
      }
      return isDeploymentReady(deploymentPhase);
    } catch (error) {
      console.log(`Readiness check failed: ${error instanceof Error ? error.message : "Unknown error"}`);
      return false;
    }
  }
  getInfo() {
    if (!this.state.app_id) {
      cli.output("No function deployed");
      return;
    }
    try {
      cli.output("Fetching function information...");
      const app = this.makeDORequest("GET", `/apps/${this.state.app_id}`, void 0, true);
      const appData = app.app;
      const func = appData.spec?.functions?.[0];
      cli.output("=== Function Information ===");
      cli.output(`App: ${appData.spec.name} (${appData.id})`);
      cli.output(`Component: ${func?.name || "N/A"}`);
      cli.output(`Status: ${appData.active_deployment?.phase || "Unknown"}`);
      cli.output(`URL: ${appData.live_url || "Not available"}`);
      cli.output(`Runtime: Auto-detected from source`);
      cli.output(`Scaling: Managed by platform`);
    } catch (error) {
      cli.output(`Error: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  getUrl() {
    if (!this.state.app_id) {
      cli.output("No function deployed");
      return;
    }
    try {
      const app = this.makeDORequest("GET", `/apps/${this.state.app_id}`, void 0, true);
      const appData = app.app;
      if (appData.live_url) {
        cli.output(`Function URL: ${appData.live_url}`);
        cli.output(`Test: curl "${appData.live_url}"`);
      } else {
        cli.output("Function URL not available yet");
      }
    } catch (error) {
      cli.output(`Error: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  getLogs() {
    if (!this.state.app_id) {
      cli.output("No function deployed");
      return;
    }
    try {
      const app = this.makeDORequest("GET", `/apps/${this.state.app_id}`, void 0, true);
      const appData = app.app;
      cli.output("=== Deployment Status ===");
      cli.output(`Status: ${appData.active_deployment?.phase || "Unknown"}`);
      if (appData.active_deployment) {
        cli.output(`Deployment ID: ${appData.active_deployment.id}`);
        try {
          const deployments = this.makeDORequest("GET", `/apps/${this.state.app_id}/deployments`, void 0, true);
          cli.output(`Recent deployments: ${deployments.deployments?.length || 0}`);
        } catch (logError) {
          cli.output("Could not fetch deployment details");
        }
      }
      cli.output(`Console: https://cloud.digitalocean.com/apps/${this.state.app_id}`);
    } catch (error) {
      cli.output(`Error: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  deploy() {
    if (!this.state.app_id) {
      cli.output("No function to redeploy");
      return;
    }
    try {
      cli.output("Triggering new deployment...");
      const app = this.makeDORequest("GET", `/apps/${this.state.app_id}`, void 0, true);
      const updatedApp = this.makeDORequest("PUT", `/apps/${this.state.app_id}`, { spec: app.app.spec }, true);
      cli.output("Deployment triggered");
      cli.output(`Status: ${updatedApp.app.active_deployment?.phase || "Unknown"}`);
    } catch (error) {
      cli.output(`Error: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Validate the function definition
   */
  validateDefinition() {
    const errors = validateFunctionDefinition(this.definition);
    if (errors.length > 0) {
      throw new Error(`Invalid function definition:
${errors.join("\n")}`);
    }
  }
  /**
   * Build app specification with proper secret resolution
   */
  buildAppSpec() {
    const functionComponent = {
      name: sanitizeComponentName(this.definition.component_name),
      source_dir: this.definition.source_dir || "/",
      github: {
        repo: normalizeGitHubRepo(this.definition.github_repo),
        branch: this.definition.github_branch || "main",
        deploy_on_push: this.definition.github_deploy_on_push !== false
      }
      // Note: Functions API doesn't support instance_count, instance_size_slug, environment_slug
      // These are managed automatically by the platform
    };
    if (this.definition.routes && this.definition.routes.length > 0) {
      functionComponent.routes = [...this.definition.routes];
    }
    if (this.definition.envs && this.definition.envs.length > 0) {
      functionComponent.envs = buildEnvironmentVariables(
        [...this.definition.envs],
        (ref) => this.getSecretValue(ref)
      );
    }
    if (this.definition.log_destinations && this.definition.log_destinations.length > 0) {
      functionComponent.log_destinations = buildLogDestinations(
        [...this.definition.log_destinations],
        (ref) => this.getSecretValue(ref)
      );
    }
    if (this.definition.build_command) {
      functionComponent.build_command = this.definition.build_command;
    }
    if (this.definition.run_command) {
      functionComponent.run_command = this.definition.run_command;
    }
    if (this.definition.cpu_kind) {
      functionComponent.cpu_kind = this.definition.cpu_kind;
    }
    const spec = {
      name: sanitizeAppName(this.definition.app_name),
      region: this.definition.region || "nyc",
      functions: [functionComponent]
    };
    if (this.definition.alerts && this.definition.alerts.length > 0) {
      spec.alerts = [...this.definition.alerts];
    }
    if (this.definition.domains && this.definition.domains.length > 0) {
      spec.domains = [...this.definition.domains];
    }
    return spec;
  }
  /**
   * Add function component to existing app
   */
  addFunctionToExistingApp(existingApp) {
    const currentSpec = existingApp.spec;
    const newFunctionComponent = {
      name: sanitizeComponentName(this.definition.component_name),
      source_dir: this.definition.source_dir || "/",
      github: {
        repo: normalizeGitHubRepo(this.definition.github_repo),
        branch: this.definition.github_branch || "main",
        deploy_on_push: this.definition.github_deploy_on_push !== false
      }
      // Note: Functions API doesn't support instance_count, instance_size_slug, environment_slug
      // These are managed automatically by the platform
    };
    if (this.definition.routes && this.definition.routes.length > 0) {
      newFunctionComponent.routes = [...this.definition.routes];
    }
    if (this.definition.envs && this.definition.envs.length > 0) {
      newFunctionComponent.envs = buildEnvironmentVariables(
        [...this.definition.envs],
        (ref) => this.getSecretValue(ref)
      );
    }
    if (!currentSpec.functions) {
      currentSpec.functions = [];
    }
    currentSpec.functions.push(newFunctionComponent);
    const updatedApp = this.updateApp(existingApp.id, currentSpec);
    const state = formatFunctionState(updatedApp, true, this.definition.component_name);
    Object.assign(this.state, state);
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "getInfo", _getInfo_dec, _AppFunction);
__decorateElement(_init, 1, "getUrl", _getUrl_dec, _AppFunction);
__decorateElement(_init, 1, "getLogs", _getLogs_dec, _AppFunction);
__decorateElement(_init, 1, "deploy", _deploy_dec, _AppFunction);
__decoratorMetadata(_init, _AppFunction);
__name(_AppFunction, "AppFunction");
// Customize readiness check parameters
__publicField(_AppFunction, "readiness", { period: 10, initialDelay: 5, attempts: 20 });
var AppFunction = _AppFunction;



function main(def, state, ctx) {
  const entity = new AppFunction(def, state, ctx);
  return entity.main(ctx);
}
