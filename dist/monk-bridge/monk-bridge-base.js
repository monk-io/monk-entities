// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// input/monk-bridge/monkBridgeBase.ts
var monk_bridge_base_exports = {};
__export(monk_bridge_base_exports, {
  MonkBridgeBase: () => MonkBridgeBase
});
module.exports = __toCommonJS(monk_bridge_base_exports);
var import_base = require("monkec/base");
var import_secret = __toESM(require("secret"));
var import_cli = __toESM(require("cli"));
var import_monkrpc = __toESM(require("monkrpc"));
var MonkBridgeBase = class extends import_base.MonkEntity {
  constructor() {
    super(...arguments);
    __publicField(this, "client");
    __publicField(this, "allowed");
  }
  getBaseAllowedMethods() {
    return [];
  }
  before() {
    const configured = Array.isArray(this.definition.allowed_methods) ? this.definition.allowed_methods.filter((m) => typeof m === "string") : void 0;
    const base = new Set(this.getBaseAllowedMethods());
    if (configured && configured.length > 0) for (const m of configured) base.add(m);
    this.allowed = base;
  }
  safeCall(method, payload) {
    if (!this.allowed.has(method)) throw new Error(`Method not allowed by entity policy: ${method}`);
    this.debugRpc(method, payload);
    const c = this.ensureClient();
    return c.call(method, payload);
  }
  isAllowed(method) {
    return this.allowed.has(method);
  }
  ensureClient() {
    if (this.client) return this.client;
    const code = import_secret.default.get(this.definition.monkcode_secret_ref);
    if (!code) throw new Error(`Missing monkcode in secret: ${this.definition.monkcode_secret_ref}`);
    this.client = import_monkrpc.default.connect({ monkcode: code });
    return this.client;
  }
  debugRpc(method, payload) {
    return;
    try {
      const preview = this.payloadPreview(payload);
      if (preview === void 0) import_cli.default.output(`monk/rpc ${method}`);
      else import_cli.default.output(`monk/rpc ${method} ${preview}`);
    } catch {
      import_cli.default.output(`monk/rpc ${method}`);
    }
  }
  payloadPreview(payload) {
    if (payload === void 0 || payload === null) return void 0;
    if (typeof payload !== "object") return JSON.stringify(payload);
    const keys = Object.keys(payload);
    const limit = 6;
    const obj = {};
    for (const k of keys.slice(0, limit)) {
      const v = payload[k];
      obj[k] = typeof v === "object" && v !== null ? "[object]" : v;
    }
    if (keys.length > limit) obj.__truncated__ = true;
    return JSON.stringify(obj);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MonkBridgeBase
});
