
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/monk-bridge/cluster.ts
const base = require("monkec/base");
const action = base.action;
const cli = require("cli");
const monkBridgeBase = require("monk-bridge/monk-bridge-base");
const MonkBridgeBase = monkBridgeBase.MonkBridgeBase;
var ALLOWED = [
  "cluster.Info",
  "cluster.Peers",
  "internal.GetVersion",
  "templates.GetState",
  "templates.Balancers"
];
var _refresh_dec, _a, _init;
var _Cluster = class _Cluster extends (_a = MonkBridgeBase, _refresh_dec = [action("refresh")], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  getBaseAllowedMethods() {
    return ALLOWED;
  }
  create() {
    const info = this.safeCall("cluster.Info", null);
    const versionResp = this.safeCall("internal.GetVersion", null);
    const balancers = this.safeCall("templates.Balancers", null);
    let peersMin;
    try {
      const peers = this.safeCall("cluster.Peers", null);
      if (Array.isArray(peers)) {
        peersMin = peers.map((p) => ({
          id: p?.id || p?.ID || p?.Id || "",
          public_ip: p?.publicIP || p?.PublicIP || p?.public_ip,
          name: p?.name || p?.Name,
          region: p?.region || p?.Region,
          provider: p?.provider || p?.Provider,
          version: p?.version || p?.Version
        })).filter((p) => p.id);
      }
    } catch {
    }
    const balancersMap = this.normalizeBalancers(balancers);
    const services = this.definition.expose_balancers === false ? {} : this.servicesFromBalancers(balancersMap);
    this.state.balancers_list = Object.values(services);
    this.state.version = versionResp?.Version || versionResp?.version || "";
    this.state.last_synced_at = Date.now();
    this.state.existing = true;
    if (peersMin) this.state.peers = peersMin;
    this.state.cluster_summary_id = info?.ID || info?.Id || info?.id || this.state.cluster_summary_id;
    this.state.cluster_summary_name = info?.Name || info?.name || this.state.cluster_summary_name;
    this.state.cluster_summary_open_ports = info?.OpenPorts || info?.openPorts || this.state.cluster_summary_open_ports;
    this.refreshTemplatesData();
  }
  update() {
    this.create();
  }
  refresh() {
    this.update();
    try {
      const v = this.safeCall("internal.GetVersion", null);
      this.state.version = v?.Version || v?.version || this.state.version || "";
    } catch {
    }
    cli.output("Refreshed remote cluster data");
  }
  normalizeBalancers(input) {
    if (!input) return {};
    if (Array.isArray(input)) {
      const map = {};
      for (const it of input) {
        const key = it?.name || it?.aliasName || it?.path || `balancer-${Object.keys(map).length + 1}`;
        map[key] = it;
      }
      return map;
    }
    return input;
  }
  servicesFromBalancers(balancers) {
    const out = {};
    for (const [key, b] of Object.entries(balancers)) {
      if (!b || !b.Address) continue;
      const port = String(b.FrontendPort || b.Port || "");
      const safeName = `balancer-${(b.Name || b.AliasName || key).toLowerCase().replace(/[^a-z0-9-]/g, "-")}-${port}`.replace(/-+/g, "-");
      out[safeName] = { address: b.Address, port, protocol: "tcp", publish: true };
    }
    return out;
  }
  refreshTemplatesData() {
    const f = this.definition.filters || {};
    let info = void 0;
    if (this.isAllowed("templates.GetState")) {
      const payload = {
        PeerID: "",
        TagsFilter: Array.isArray(f.tags_filter) ? f.tags_filter : [],
        NameFilter: "",
        Local: Boolean(f.local),
        All: true,
        FindGroups: true,
        FindRunnables: true,
        FindEntities: true
      };
      const state = this.safeCall("templates.GetState", payload);
      if (state && Array.isArray(state.ListTree)) {
        info = state.ListTree;
      } else {
        info = state;
      }
    }
    if (info !== void 0) this.state.templates_info = info;
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "refresh", _refresh_dec, _Cluster);
__decoratorMetadata(_init, _Cluster);
__name(_Cluster, "Cluster");
var Cluster = _Cluster;



function main(def, state, ctx) {
  const entity = new Cluster(def, state, ctx);
  return entity.main(ctx);
}
