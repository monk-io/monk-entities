
// Generated by MonkEC - targeting Goja runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// input/monk-bridge/runnable.ts
const base = require("monkec/base");
const action = base.action;
const cli = require("cli");
const monkBridgeBase = require("monk-bridge/monk-bridge-base");
const MonkBridgeBase = monkBridgeBase.MonkBridgeBase;
var ALLOWED = [
  "templates.Describe",
  "cluster.Peers"
];
var _describeAction_dec, _refresh_dec, _a, _init;
var _Runnable = class _Runnable extends (_a = MonkBridgeBase, _refresh_dec = [action("refresh")], _describeAction_dec = [action("describe")], _a) {
  constructor() {
    super(...arguments);
    __runInitializers(_init, 5, this);
  }
  getBaseAllowedMethods() {
    return ALLOWED;
  }
  create() {
    if (!this.definition.runnable || this.definition.runnable.trim() === "") throw new Error("runnable is required");
    const desc = this.safeCall("templates.Describe", { Runnable: this.definition.runnable });
    let peerIPByID = {};
    try {
      const peers = this.safeCall("cluster.Peers", null);
      if (Array.isArray(peers)) {
        for (const p of peers) {
          const id = p?.ID || p?.Id || p?.id;
          const ip = p?.PublicIP || p?.publicIP || p?.public_ip;
          if (id && ip) peerIPByID[id] = String(ip);
        }
      }
    } catch {
    }
    const endpoints = this.extractEndpoints(desc, peerIPByID);
    const instanceIds = Array.isArray(desc?.InstanceIds) ? desc.InstanceIds : [];
    const template = desc?.Template || desc?.template;
    const isRun = typeof desc?.IsRun === "boolean" ? desc.IsRun : void 0;
    this.state.endpoints = endpoints;
    this.state.runnable = this.definition.runnable;
    if (template) this.state.template = String(template);
    if (instanceIds && instanceIds.length > 0) this.state.instance_ids = instanceIds.map(String);
    if (typeof isRun === "boolean") this.state.is_run = isRun;
    this.state.last_synced_at = Date.now();
  }
  update() {
    this.create();
  }
  refresh() {
    this.update();
    cli.output("Refreshed runnable description");
  }
  describeAction() {
    const res = this.safeCall("templates.Describe", { Runnable: this.definition.runnable });
    cli.output(JSON.stringify(res || {}, null, 2));
  }
  extractEndpoints(desc, peerIPByID) {
    const endpoints = [];
    try {
      const balancers = Array.isArray(desc?.Balancers) ? desc.Balancers : [];
      for (const b of balancers) {
        const address = b?.Address;
        const port = String(b?.FrontendPort || b?.Port || "");
        const name = (b?.Name || b?.AliasName || "balancer").toString();
        if (address && port) endpoints.push({ source: "balancer", name, address, port, healthy: Boolean(b?.Healthy), raw: b });
      }
    } catch {
    }
    try {
      const cd = desc?.ContainerDetails;
      if (cd && typeof cd === "object") {
        for (const group of Object.values(cd)) {
          if (!group || typeof group !== "object") continue;
          for (const [k, c] of Object.entries(group)) {
            const name = (c?.Name || c?.ShortName || k || "container").toString();
            const peerId = c?.PeerID || c?.peerID || c?.peerId;
            const ipFromPeer = peerId && peerIPByID[peerId] ? peerIPByID[peerId] : void 0;
            let added = false;
            const pubs = Array.isArray(c?.PublicPorts) ? c.PublicPorts : Array.isArray(c?.public_ports) ? c.public_ports : Array.isArray(c?.publicPorts) ? c.publicPorts : [];
            for (const p of pubs) {
              const parsed = this.parsePublicPort(String(p));
              const finalIP = parsed.ip || ipFromPeer;
              const finalPort = parsed.port;
              if (finalPort) {
                endpoints.push({ source: "container", name, address: finalIP, port: finalPort, raw: c });
                added = true;
              }
            }
            if (!added) {
              const ports = Array.isArray(c?.Ports) ? c.Ports : Array.isArray(c?.ports) ? c.ports : [];
              for (const p of ports) {
                const s = String(p);
                const parsed = this.parsePublicPort(s);
                const finalIP = parsed.ip || ipFromPeer;
                const finalPort = parsed.port;
                if (finalPort) {
                  endpoints.push({ source: "container", name, address: finalIP, port: finalPort, raw: c });
                  added = true;
                }
              }
            }
          }
        }
      }
    } catch {
    }
    return endpoints;
  }
  parsePublicPort(s) {
    let left = s.trim();
    if (left.includes("->")) left = left.split("->")[0];
    if (left.includes("/")) left = left.split("/")[0];
    left = left.replace(/^[^0-9]+/, "");
    if (left.includes(":")) {
      const parts = left.split(":").map((x) => x.trim()).filter((x) => x.length > 0);
      if (parts.length >= 3 && parts[0].includes(".")) {
        return { ip: parts[0], port: parts[1] };
      }
      if (parts.length === 2 && parts[0].includes(".")) {
        return { ip: parts[0], port: parts[1] };
      }
      if (parts.length >= 2 && /^\d+$/.test(parts[0])) {
        return { port: parts[0] };
      }
      const last = parts.reverse().find((p) => /^\d+$/.test(p));
      return { port: last };
    }
    const portOnly = left && /\d+/.test(left) ? left : void 0;
    return { port: portOnly };
  }
};
_init = __decoratorStart(_a);
__decorateElement(_init, 1, "refresh", _refresh_dec, _Runnable);
__decorateElement(_init, 1, "describeAction", _describeAction_dec, _Runnable);
__decoratorMetadata(_init, _Runnable);
__name(_Runnable, "Runnable");
__publicField(_Runnable, "readiness", { period: 10, initialDelay: 1, attempts: 12 });
var Runnable = _Runnable;



function main(def, state, ctx) {
  const entity = new Runnable(def, state, ctx);
  return entity.main(ctx);
}
