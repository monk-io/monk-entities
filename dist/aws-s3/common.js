// Generated by MonkEC - targeting Goja runtime
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// input/aws-s3/common.ts
var common_exports = {};
__export(common_exports, {
  CORS_METHODS: () => CORS_METHODS,
  DEFAULT_BUCKET_CONFIG: () => DEFAULT_BUCKET_CONFIG,
  STORAGE_CLASSES: () => STORAGE_CLASSES,
  buildEncryptionConfigXml: () => buildEncryptionConfigXml,
  buildLifecycleConfigXml: () => buildLifecycleConfigXml,
  escapeXml: () => escapeXml,
  generatePresignedUrlParams: () => generatePresignedUrlParams,
  parseS3Error: () => parseS3Error,
  validateBucketName: () => validateBucketName,
  validateObjectKey: () => validateObjectKey,
  validateRegion: () => validateRegion
});
module.exports = __toCommonJS(common_exports);
function validateBucketName(bucketName) {
  if (!bucketName || bucketName.length < 3 || bucketName.length > 63) {
    return false;
  }
  if (!/^[a-z0-9.-]+$/.test(bucketName)) {
    return false;
  }
  if (!/^[a-z0-9]/.test(bucketName) || !/[a-z0-9]$/.test(bucketName)) {
    return false;
  }
  if (bucketName.includes("..")) {
    return false;
  }
  const ipRegex = /^(\d{1,3}\.){3}\d{1,3}$/;
  if (ipRegex.test(bucketName)) {
    return false;
  }
  return true;
}
function parseS3Error(response) {
  if (response.error) {
    return response.error;
  }
  if (response.body) {
    try {
      const errorCodeMatch = response.body.match(/<Code>(.*?)<\/Code>/);
      const errorMessageMatch = response.body.match(/<Message>(.*?)<\/Message>/);
      if (errorCodeMatch && errorMessageMatch) {
        return `${errorCodeMatch[1]}: ${errorMessageMatch[1]}`;
      }
      if (errorCodeMatch) {
        return errorCodeMatch[1];
      }
      if (errorMessageMatch) {
        return errorMessageMatch[1];
      }
    } catch (e) {
      return response.body;
    }
  }
  return `HTTP ${response.statusCode}: ${response.status || "Unknown error"}`;
}
var DEFAULT_BUCKET_CONFIG = {
  versioning: false,
  public_read_access: false,
  public_write_access: false
};
function validateObjectKey(key) {
  if (!key || key.length === 0 || key.length > 1024) {
    return false;
  }
  const problematicChars = /[\x00-\x1F\x7F]/;
  if (problematicChars.test(key)) {
    return false;
  }
  return true;
}
function escapeXml(unsafe) {
  return unsafe.replace(/[<>&'"]/g, function(c) {
    switch (c) {
      case "<":
        return "&lt;";
      case ">":
        return "&gt;";
      case "&":
        return "&amp;";
      case "'":
        return "&apos;";
      case '"':
        return "&quot;";
      default:
        return c;
    }
  });
}
function validateRegion(region) {
  const regionRegex = /^[a-z]{2}-[a-z]+-\d+$/;
  return regionRegex.test(region);
}
function generatePresignedUrlParams(_method, expires) {
  return `X-Amz-Expires=${expires}&X-Amz-Date=${(/* @__PURE__ */ new Date()).toISOString().replace(/[:\-]|\.\d{3}/g, "")}`;
}
var STORAGE_CLASSES = [
  "STANDARD",
  "STANDARD_IA",
  "ONEZONE_IA",
  "REDUCED_REDUNDANCY",
  "GLACIER",
  "DEEP_ARCHIVE",
  "INTELLIGENT_TIERING"
];
var CORS_METHODS = [
  "GET",
  "PUT",
  "POST",
  "DELETE",
  "HEAD"
];
function buildLifecycleConfigXml(rules) {
  const rulesXml = rules.map((rule) => {
    let ruleXml = `<Rule>
            <ID>${escapeXml(rule.id)}</ID>
            <Status>${rule.status}</Status>`;
    if (rule.filter) {
      ruleXml += "<Filter>";
      if (rule.filter.prefix && rule.filter.tags) {
        ruleXml += "<And>";
        ruleXml += `<Prefix>${escapeXml(rule.filter.prefix)}</Prefix>`;
        Object.entries(rule.filter.tags).forEach(([key, value]) => {
          ruleXml += `<Tag><Key>${escapeXml(key)}</Key><Value>${escapeXml(value)}</Value></Tag>`;
        });
        ruleXml += "</And>";
      } else if (rule.filter.prefix) {
        ruleXml += `<Prefix>${escapeXml(rule.filter.prefix)}</Prefix>`;
      } else if (rule.filter.tags) {
        Object.entries(rule.filter.tags).forEach(([key, value]) => {
          ruleXml += `<Tag><Key>${escapeXml(key)}</Key><Value>${escapeXml(value)}</Value></Tag>`;
        });
      }
      ruleXml += "</Filter>";
    }
    if (rule.expiration) {
      ruleXml += "<Expiration>";
      if (rule.expiration.days) {
        ruleXml += `<Days>${rule.expiration.days}</Days>`;
      }
      if (rule.expiration.date) {
        ruleXml += `<Date>${rule.expiration.date}</Date>`;
      }
      ruleXml += "</Expiration>";
    }
    if (rule.transitions) {
      rule.transitions.forEach((transition) => {
        ruleXml += "<Transition>";
        if (transition.days) {
          ruleXml += `<Days>${transition.days}</Days>`;
        }
        if (transition.date) {
          ruleXml += `<Date>${transition.date}</Date>`;
        }
        ruleXml += `<StorageClass>${transition.storage_class}</StorageClass>`;
        ruleXml += "</Transition>";
      });
    }
    ruleXml += "</Rule>";
    return ruleXml;
  }).join("");
  return `<LifecycleConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
        ${rulesXml}
    </LifecycleConfiguration>`;
}
function buildEncryptionConfigXml(rules) {
  const rulesXml = rules.map((rule) => {
    let ruleXml = `<Rule>
            <ApplyServerSideEncryptionByDefault>
                <SSEAlgorithm>${rule.apply_server_side_encryption_by_default.sse_algorithm}</SSEAlgorithm>`;
    if (rule.apply_server_side_encryption_by_default.kms_master_key_id) {
      ruleXml += `<KMSMasterKeyID>${escapeXml(rule.apply_server_side_encryption_by_default.kms_master_key_id)}</KMSMasterKeyID>`;
    }
    ruleXml += "</ApplyServerSideEncryptionByDefault>";
    if (rule.bucket_key_enabled !== void 0) {
      ruleXml += `<BucketKeyEnabled>${rule.bucket_key_enabled}</BucketKeyEnabled>`;
    }
    ruleXml += "</Rule>";
    return ruleXml;
  }).join("");
  return `<ServerSideEncryptionConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/">
        ${rulesXml}
    </ServerSideEncryptionConfiguration>`;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CORS_METHODS,
  DEFAULT_BUCKET_CONFIG,
  STORAGE_CLASSES,
  buildEncryptionConfigXml,
  buildLifecycleConfigXml,
  escapeXml,
  generatePresignedUrlParams,
  parseS3Error,
  validateBucketName,
  validateObjectKey,
  validateRegion
});
